
NHK2024_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006338  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006518  08006518  00016518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800659c  0800659c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800659c  0800659c  0001659c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065a4  080065a4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a4  080065a4  000165a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065a8  080065a8  000165a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080065ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000068  08006614  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08006614  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b50  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ac2  00000000  00000000  00036c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  000396f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001010  00000000  00000000  0003ab88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002806c  00000000  00000000  0003bb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016bfb  00000000  00000000  00063c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114e40  00000000  00000000  0007a7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060f0  00000000  00000000  0018f640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00195730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006500 	.word	0x08006500

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08006500 	.word	0x08006500

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <LL_VREFBUF_SetVoltageScaling>:
  *         @arg @ref LL_VREFBUF_VOLTAGE_SCALE1
  *         @arg @ref LL_VREFBUF_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_VREFBUF_SetVoltageScaling(uint32_t Scale)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, Scale);
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <LL_VREFBUF_SetVoltageScaling+0x24>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80005cc:	4904      	ldr	r1, [pc, #16]	; (80005e0 <LL_VREFBUF_SetVoltageScaling+0x24>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	600b      	str	r3, [r1, #0]
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	40010030 	.word	0x40010030

080005e4 <HAL_TIM_PeriodElapsedCallback>:
	 */
	low_pass_filter_settings = low_pass_filter_init(2e-5, 1e-4);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    if (htim == &htim6){ // 10KHz
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a10      	ldr	r2, [pc, #64]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d119      	bne.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x44>
    	int val;
    	int filter_val;
    	HAL_ADC_Start(&hadc1);
 80005f4:	480f      	ldr	r0, [pc, #60]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005f6:	f001 f891 	bl	800171c <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK) {
 80005fa:	2101      	movs	r1, #1
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005fe:	f001 f9a5 	bl	800194c <HAL_ADC_PollForConversion>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10c      	bne.n	8000622 <HAL_TIM_PeriodElapsedCallback+0x3e>
			HAL_ADC_Stop(&hadc1);
 8000608:	480a      	ldr	r0, [pc, #40]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800060a:	f001 f96b 	bl	80018e4 <HAL_ADC_Stop>
			val = HAL_ADC_GetValue(&hadc1);
 800060e:	4809      	ldr	r0, [pc, #36]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000610:	f001 faa2 	bl	8001b58 <HAL_ADC_GetValue>
 8000614:	4603      	mov	r3, r0
 8000616:	60fb      	str	r3, [r7, #12]
//			filter_val = (int)low_pass_filter_update(low_pass_filter_settings, val);
			printf("%d\r\n", val);
 8000618:	68f9      	ldr	r1, [r7, #12]
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800061c:	f005 f94c 	bl	80058b8 <iprintf>
			//ADC変換終了を待機
		} else {
			printf("error\r\n");
		}
    }
}
 8000620:	e002      	b.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x44>
			printf("error\r\n");
 8000622:	4806      	ldr	r0, [pc, #24]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000624:	f005 f9ae 	bl	8005984 <puts>
}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000184 	.word	0x20000184
 8000634:	20000084 	.word	0x20000084
 8000638:	08006518 	.word	0x08006518
 800063c:	08006520 	.word	0x08006520

08000640 <_write>:

int _write(int file, char *ptr, int len)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hlpuart1,(uint8_t *)ptr,len,8);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	b29a      	uxth	r2, r3
 8000650:	2308      	movs	r3, #8
 8000652:	68b9      	ldr	r1, [r7, #8]
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <_write+0x24>)
 8000656:	f004 f915 	bl	8004884 <HAL_UART_Transmit>
    return len;
 800065a:	687b      	ldr	r3, [r7, #4]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200000f0 	.word	0x200000f0

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f000 fb63 	bl	8000d36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f000 f818 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f000 f94e 	bl	8000914 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000678:	f000 f8cc 	bl	8000814 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800067c:	f000 f852 	bl	8000724 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000680:	f000 f912 	bl	80008a8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <main+0x34>)
 8000686:	f003 fd2d 	bl	80040e4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  LL_VREFBUF_Enable();
  LL_VREFBUF_SetVoltageScaling(LL_VREFBUF_VOLTAGE_SCALE2);
 800068a:	2020      	movs	r0, #32
 800068c:	f7ff ff96 	bl	80005bc <LL_VREFBUF_SetVoltageScaling>
//  printf("vrefint %d\r\n", Vrefinit_ADC);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000690:	217f      	movs	r1, #127	; 0x7f
 8000692:	4803      	ldr	r0, [pc, #12]	; (80006a0 <main+0x38>)
 8000694:	f002 f8b2 	bl	80027fc <HAL_ADCEx_Calibration_Start>
  while (1)
 8000698:	e7fe      	b.n	8000698 <main+0x30>
 800069a:	bf00      	nop
 800069c:	20000184 	.word	0x20000184
 80006a0:	20000084 	.word	0x20000084

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0318 	add.w	r3, r7, #24
 80006ae:	2238      	movs	r2, #56	; 0x38
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 f96e 	bl	8005994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ca:	f002 fc93 	bl	8002ff4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ce:	2302      	movs	r3, #2
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2340      	movs	r3, #64	; 0x40
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006dc:	2300      	movs	r3, #0
 80006de:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0318 	add.w	r3, r7, #24
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 fd29 	bl	800313c <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006f0:	f000 f928 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f003 f827 	bl	8003760 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000718:	f000 f914 	bl	8000944 <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	; 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800072a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2220      	movs	r2, #32
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f005 f929 	bl	8005994 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000742:	4b32      	ldr	r3, [pc, #200]	; (800080c <MX_ADC1_Init+0xe8>)
 8000744:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000748:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800074a:	4b30      	ldr	r3, [pc, #192]	; (800080c <MX_ADC1_Init+0xe8>)
 800074c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000750:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000752:	4b2e      	ldr	r3, [pc, #184]	; (800080c <MX_ADC1_Init+0xe8>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000758:	4b2c      	ldr	r3, [pc, #176]	; (800080c <MX_ADC1_Init+0xe8>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800075e:	4b2b      	ldr	r3, [pc, #172]	; (800080c <MX_ADC1_Init+0xe8>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <MX_ADC1_Init+0xe8>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <MX_ADC1_Init+0xe8>)
 800076c:	2204      	movs	r2, #4
 800076e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_ADC1_Init+0xe8>)
 8000772:	2200      	movs	r2, #0
 8000774:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000776:	4b25      	ldr	r3, [pc, #148]	; (800080c <MX_ADC1_Init+0xe8>)
 8000778:	2200      	movs	r2, #0
 800077a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_ADC1_Init+0xe8>)
 800077e:	2201      	movs	r2, #1
 8000780:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_ADC1_Init+0xe8>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_ADC1_Init+0xe8>)
 800078c:	2200      	movs	r2, #0
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_ADC1_Init+0xe8>)
 8000792:	2200      	movs	r2, #0
 8000794:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_ADC1_Init+0xe8>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_ADC1_Init+0xe8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_ADC1_Init+0xe8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ac:	4817      	ldr	r0, [pc, #92]	; (800080c <MX_ADC1_Init+0xe8>)
 80007ae:	f000 fdf9 	bl	80013a4 <HAL_ADC_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80007b8:	f000 f8c4 	bl	8000944 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c4:	4619      	mov	r1, r3
 80007c6:	4811      	ldr	r0, [pc, #68]	; (800080c <MX_ADC1_Init+0xe8>)
 80007c8:	f002 f87a 	bl	80028c0 <HAL_ADCEx_MultiModeConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007d2:	f000 f8b7 	bl	8000944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_ADC1_Init+0xec>)
 80007d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007da:	2306      	movs	r3, #6
 80007dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80007de:	2307      	movs	r3, #7
 80007e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007e2:	237f      	movs	r3, #127	; 0x7f
 80007e4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007e6:	2304      	movs	r3, #4
 80007e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_ADC1_Init+0xe8>)
 80007f4:	f001 f9be 	bl	8001b74 <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80007fe:	f000 f8a1 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3730      	adds	r7, #48	; 0x30
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000084 	.word	0x20000084
 8000810:	04300002 	.word	0x04300002

08000814 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000818:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <MX_LPUART1_UART_Init+0x8c>)
 800081a:	4a22      	ldr	r2, [pc, #136]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 800081c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_LPUART1_UART_Init+0x8c>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <MX_LPUART1_UART_Init+0x8c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_LPUART1_UART_Init+0x8c>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000832:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_LPUART1_UART_Init+0x8c>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <MX_LPUART1_UART_Init+0x8c>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_LPUART1_UART_Init+0x8c>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_LPUART1_UART_Init+0x8c>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_LPUART1_UART_Init+0x8c>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_LPUART1_UART_Init+0x8c>)
 8000852:	2200      	movs	r2, #0
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000856:	4812      	ldr	r0, [pc, #72]	; (80008a0 <MX_LPUART1_UART_Init+0x8c>)
 8000858:	f003 ffc4 	bl	80047e4 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000862:	f000 f86f 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000866:	2100      	movs	r1, #0
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <MX_LPUART1_UART_Init+0x8c>)
 800086a:	f004 fded 	bl	8005448 <HAL_UARTEx_SetTxFifoThreshold>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000874:	f000 f866 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000878:	2100      	movs	r1, #0
 800087a:	4809      	ldr	r0, [pc, #36]	; (80008a0 <MX_LPUART1_UART_Init+0x8c>)
 800087c:	f004 fe22 	bl	80054c4 <HAL_UARTEx_SetRxFifoThreshold>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000886:	f000 f85d 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_LPUART1_UART_Init+0x8c>)
 800088c:	f004 fda3 	bl	80053d6 <HAL_UARTEx_DisableFifoMode>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000896:	f000 f855 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000f0 	.word	0x200000f0
 80008a4:	40008000 	.word	0x40008000

080008a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_TIM6_Init+0x64>)
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <MX_TIM6_Init+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_TIM6_Init+0x64>)
 80008c0:	2210      	movs	r2, #16
 80008c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_TIM6_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_TIM6_Init+0x64>)
 80008cc:	2231      	movs	r2, #49	; 0x31
 80008ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_TIM6_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008d6:	480d      	ldr	r0, [pc, #52]	; (800090c <MX_TIM6_Init+0x64>)
 80008d8:	f003 fbac 	bl	8004034 <HAL_TIM_Base_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80008e2:	f000 f82f 	bl	8000944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	4619      	mov	r1, r3
 80008f2:	4806      	ldr	r0, [pc, #24]	; (800090c <MX_TIM6_Init+0x64>)
 80008f4:	f003 fe9a 	bl	800462c <HAL_TIMEx_MasterConfigSynchronization>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80008fe:	f000 f821 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000184 	.word	0x20000184
 8000910:	40001000 	.word	0x40001000

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_GPIO_Init+0x2c>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <MX_GPIO_Init+0x2c>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_GPIO_Init+0x2c>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_MspInit+0x50>)
 8000958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095a:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <HAL_MspInit+0x50>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6613      	str	r3, [r2, #96]	; 0x60
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x50>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_MspInit+0x50>)
 8000970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <HAL_MspInit+0x50>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6593      	str	r3, [r2, #88]	; 0x58
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x50>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000986:	2000      	movs	r0, #0
 8000988:	f000 fa46 	bl	8000e18 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 800098c:	f000 fa6c 	bl	8000e68 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000990:	2000      	movs	r0, #0
 8000992:	f000 fa55 	bl	8000e40 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b09e      	sub	sp, #120	; 0x78
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	2254      	movs	r2, #84	; 0x54
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f004 ffe5 	bl	8005994 <memset>
  if(hadc->Instance==ADC1)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009d2:	d134      	bne.n	8000a3e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80009da:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80009de:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e0:	f107 0310 	add.w	r3, r7, #16
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 f8d7 	bl	8003b98 <HAL_RCCEx_PeriphCLKConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009f0:	f7ff ffa8 	bl	8000944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_ADC_MspInit+0xa4>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f8:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <HAL_ADC_MspInit+0xa4>)
 80009fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_ADC_MspInit+0xa4>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_ADC_MspInit+0xa4>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <HAL_ADC_MspInit+0xa4>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <HAL_ADC_MspInit+0xa4>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a24:	2301      	movs	r3, #1
 8000a26:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a34:	4619      	mov	r1, r3
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3a:	f002 f959 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3778      	adds	r7, #120	; 0x78
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b09e      	sub	sp, #120	; 0x78
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	2254      	movs	r2, #84	; 0x54
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f004 ff91 	bl	8005994 <memset>
  if(huart->Instance==LPUART1)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a1f      	ldr	r2, [pc, #124]	; (8000af4 <HAL_UART_MspInit+0xa8>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d136      	bne.n	8000aea <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a7c:	2320      	movs	r3, #32
 8000a7e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f003 f885 	bl	8003b98 <HAL_RCCEx_PeriphCLKConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a94:	f7ff ff56 	bl	8000944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <HAL_UART_MspInit+0xac>)
 8000a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a9c:	4a16      	ldr	r2, [pc, #88]	; (8000af8 <HAL_UART_MspInit+0xac>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_UART_MspInit+0xac>)
 8000aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_UART_MspInit+0xac>)
 8000ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab4:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <HAL_UART_MspInit+0xac>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abc:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_UART_MspInit+0xac>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ac8:	230c      	movs	r3, #12
 8000aca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ad8:	230c      	movs	r3, #12
 8000ada:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae6:	f002 f903 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3778      	adds	r7, #120	; 0x78
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40008000 	.word	0x40008000
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_TIM_Base_MspInit+0x44>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d113      	bne.n	8000b36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b12:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b14:	f043 0310 	orr.w	r3, r3, #16
 8000b18:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2036      	movs	r0, #54	; 0x36
 8000b2c:	f002 f8ab 	bl	8002c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b30:	2036      	movs	r0, #54	; 0x36
 8000b32:	f002 f8c2 	bl	8002cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40001000 	.word	0x40001000
 8000b44:	40021000 	.word	0x40021000

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <NMI_Handler+0x4>

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b94:	f000 f922 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <TIM6_DAC_IRQHandler+0x10>)
 8000ba2:	f003 fb17 	bl	80041d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000184 	.word	0x20000184

08000bb0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	e00a      	b.n	8000bd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bc2:	f3af 8000 	nop.w
 8000bc6:	4601      	mov	r1, r0
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	60ba      	str	r2, [r7, #8]
 8000bce:	b2ca      	uxtb	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dbf0      	blt.n	8000bc2 <_read+0x12>
  }

  return len;
 8000be0:	687b      	ldr	r3, [r7, #4]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c12:	605a      	str	r2, [r3, #4]
  return 0;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_isatty>:

int _isatty(int file)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f004 fe9e 	bl	80059c4 <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20020000 	.word	0x20020000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	200001d0 	.word	0x200001d0
 8000cbc:	20000328 	.word	0x20000328

08000cc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ce6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce8:	f7ff ffea 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	; (8000d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <LoopForever+0xe>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	; (8000d30 <LoopForever+0x16>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d12:	f004 fe5d 	bl	80059d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d16:	f7ff fca7 	bl	8000668 <main>

08000d1a <LoopForever>:

LoopForever:
    b LoopForever
 8000d1a:	e7fe      	b.n	8000d1a <LoopForever>
  ldr   r0, =_estack
 8000d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d28:	080065ac 	.word	0x080065ac
  ldr r2, =_sbss
 8000d2c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d30:	20000324 	.word	0x20000324

08000d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC1_2_IRQHandler>

08000d36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f001 ff95 	bl	8002c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d46:	200f      	movs	r0, #15
 8000d48:	f000 f80e 	bl	8000d68 <HAL_InitTick>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	71fb      	strb	r3, [r7, #7]
 8000d56:	e001      	b.n	8000d5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d58:	f7ff fdfa 	bl	8000950 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d5c:	79fb      	ldrb	r3, [r7, #7]

}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_InitTick+0x68>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d022      	beq.n	8000dc2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_InitTick+0x6c>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HAL_InitTick+0x68>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d88:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 ffa0 	bl	8002cd6 <HAL_SYSTICK_Config>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d10f      	bne.n	8000dbc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b0f      	cmp	r3, #15
 8000da0:	d809      	bhi.n	8000db6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da2:	2200      	movs	r2, #0
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000daa:	f001 ff6c 	bl	8002c86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_InitTick+0x70>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	e007      	b.n	8000dc6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	e004      	b.n	8000dc6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e001      	b.n	8000dc6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_IncTick+0x1c>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_IncTick+0x20>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <HAL_IncTick+0x1c>)
 8000dec:	6013      	str	r3, [r2, #0]
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	200001d4 	.word	0x200001d4
 8000dfc:	20000008 	.word	0x20000008

08000e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <HAL_GetTick+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200001d4 	.word	0x200001d4

08000e18 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8000e28:	4904      	ldr	r1, [pc, #16]	; (8000e3c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	600b      	str	r3, [r1, #0]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	40010030 	.word	0x40010030

08000e40 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f023 0202 	bic.w	r2, r3, #2
 8000e50:	4904      	ldr	r1, [pc, #16]	; (8000e64 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	600b      	str	r3, [r1, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40010030 	.word	0x40010030

08000e68 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000e7a:	f7ff ffc1 	bl	8000e00 <HAL_GetTick>
 8000e7e:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000e80:	e008      	b.n	8000e94 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8000e82:	f7ff ffbd 	bl	8000e00 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b0a      	cmp	r3, #10
 8000e8e:	d901      	bls.n	8000e94 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e006      	b.n	8000ea2 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0308 	and.w	r3, r3, #8
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0f0      	beq.n	8000e82 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40010030 	.word	0x40010030

08000eb0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	431a      	orrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	609a      	str	r2, [r3, #8]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	3360      	adds	r3, #96	; 0x60
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <LL_ADC_SetOffset+0x44>)
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	430a      	orrs	r2, r1
 8000f46:	4313      	orrs	r3, r2
 8000f48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f50:	bf00      	nop
 8000f52:	371c      	adds	r7, #28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	03fff000 	.word	0x03fff000

08000f60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3360      	adds	r3, #96	; 0x60
 8000f6e:	461a      	mov	r2, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3360      	adds	r3, #96	; 0x60
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fb6:	bf00      	nop
 8000fb8:	371c      	adds	r7, #28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b087      	sub	sp, #28
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	3360      	adds	r3, #96	; 0x60
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000fec:	bf00      	nop
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3360      	adds	r3, #96	; 0x60
 8001008:	461a      	mov	r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	431a      	orrs	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001022:	bf00      	nop
 8001024:	371c      	adds	r7, #28
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	615a      	str	r2, [r3, #20]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800107a:	b480      	push	{r7}
 800107c:	b087      	sub	sp, #28
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3330      	adds	r3, #48	; 0x30
 800108a:	461a      	mov	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	4413      	add	r3, r2
 8001098:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	f003 031f 	and.w	r3, r3, #31
 80010a4:	211f      	movs	r1, #31
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	401a      	ands	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	0e9b      	lsrs	r3, r3, #26
 80010b2:	f003 011f 	and.w	r1, r3, #31
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	f003 031f 	and.w	r3, r3, #31
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	431a      	orrs	r2, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010c6:	bf00      	nop
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b087      	sub	sp, #28
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3314      	adds	r3, #20
 80010e2:	461a      	mov	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	0e5b      	lsrs	r3, r3, #25
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	0d1b      	lsrs	r3, r3, #20
 80010fa:	f003 031f 	and.w	r3, r3, #31
 80010fe:	2107      	movs	r1, #7
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	401a      	ands	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	0d1b      	lsrs	r3, r3, #20
 800110c:	f003 031f 	and.w	r3, r3, #31
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	431a      	orrs	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800111c:	bf00      	nop
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001140:	43db      	mvns	r3, r3
 8001142:	401a      	ands	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0318 	and.w	r3, r3, #24
 800114a:	4908      	ldr	r1, [pc, #32]	; (800116c <LL_ADC_SetChannelSingleDiff+0x44>)
 800114c:	40d9      	lsrs	r1, r3
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	400b      	ands	r3, r1
 8001152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001156:	431a      	orrs	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	0007ffff 	.word	0x0007ffff

08001170 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f003 031f 	and.w	r3, r3, #31
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6093      	str	r3, [r2, #8]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011e0:	d101      	bne.n	80011e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001204:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001208:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001230:	d101      	bne.n	8001236 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001254:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001258:	f043 0201 	orr.w	r2, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800127c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001280:	f043 0202 	orr.w	r2, r3, #2
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d101      	bne.n	80012ac <LL_ADC_IsEnabled+0x18>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <LL_ADC_IsEnabled+0x1a>
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d101      	bne.n	80012d2 <LL_ADC_IsDisableOngoing+0x18>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <LL_ADC_IsDisableOngoing+0x1a>
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012f4:	f043 0204 	orr.w	r2, r3, #4
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001318:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800131c:	f043 0210 	orr.w	r2, r3, #16
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b04      	cmp	r3, #4
 8001342:	d101      	bne.n	8001348 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001366:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800136a:	f043 0220 	orr.w	r2, r3, #32
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b08      	cmp	r3, #8
 8001390:	d101      	bne.n	8001396 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ac:	2300      	movs	r3, #0
 80013ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e1a9      	b.n	8001712 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d109      	bne.n	80013e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fae9 	bl	80009a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fef1 	bl	80011cc <LL_ADC_IsDeepPowerDownEnabled>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d004      	beq.n	80013fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fed7 	bl	80011a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff0c 	bl	800121c <LL_ADC_IsInternalRegulatorEnabled>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d115      	bne.n	8001436 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fef0 	bl	80011f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001414:	4b9c      	ldr	r3, [pc, #624]	; (8001688 <HAL_ADC_Init+0x2e4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	099b      	lsrs	r3, r3, #6
 800141a:	4a9c      	ldr	r2, [pc, #624]	; (800168c <HAL_ADC_Init+0x2e8>)
 800141c:	fba2 2303 	umull	r2, r3, r2, r3
 8001420:	099b      	lsrs	r3, r3, #6
 8001422:	3301      	adds	r3, #1
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001428:	e002      	b.n	8001430 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3b01      	subs	r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f9      	bne.n	800142a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff feee 	bl	800121c <LL_ADC_IsInternalRegulatorEnabled>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10d      	bne.n	8001462 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144a:	f043 0210 	orr.w	r2, r3, #16
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001456:	f043 0201 	orr.w	r2, r3, #1
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff62 	bl	8001330 <LL_ADC_REG_IsConversionOngoing>
 800146c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001472:	f003 0310 	and.w	r3, r3, #16
 8001476:	2b00      	cmp	r3, #0
 8001478:	f040 8142 	bne.w	8001700 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2b00      	cmp	r3, #0
 8001480:	f040 813e 	bne.w	8001700 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001488:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800148c:	f043 0202 	orr.w	r2, r3, #2
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fefb 	bl	8001294 <LL_ADC_IsEnabled>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d141      	bne.n	8001528 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ac:	d004      	beq.n	80014b8 <HAL_ADC_Init+0x114>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a77      	ldr	r2, [pc, #476]	; (8001690 <HAL_ADC_Init+0x2ec>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d10f      	bne.n	80014d8 <HAL_ADC_Init+0x134>
 80014b8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80014bc:	f7ff feea 	bl	8001294 <LL_ADC_IsEnabled>
 80014c0:	4604      	mov	r4, r0
 80014c2:	4873      	ldr	r0, [pc, #460]	; (8001690 <HAL_ADC_Init+0x2ec>)
 80014c4:	f7ff fee6 	bl	8001294 <LL_ADC_IsEnabled>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4323      	orrs	r3, r4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bf0c      	ite	eq
 80014d0:	2301      	moveq	r3, #1
 80014d2:	2300      	movne	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	e012      	b.n	80014fe <HAL_ADC_Init+0x15a>
 80014d8:	486e      	ldr	r0, [pc, #440]	; (8001694 <HAL_ADC_Init+0x2f0>)
 80014da:	f7ff fedb 	bl	8001294 <LL_ADC_IsEnabled>
 80014de:	4604      	mov	r4, r0
 80014e0:	486d      	ldr	r0, [pc, #436]	; (8001698 <HAL_ADC_Init+0x2f4>)
 80014e2:	f7ff fed7 	bl	8001294 <LL_ADC_IsEnabled>
 80014e6:	4603      	mov	r3, r0
 80014e8:	431c      	orrs	r4, r3
 80014ea:	486c      	ldr	r0, [pc, #432]	; (800169c <HAL_ADC_Init+0x2f8>)
 80014ec:	f7ff fed2 	bl	8001294 <LL_ADC_IsEnabled>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4323      	orrs	r3, r4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf0c      	ite	eq
 80014f8:	2301      	moveq	r3, #1
 80014fa:	2300      	movne	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d012      	beq.n	8001528 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800150a:	d004      	beq.n	8001516 <HAL_ADC_Init+0x172>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a5f      	ldr	r2, [pc, #380]	; (8001690 <HAL_ADC_Init+0x2ec>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_ADC_Init+0x176>
 8001516:	4a62      	ldr	r2, [pc, #392]	; (80016a0 <HAL_ADC_Init+0x2fc>)
 8001518:	e000      	b.n	800151c <HAL_ADC_Init+0x178>
 800151a:	4a62      	ldr	r2, [pc, #392]	; (80016a4 <HAL_ADC_Init+0x300>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	4619      	mov	r1, r3
 8001522:	4610      	mov	r0, r2
 8001524:	f7ff fcc4 	bl	8000eb0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7f5b      	ldrb	r3, [r3, #29]
 800152c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001532:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001538:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800153e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001546:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001552:	2b01      	cmp	r3, #1
 8001554:	d106      	bne.n	8001564 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	3b01      	subs	r3, #1
 800155c:	045b      	lsls	r3, r3, #17
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001568:	2b00      	cmp	r3, #0
 800156a:	d009      	beq.n	8001580 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	4b48      	ldr	r3, [pc, #288]	; (80016a8 <HAL_ADC_Init+0x304>)
 8001588:	4013      	ands	r3, r2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	69b9      	ldr	r1, [r7, #24]
 8001590:	430b      	orrs	r3, r1
 8001592:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fee5 	bl	800137e <LL_ADC_INJ_IsConversionOngoing>
 80015b4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d17f      	bne.n	80016bc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d17c      	bne.n	80016bc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015c6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ce:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015de:	f023 0302 	bic.w	r3, r3, #2
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	69b9      	ldr	r1, [r7, #24]
 80015e8:	430b      	orrs	r3, r1
 80015ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d017      	beq.n	8001624 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	691a      	ldr	r2, [r3, #16]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001602:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800160c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001610:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6911      	ldr	r1, [r2, #16]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	430b      	orrs	r3, r1
 800161e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001622:	e013      	b.n	800164c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691a      	ldr	r2, [r3, #16]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001632:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001644:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001648:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001652:	2b01      	cmp	r3, #1
 8001654:	d12a      	bne.n	80016ac <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800166c:	4311      	orrs	r1, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001672:	4311      	orrs	r1, r2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001678:	430a      	orrs	r2, r1
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0201 	orr.w	r2, r2, #1
 8001684:	611a      	str	r2, [r3, #16]
 8001686:	e019      	b.n	80016bc <HAL_ADC_Init+0x318>
 8001688:	20000000 	.word	0x20000000
 800168c:	053e2d63 	.word	0x053e2d63
 8001690:	50000100 	.word	0x50000100
 8001694:	50000400 	.word	0x50000400
 8001698:	50000500 	.word	0x50000500
 800169c:	50000600 	.word	0x50000600
 80016a0:	50000300 	.word	0x50000300
 80016a4:	50000700 	.word	0x50000700
 80016a8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0201 	bic.w	r2, r2, #1
 80016ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d10c      	bne.n	80016de <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f023 010f 	bic.w	r1, r3, #15
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	1e5a      	subs	r2, r3, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	631a      	str	r2, [r3, #48]	; 0x30
 80016dc:	e007      	b.n	80016ee <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 020f 	bic.w	r2, r2, #15
 80016ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f2:	f023 0303 	bic.w	r3, r3, #3
 80016f6:	f043 0201 	orr.w	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80016fe:	e007      	b.n	8001710 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	f043 0210 	orr.w	r2, r3, #16
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001710:	7ffb      	ldrb	r3, [r7, #31]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3724      	adds	r7, #36	; 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd90      	pop	{r4, r7, pc}
 800171a:	bf00      	nop

0800171c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800172c:	d004      	beq.n	8001738 <HAL_ADC_Start+0x1c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a67      	ldr	r2, [pc, #412]	; (80018d0 <HAL_ADC_Start+0x1b4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d101      	bne.n	800173c <HAL_ADC_Start+0x20>
 8001738:	4b66      	ldr	r3, [pc, #408]	; (80018d4 <HAL_ADC_Start+0x1b8>)
 800173a:	e000      	b.n	800173e <HAL_ADC_Start+0x22>
 800173c:	4b66      	ldr	r3, [pc, #408]	; (80018d8 <HAL_ADC_Start+0x1bc>)
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fd16 	bl	8001170 <LL_ADC_GetMultimode>
 8001744:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fdf0 	bl	8001330 <LL_ADC_REG_IsConversionOngoing>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	f040 80b4 	bne.w	80018c0 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_ADC_Start+0x4a>
 8001762:	2302      	movs	r3, #2
 8001764:	e0af      	b.n	80018c6 <HAL_ADC_Start+0x1aa>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 fefc 	bl	800256c <ADC_Enable>
 8001774:	4603      	mov	r3, r0
 8001776:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f040 809b 	bne.w	80018b6 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001784:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a4d      	ldr	r2, [pc, #308]	; (80018d0 <HAL_ADC_Start+0x1b4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d009      	beq.n	80017b2 <HAL_ADC_Start+0x96>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a4e      	ldr	r2, [pc, #312]	; (80018dc <HAL_ADC_Start+0x1c0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d002      	beq.n	80017ae <HAL_ADC_Start+0x92>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	e003      	b.n	80017b6 <HAL_ADC_Start+0x9a>
 80017ae:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <HAL_ADC_Start+0x1c4>)
 80017b0:	e001      	b.n	80017b6 <HAL_ADC_Start+0x9a>
 80017b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d002      	beq.n	80017c4 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d105      	bne.n	80017d0 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017dc:	d106      	bne.n	80017ec <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e2:	f023 0206 	bic.w	r2, r3, #6
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	661a      	str	r2, [r3, #96]	; 0x60
 80017ea:	e002      	b.n	80017f2 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	221c      	movs	r2, #28
 80017f8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a32      	ldr	r2, [pc, #200]	; (80018d0 <HAL_ADC_Start+0x1b4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d009      	beq.n	8001820 <HAL_ADC_Start+0x104>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a32      	ldr	r2, [pc, #200]	; (80018dc <HAL_ADC_Start+0x1c0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d002      	beq.n	800181c <HAL_ADC_Start+0x100>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	e003      	b.n	8001824 <HAL_ADC_Start+0x108>
 800181c:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <HAL_ADC_Start+0x1c4>)
 800181e:	e001      	b.n	8001824 <HAL_ADC_Start+0x108>
 8001820:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	4293      	cmp	r3, r2
 800182a:	d008      	beq.n	800183e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d005      	beq.n	800183e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b05      	cmp	r3, #5
 8001836:	d002      	beq.n	800183e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	2b09      	cmp	r3, #9
 800183c:	d114      	bne.n	8001868 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d007      	beq.n	800185c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001850:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001854:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fd3d 	bl	80012e0 <LL_ADC_REG_StartConversion>
 8001866:	e02d      	b.n	80018c4 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a15      	ldr	r2, [pc, #84]	; (80018d0 <HAL_ADC_Start+0x1b4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d009      	beq.n	8001892 <HAL_ADC_Start+0x176>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a16      	ldr	r2, [pc, #88]	; (80018dc <HAL_ADC_Start+0x1c0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d002      	beq.n	800188e <HAL_ADC_Start+0x172>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	e003      	b.n	8001896 <HAL_ADC_Start+0x17a>
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_ADC_Start+0x1c4>)
 8001890:	e001      	b.n	8001896 <HAL_ADC_Start+0x17a>
 8001892:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001896:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00f      	beq.n	80018c4 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80018b4:	e006      	b.n	80018c4 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80018be:	e001      	b.n	80018c4 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018c0:	2302      	movs	r3, #2
 80018c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80018c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	50000100 	.word	0x50000100
 80018d4:	50000300 	.word	0x50000300
 80018d8:	50000700 	.word	0x50000700
 80018dc:	50000500 	.word	0x50000500
 80018e0:	50000400 	.word	0x50000400

080018e4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_Stop+0x16>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e023      	b.n	8001942 <HAL_ADC_Stop+0x5e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001902:	2103      	movs	r1, #3
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 fd75 	bl	80023f4 <ADC_ConversionStop>
 800190a:	4603      	mov	r3, r0
 800190c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d111      	bne.n	8001938 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 febf 	bl	8002698 <ADC_Disable>
 800191a:	4603      	mov	r3, r0
 800191c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d109      	bne.n	8001938 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001928:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	f043 0201 	orr.w	r2, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800195e:	d004      	beq.n	800196a <HAL_ADC_PollForConversion+0x1e>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a77      	ldr	r2, [pc, #476]	; (8001b44 <HAL_ADC_PollForConversion+0x1f8>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_ADC_PollForConversion+0x22>
 800196a:	4b77      	ldr	r3, [pc, #476]	; (8001b48 <HAL_ADC_PollForConversion+0x1fc>)
 800196c:	e000      	b.n	8001970 <HAL_ADC_PollForConversion+0x24>
 800196e:	4b77      	ldr	r3, [pc, #476]	; (8001b4c <HAL_ADC_PollForConversion+0x200>)
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fbfd 	bl	8001170 <LL_ADC_GetMultimode>
 8001976:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b08      	cmp	r3, #8
 800197e:	d102      	bne.n	8001986 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001980:	2308      	movs	r3, #8
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	e037      	b.n	80019f6 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2b05      	cmp	r3, #5
 8001990:	d002      	beq.n	8001998 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2b09      	cmp	r3, #9
 8001996:	d111      	bne.n	80019bc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d007      	beq.n	80019b6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019aa:	f043 0220 	orr.w	r2, r3, #32
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e0c1      	b.n	8001b3a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80019b6:	2304      	movs	r3, #4
 80019b8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80019ba:	e01c      	b.n	80019f6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019c4:	d004      	beq.n	80019d0 <HAL_ADC_PollForConversion+0x84>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a5e      	ldr	r2, [pc, #376]	; (8001b44 <HAL_ADC_PollForConversion+0x1f8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d101      	bne.n	80019d4 <HAL_ADC_PollForConversion+0x88>
 80019d0:	4b5d      	ldr	r3, [pc, #372]	; (8001b48 <HAL_ADC_PollForConversion+0x1fc>)
 80019d2:	e000      	b.n	80019d6 <HAL_ADC_PollForConversion+0x8a>
 80019d4:	4b5d      	ldr	r3, [pc, #372]	; (8001b4c <HAL_ADC_PollForConversion+0x200>)
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fbd8 	bl	800118c <LL_ADC_GetMultiDMATransfer>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e6:	f043 0220 	orr.w	r2, r3, #32
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e0a3      	b.n	8001b3a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80019f2:	2304      	movs	r3, #4
 80019f4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019f6:	f7ff fa03 	bl	8000e00 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019fc:	e021      	b.n	8001a42 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a04:	d01d      	beq.n	8001a42 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a06:	f7ff f9fb 	bl	8000e00 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d302      	bcc.n	8001a1c <HAL_ADC_PollForConversion+0xd0>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d112      	bne.n	8001a42 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10b      	bne.n	8001a42 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2e:	f043 0204 	orr.w	r2, r3, #4
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e07b      	b.n	8001b3a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0d6      	beq.n	80019fe <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff faf7 	bl	8001054 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d01c      	beq.n	8001aa6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7f5b      	ldrb	r3, [r3, #29]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d118      	bne.n	8001aa6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d111      	bne.n	8001aa6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d105      	bne.n	8001aa6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9e:	f043 0201 	orr.w	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a26      	ldr	r2, [pc, #152]	; (8001b44 <HAL_ADC_PollForConversion+0x1f8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d009      	beq.n	8001ac4 <HAL_ADC_PollForConversion+0x178>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a26      	ldr	r2, [pc, #152]	; (8001b50 <HAL_ADC_PollForConversion+0x204>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d002      	beq.n	8001ac0 <HAL_ADC_PollForConversion+0x174>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	e003      	b.n	8001ac8 <HAL_ADC_PollForConversion+0x17c>
 8001ac0:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_ADC_PollForConversion+0x208>)
 8001ac2:	e001      	b.n	8001ac8 <HAL_ADC_PollForConversion+0x17c>
 8001ac4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d008      	beq.n	8001ae2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2b05      	cmp	r3, #5
 8001ada:	d002      	beq.n	8001ae2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	2b09      	cmp	r3, #9
 8001ae0:	d104      	bne.n	8001aec <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	e014      	b.n	8001b16 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <HAL_ADC_PollForConversion+0x1f8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d009      	beq.n	8001b0a <HAL_ADC_PollForConversion+0x1be>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <HAL_ADC_PollForConversion+0x204>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d002      	beq.n	8001b06 <HAL_ADC_PollForConversion+0x1ba>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	e003      	b.n	8001b0e <HAL_ADC_PollForConversion+0x1c2>
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <HAL_ADC_PollForConversion+0x208>)
 8001b08:	e001      	b.n	8001b0e <HAL_ADC_PollForConversion+0x1c2>
 8001b0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b0e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d104      	bne.n	8001b26 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2208      	movs	r2, #8
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	e008      	b.n	8001b38 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d103      	bne.n	8001b38 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	220c      	movs	r2, #12
 8001b36:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	50000100 	.word	0x50000100
 8001b48:	50000300 	.word	0x50000300
 8001b4c:	50000700 	.word	0x50000700
 8001b50:	50000500 	.word	0x50000500
 8001b54:	50000400 	.word	0x50000400

08001b58 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b0b6      	sub	sp, #216	; 0xd8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d102      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x24>
 8001b92:	2302      	movs	r3, #2
 8001b94:	f000 bc13 	b.w	80023be <HAL_ADC_ConfigChannel+0x84a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fbc3 	bl	8001330 <LL_ADC_REG_IsConversionOngoing>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f040 83f3 	bne.w	8002398 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6859      	ldr	r1, [r3, #4]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	f7ff fa5b 	bl	800107a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fbb1 	bl	8001330 <LL_ADC_REG_IsConversionOngoing>
 8001bce:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fbd1 	bl	800137e <LL_ADC_INJ_IsConversionOngoing>
 8001bdc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001be0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f040 81d9 	bne.w	8001f9c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f040 81d4 	bne.w	8001f9c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bfc:	d10f      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2200      	movs	r2, #0
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7ff fa62 	bl	80010d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fa09 	bl	800102e <LL_ADC_SetSamplingTimeCommonConfig>
 8001c1c:	e00e      	b.n	8001c3c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6819      	ldr	r1, [r3, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f7ff fa51 	bl	80010d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff f9f9 	bl	800102e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	695a      	ldr	r2, [r3, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	08db      	lsrs	r3, r3, #3
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d022      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	6919      	ldr	r1, [r3, #16]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c6e:	f7ff f953 	bl	8000f18 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6919      	ldr	r1, [r3, #16]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f7ff f99f 	bl	8000fc2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d102      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x126>
 8001c94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c98:	e000      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x128>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	f7ff f9ab 	bl	8000ff8 <LL_ADC_SetOffsetSaturation>
 8001ca2:	e17b      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f958 	bl	8000f60 <LL_ADC_GetOffsetChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10a      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x15c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff f94d 	bl	8000f60 <LL_ADC_GetOffsetChannel>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	0e9b      	lsrs	r3, r3, #26
 8001cca:	f003 021f 	and.w	r2, r3, #31
 8001cce:	e01e      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x19a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f942 	bl	8000f60 <LL_ADC_GetOffsetChannel>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001cfe:	2320      	movs	r3, #32
 8001d00:	e004      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001d02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x1b2>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	0e9b      	lsrs	r3, r3, #26
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	e018      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x1e4>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001d42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	e004      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001d4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d106      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f911 	bl	8000f8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2101      	movs	r1, #1
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff f8f5 	bl	8000f60 <LL_ADC_GetOffsetChannel>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10a      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x222>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2101      	movs	r1, #1
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f8ea 	bl	8000f60 <LL_ADC_GetOffsetChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	0e9b      	lsrs	r3, r3, #26
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	e01e      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x260>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff f8df 	bl	8000f60 <LL_ADC_GetOffsetChannel>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001db4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001db8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001dbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	e004      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001dc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d105      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x278>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	0e9b      	lsrs	r3, r3, #26
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	e018      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x2aa>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001e00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001e08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001e10:	2320      	movs	r3, #32
 8001e12:	e004      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d106      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2200      	movs	r2, #0
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f8ae 	bl	8000f8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2102      	movs	r1, #2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff f892 	bl	8000f60 <LL_ADC_GetOffsetChannel>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10a      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x2e8>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2102      	movs	r1, #2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff f887 	bl	8000f60 <LL_ADC_GetOffsetChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	0e9b      	lsrs	r3, r3, #26
 8001e56:	f003 021f 	and.w	r2, r3, #31
 8001e5a:	e01e      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x326>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2102      	movs	r1, #2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f87c 	bl	8000f60 <LL_ADC_GetOffsetChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001e7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	e004      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001e8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x33e>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	0e9b      	lsrs	r3, r3, #26
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	e016      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x36c>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001ec4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ec6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001eca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	e004      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001ed6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d106      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2102      	movs	r1, #2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f84d 	bl	8000f8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2103      	movs	r1, #3
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff f831 	bl	8000f60 <LL_ADC_GetOffsetChannel>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10a      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x3aa>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2103      	movs	r1, #3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f826 	bl	8000f60 <LL_ADC_GetOffsetChannel>
 8001f14:	4603      	mov	r3, r0
 8001f16:	0e9b      	lsrs	r3, r3, #26
 8001f18:	f003 021f 	and.w	r2, r3, #31
 8001f1c:	e017      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x3da>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2103      	movs	r1, #3
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff f81b 	bl	8000f60 <LL_ADC_GetOffsetChannel>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f38:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001f40:	2320      	movs	r3, #32
 8001f42:	e003      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d105      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x3f2>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	0e9b      	lsrs	r3, r3, #26
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	e011      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x416>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f76:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001f7e:	2320      	movs	r3, #32
 8001f80:	e003      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d106      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2200      	movs	r2, #0
 8001f94:	2103      	movs	r1, #3
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fff8 	bl	8000f8c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff f977 	bl	8001294 <LL_ADC_IsEnabled>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f040 813d 	bne.w	8002228 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6819      	ldr	r1, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f7ff f8b4 	bl	8001128 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4aa2      	ldr	r2, [pc, #648]	; (8002250 <HAL_ADC_ConfigChannel+0x6dc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	f040 812e 	bne.w	8002228 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10b      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x480>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0e9b      	lsrs	r3, r3, #26
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	2b09      	cmp	r3, #9
 8001fea:	bf94      	ite	ls
 8001fec:	2301      	movls	r3, #1
 8001fee:	2300      	movhi	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	e019      	b.n	8002028 <HAL_ADC_ConfigChannel+0x4b4>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002004:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800200c:	2320      	movs	r3, #32
 800200e:	e003      	b.n	8002018 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002010:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	3301      	adds	r3, #1
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	2b09      	cmp	r3, #9
 8002020:	bf94      	ite	ls
 8002022:	2301      	movls	r3, #1
 8002024:	2300      	movhi	r3, #0
 8002026:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002028:	2b00      	cmp	r3, #0
 800202a:	d079      	beq.n	8002120 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x4d4>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0e9b      	lsrs	r3, r3, #26
 800203e:	3301      	adds	r3, #1
 8002040:	069b      	lsls	r3, r3, #26
 8002042:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002046:	e015      	b.n	8002074 <HAL_ADC_ConfigChannel+0x500>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002058:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800205a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002060:	2320      	movs	r3, #32
 8002062:	e003      	b.n	800206c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002066:	fab3 f383 	clz	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	3301      	adds	r3, #1
 800206e:	069b      	lsls	r3, r3, #26
 8002070:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207c:	2b00      	cmp	r3, #0
 800207e:	d109      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x520>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	0e9b      	lsrs	r3, r3, #26
 8002086:	3301      	adds	r3, #1
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	2101      	movs	r1, #1
 800208e:	fa01 f303 	lsl.w	r3, r1, r3
 8002092:	e017      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x550>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80020a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80020a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80020ac:	2320      	movs	r3, #32
 80020ae:	e003      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80020b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	3301      	adds	r3, #1
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	2101      	movs	r1, #1
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	ea42 0103 	orr.w	r1, r2, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10a      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x576>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	0e9b      	lsrs	r3, r3, #26
 80020da:	3301      	adds	r3, #1
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	051b      	lsls	r3, r3, #20
 80020e8:	e018      	b.n	800211c <HAL_ADC_ConfigChannel+0x5a8>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80020f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80020fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002102:	2320      	movs	r3, #32
 8002104:	e003      	b.n	800210e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002108:	fab3 f383 	clz	r3, r3
 800210c:	b2db      	uxtb	r3, r3
 800210e:	3301      	adds	r3, #1
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800211c:	430b      	orrs	r3, r1
 800211e:	e07e      	b.n	800221e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002128:	2b00      	cmp	r3, #0
 800212a:	d107      	bne.n	800213c <HAL_ADC_ConfigChannel+0x5c8>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0e9b      	lsrs	r3, r3, #26
 8002132:	3301      	adds	r3, #1
 8002134:	069b      	lsls	r3, r3, #26
 8002136:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800213a:	e015      	b.n	8002168 <HAL_ADC_ConfigChannel+0x5f4>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800214e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002154:	2320      	movs	r3, #32
 8002156:	e003      	b.n	8002160 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3301      	adds	r3, #1
 8002162:	069b      	lsls	r3, r3, #26
 8002164:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x614>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	0e9b      	lsrs	r3, r3, #26
 800217a:	3301      	adds	r3, #1
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2101      	movs	r1, #1
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	e017      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x644>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	61fb      	str	r3, [r7, #28]
  return result;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80021a0:	2320      	movs	r3, #32
 80021a2:	e003      	b.n	80021ac <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	3301      	adds	r3, #1
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	2101      	movs	r1, #1
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	ea42 0103 	orr.w	r1, r2, r3
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10d      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x670>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	0e9b      	lsrs	r3, r3, #26
 80021ce:	3301      	adds	r3, #1
 80021d0:	f003 021f 	and.w	r2, r3, #31
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	3b1e      	subs	r3, #30
 80021dc:	051b      	lsls	r3, r3, #20
 80021de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021e2:	e01b      	b.n	800221c <HAL_ADC_ConfigChannel+0x6a8>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	613b      	str	r3, [r7, #16]
  return result;
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80021fc:	2320      	movs	r3, #32
 80021fe:	e003      	b.n	8002208 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3301      	adds	r3, #1
 800220a:	f003 021f 	and.w	r2, r3, #31
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	3b1e      	subs	r3, #30
 8002216:	051b      	lsls	r3, r3, #20
 8002218:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800221c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002222:	4619      	mov	r1, r3
 8002224:	f7fe ff55 	bl	80010d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_ADC_ConfigChannel+0x6e0>)
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80be 	beq.w	80023b2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800223e:	d004      	beq.n	800224a <HAL_ADC_ConfigChannel+0x6d6>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <HAL_ADC_ConfigChannel+0x6e4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d10a      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x6ec>
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <HAL_ADC_ConfigChannel+0x6e8>)
 800224c:	e009      	b.n	8002262 <HAL_ADC_ConfigChannel+0x6ee>
 800224e:	bf00      	nop
 8002250:	407f0000 	.word	0x407f0000
 8002254:	80080000 	.word	0x80080000
 8002258:	50000100 	.word	0x50000100
 800225c:	50000300 	.word	0x50000300
 8002260:	4b59      	ldr	r3, [pc, #356]	; (80023c8 <HAL_ADC_ConfigChannel+0x854>)
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fe4a 	bl	8000efc <LL_ADC_GetCommonPathInternalCh>
 8002268:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a56      	ldr	r2, [pc, #344]	; (80023cc <HAL_ADC_ConfigChannel+0x858>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d004      	beq.n	8002280 <HAL_ADC_ConfigChannel+0x70c>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a55      	ldr	r2, [pc, #340]	; (80023d0 <HAL_ADC_ConfigChannel+0x85c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d13a      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002280:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d134      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002294:	d005      	beq.n	80022a2 <HAL_ADC_ConfigChannel+0x72e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a4e      	ldr	r2, [pc, #312]	; (80023d4 <HAL_ADC_ConfigChannel+0x860>)
 800229c:	4293      	cmp	r3, r2
 800229e:	f040 8085 	bne.w	80023ac <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022aa:	d004      	beq.n	80022b6 <HAL_ADC_ConfigChannel+0x742>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a49      	ldr	r2, [pc, #292]	; (80023d8 <HAL_ADC_ConfigChannel+0x864>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x746>
 80022b6:	4a49      	ldr	r2, [pc, #292]	; (80023dc <HAL_ADC_ConfigChannel+0x868>)
 80022b8:	e000      	b.n	80022bc <HAL_ADC_ConfigChannel+0x748>
 80022ba:	4a43      	ldr	r2, [pc, #268]	; (80023c8 <HAL_ADC_ConfigChannel+0x854>)
 80022bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022c4:	4619      	mov	r1, r3
 80022c6:	4610      	mov	r0, r2
 80022c8:	f7fe fe05 	bl	8000ed6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022cc:	4b44      	ldr	r3, [pc, #272]	; (80023e0 <HAL_ADC_ConfigChannel+0x86c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	099b      	lsrs	r3, r3, #6
 80022d2:	4a44      	ldr	r2, [pc, #272]	; (80023e4 <HAL_ADC_ConfigChannel+0x870>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	099b      	lsrs	r3, r3, #6
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	4613      	mov	r3, r2
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022e6:	e002      	b.n	80022ee <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f9      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022f4:	e05a      	b.n	80023ac <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a3b      	ldr	r2, [pc, #236]	; (80023e8 <HAL_ADC_ConfigChannel+0x874>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d125      	bne.n	800234c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002300:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d11f      	bne.n	800234c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a31      	ldr	r2, [pc, #196]	; (80023d8 <HAL_ADC_ConfigChannel+0x864>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d104      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x7ac>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a34      	ldr	r2, [pc, #208]	; (80023ec <HAL_ADC_ConfigChannel+0x878>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d047      	beq.n	80023b0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002328:	d004      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x7c0>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a2a      	ldr	r2, [pc, #168]	; (80023d8 <HAL_ADC_ConfigChannel+0x864>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d101      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x7c4>
 8002334:	4a29      	ldr	r2, [pc, #164]	; (80023dc <HAL_ADC_ConfigChannel+0x868>)
 8002336:	e000      	b.n	800233a <HAL_ADC_ConfigChannel+0x7c6>
 8002338:	4a23      	ldr	r2, [pc, #140]	; (80023c8 <HAL_ADC_ConfigChannel+0x854>)
 800233a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800233e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002342:	4619      	mov	r1, r3
 8002344:	4610      	mov	r0, r2
 8002346:	f7fe fdc6 	bl	8000ed6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800234a:	e031      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a27      	ldr	r2, [pc, #156]	; (80023f0 <HAL_ADC_ConfigChannel+0x87c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d12d      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002356:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800235a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d127      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a1c      	ldr	r2, [pc, #112]	; (80023d8 <HAL_ADC_ConfigChannel+0x864>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d022      	beq.n	80023b2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002374:	d004      	beq.n	8002380 <HAL_ADC_ConfigChannel+0x80c>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a17      	ldr	r2, [pc, #92]	; (80023d8 <HAL_ADC_ConfigChannel+0x864>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d101      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x810>
 8002380:	4a16      	ldr	r2, [pc, #88]	; (80023dc <HAL_ADC_ConfigChannel+0x868>)
 8002382:	e000      	b.n	8002386 <HAL_ADC_ConfigChannel+0x812>
 8002384:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <HAL_ADC_ConfigChannel+0x854>)
 8002386:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800238a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800238e:	4619      	mov	r1, r3
 8002390:	4610      	mov	r0, r2
 8002392:	f7fe fda0 	bl	8000ed6 <LL_ADC_SetCommonPathInternalCh>
 8002396:	e00c      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239c:	f043 0220 	orr.w	r2, r3, #32
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80023aa:	e002      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023ac:	bf00      	nop
 80023ae:	e000      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80023ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80023be:	4618      	mov	r0, r3
 80023c0:	37d8      	adds	r7, #216	; 0xd8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	50000700 	.word	0x50000700
 80023cc:	c3210000 	.word	0xc3210000
 80023d0:	90c00010 	.word	0x90c00010
 80023d4:	50000600 	.word	0x50000600
 80023d8:	50000100 	.word	0x50000100
 80023dc:	50000300 	.word	0x50000300
 80023e0:	20000000 	.word	0x20000000
 80023e4:	053e2d63 	.word	0x053e2d63
 80023e8:	c7520000 	.word	0xc7520000
 80023ec:	50000500 	.word	0x50000500
 80023f0:	cb840000 	.word	0xcb840000

080023f4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe ff90 	bl	8001330 <LL_ADC_REG_IsConversionOngoing>
 8002410:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe ffb1 	bl	800137e <LL_ADC_INJ_IsConversionOngoing>
 800241c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d103      	bne.n	800242c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 8098 	beq.w	800255c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d02a      	beq.n	8002490 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7f5b      	ldrb	r3, [r3, #29]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d126      	bne.n	8002490 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7f1b      	ldrb	r3, [r3, #28]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d122      	bne.n	8002490 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800244a:	2301      	movs	r3, #1
 800244c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800244e:	e014      	b.n	800247a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	4a45      	ldr	r2, [pc, #276]	; (8002568 <ADC_ConversionStop+0x174>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d90d      	bls.n	8002474 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245c:	f043 0210 	orr.w	r2, r3, #16
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002468:	f043 0201 	orr.w	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e074      	b.n	800255e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	3301      	adds	r3, #1
 8002478:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002484:	2b40      	cmp	r3, #64	; 0x40
 8002486:	d1e3      	bne.n	8002450 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2240      	movs	r2, #64	; 0x40
 800248e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d014      	beq.n	80024c0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe ff48 	bl	8001330 <LL_ADC_REG_IsConversionOngoing>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe ff05 	bl	80012ba <LL_ADC_IsDisableOngoing>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d104      	bne.n	80024c0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe ff24 	bl	8001308 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d014      	beq.n	80024f0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe ff57 	bl	800137e <LL_ADC_INJ_IsConversionOngoing>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00c      	beq.n	80024f0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe feed 	bl	80012ba <LL_ADC_IsDisableOngoing>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d104      	bne.n	80024f0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe ff33 	bl	8001356 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d005      	beq.n	8002502 <ADC_ConversionStop+0x10e>
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d105      	bne.n	8002508 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80024fc:	230c      	movs	r3, #12
 80024fe:	617b      	str	r3, [r7, #20]
        break;
 8002500:	e005      	b.n	800250e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002502:	2308      	movs	r3, #8
 8002504:	617b      	str	r3, [r7, #20]
        break;
 8002506:	e002      	b.n	800250e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002508:	2304      	movs	r3, #4
 800250a:	617b      	str	r3, [r7, #20]
        break;
 800250c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800250e:	f7fe fc77 	bl	8000e00 <HAL_GetTick>
 8002512:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002514:	e01b      	b.n	800254e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002516:	f7fe fc73 	bl	8000e00 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b05      	cmp	r3, #5
 8002522:	d914      	bls.n	800254e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	4013      	ands	r3, r2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00d      	beq.n	800254e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002536:	f043 0210 	orr.w	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002542:	f043 0201 	orr.w	r2, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e007      	b.n	800255e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1dc      	bne.n	8002516 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3720      	adds	r7, #32
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	a33fffff 	.word	0xa33fffff

0800256c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe fe89 	bl	8001294 <LL_ADC_IsEnabled>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d176      	bne.n	8002676 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <ADC_Enable+0x114>)
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00d      	beq.n	80025b2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259a:	f043 0210 	orr.w	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e062      	b.n	8002678 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fe44 	bl	8001244 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025c4:	d004      	beq.n	80025d0 <ADC_Enable+0x64>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a2e      	ldr	r2, [pc, #184]	; (8002684 <ADC_Enable+0x118>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d101      	bne.n	80025d4 <ADC_Enable+0x68>
 80025d0:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <ADC_Enable+0x11c>)
 80025d2:	e000      	b.n	80025d6 <ADC_Enable+0x6a>
 80025d4:	4b2d      	ldr	r3, [pc, #180]	; (800268c <ADC_Enable+0x120>)
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fc90 	bl	8000efc <LL_ADC_GetCommonPathInternalCh>
 80025dc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80025de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d013      	beq.n	800260e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025e6:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <ADC_Enable+0x124>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	099b      	lsrs	r3, r3, #6
 80025ec:	4a29      	ldr	r2, [pc, #164]	; (8002694 <ADC_Enable+0x128>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	099b      	lsrs	r3, r3, #6
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	4613      	mov	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002600:	e002      	b.n	8002608 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	3b01      	subs	r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f9      	bne.n	8002602 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800260e:	f7fe fbf7 	bl	8000e00 <HAL_GetTick>
 8002612:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002614:	e028      	b.n	8002668 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fe3a 	bl	8001294 <LL_ADC_IsEnabled>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d104      	bne.n	8002630 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe fe0a 	bl	8001244 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002630:	f7fe fbe6 	bl	8000e00 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d914      	bls.n	8002668 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b01      	cmp	r3, #1
 800264a:	d00d      	beq.n	8002668 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	f043 0210 	orr.w	r2, r3, #16
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e007      	b.n	8002678 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b01      	cmp	r3, #1
 8002674:	d1cf      	bne.n	8002616 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	8000003f 	.word	0x8000003f
 8002684:	50000100 	.word	0x50000100
 8002688:	50000300 	.word	0x50000300
 800268c:	50000700 	.word	0x50000700
 8002690:	20000000 	.word	0x20000000
 8002694:	053e2d63 	.word	0x053e2d63

08002698 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe fe08 	bl	80012ba <LL_ADC_IsDisableOngoing>
 80026aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe fdef 	bl	8001294 <LL_ADC_IsEnabled>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d047      	beq.n	800274c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d144      	bne.n	800274c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 030d 	and.w	r3, r3, #13
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d10c      	bne.n	80026ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fdc9 	bl	800126c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2203      	movs	r2, #3
 80026e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026e2:	f7fe fb8d 	bl	8000e00 <HAL_GetTick>
 80026e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80026e8:	e029      	b.n	800273e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ee:	f043 0210 	orr.w	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e023      	b.n	800274e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002706:	f7fe fb7b 	bl	8000e00 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d914      	bls.n	800273e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00d      	beq.n	800273e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002726:	f043 0210 	orr.w	r2, r3, #16
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e007      	b.n	800274e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1dc      	bne.n	8002706 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <LL_ADC_IsEnabled>:
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <LL_ADC_IsEnabled+0x18>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <LL_ADC_IsEnabled+0x1a>
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_StartCalibration>:
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800278e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002798:	4313      	orrs	r3, r2
 800279a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	609a      	str	r2, [r3, #8]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <LL_ADC_IsCalibrationOnGoing>:
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027c2:	d101      	bne.n	80027c8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <LL_ADC_IsCalibrationOnGoing+0x1c>
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d101      	bne.n	80027ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_ADCEx_Calibration_Start+0x1c>
 8002814:	2302      	movs	r3, #2
 8002816:	e04d      	b.n	80028b4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ff39 	bl	8002698 <ADC_Disable>
 8002826:	4603      	mov	r3, r0
 8002828:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d136      	bne.n	800289e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002838:	f023 0302 	bic.w	r3, r3, #2
 800283c:	f043 0202 	orr.w	r2, r3, #2
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6839      	ldr	r1, [r7, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff96 	bl	800277c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002850:	e014      	b.n	800287c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3301      	adds	r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4a18      	ldr	r2, [pc, #96]	; (80028bc <HAL_ADCEx_Calibration_Start+0xc0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d90d      	bls.n	800287c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	f023 0312 	bic.w	r3, r3, #18
 8002868:	f043 0210 	orr.w	r2, r3, #16
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e01b      	b.n	80028b4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff94 	bl	80027ae <LL_ADC_IsCalibrationOnGoing>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e2      	bne.n	8002852 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002890:	f023 0303 	bic.w	r3, r3, #3
 8002894:	f043 0201 	orr.w	r2, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	65da      	str	r2, [r3, #92]	; 0x5c
 800289c:	e005      	b.n	80028aa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	f043 0210 	orr.w	r2, r3, #16
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	0004de01 	.word	0x0004de01

080028c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b0a1      	sub	sp, #132	; 0x84
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028da:	2302      	movs	r3, #2
 80028dc:	e0e7      	b.n	8002aae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80028e6:	2300      	movs	r3, #0
 80028e8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80028ea:	2300      	movs	r3, #0
 80028ec:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028f6:	d102      	bne.n	80028fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028f8:	4b6f      	ldr	r3, [pc, #444]	; (8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	e009      	b.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6e      	ldr	r2, [pc, #440]	; (8002abc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d102      	bne.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002908:	4b6d      	ldr	r3, [pc, #436]	; (8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	e001      	b.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10b      	bne.n	8002930 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	f043 0220 	orr.w	r2, r3, #32
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0be      	b.n	8002aae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ff4f 	bl	80027d6 <LL_ADC_REG_IsConversionOngoing>
 8002938:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff49 	bl	80027d6 <LL_ADC_REG_IsConversionOngoing>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	f040 80a0 	bne.w	8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800294c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800294e:	2b00      	cmp	r3, #0
 8002950:	f040 809c 	bne.w	8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800295c:	d004      	beq.n	8002968 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a55      	ldr	r2, [pc, #340]	; (8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d101      	bne.n	800296c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002968:	4b56      	ldr	r3, [pc, #344]	; (8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800296a:	e000      	b.n	800296e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800296c:	4b56      	ldr	r3, [pc, #344]	; (8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800296e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d04b      	beq.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800298a:	035b      	lsls	r3, r3, #13
 800298c:	430b      	orrs	r3, r1
 800298e:	431a      	orrs	r2, r3
 8002990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002992:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800299c:	d004      	beq.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a45      	ldr	r2, [pc, #276]	; (8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d10f      	bne.n	80029c8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80029a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029ac:	f7ff fed3 	bl	8002756 <LL_ADC_IsEnabled>
 80029b0:	4604      	mov	r4, r0
 80029b2:	4841      	ldr	r0, [pc, #260]	; (8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029b4:	f7ff fecf 	bl	8002756 <LL_ADC_IsEnabled>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4323      	orrs	r3, r4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	e012      	b.n	80029ee <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80029c8:	483c      	ldr	r0, [pc, #240]	; (8002abc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029ca:	f7ff fec4 	bl	8002756 <LL_ADC_IsEnabled>
 80029ce:	4604      	mov	r4, r0
 80029d0:	483b      	ldr	r0, [pc, #236]	; (8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029d2:	f7ff fec0 	bl	8002756 <LL_ADC_IsEnabled>
 80029d6:	4603      	mov	r3, r0
 80029d8:	431c      	orrs	r4, r3
 80029da:	483c      	ldr	r0, [pc, #240]	; (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80029dc:	f7ff febb 	bl	8002756 <LL_ADC_IsEnabled>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4323      	orrs	r3, r4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d056      	beq.n	8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029fa:	f023 030f 	bic.w	r3, r3, #15
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	6811      	ldr	r1, [r2, #0]
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	6892      	ldr	r2, [r2, #8]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a0e:	e047      	b.n	8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a1a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a24:	d004      	beq.n	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a23      	ldr	r2, [pc, #140]	; (8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d10f      	bne.n	8002a50 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002a30:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a34:	f7ff fe8f 	bl	8002756 <LL_ADC_IsEnabled>
 8002a38:	4604      	mov	r4, r0
 8002a3a:	481f      	ldr	r0, [pc, #124]	; (8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a3c:	f7ff fe8b 	bl	8002756 <LL_ADC_IsEnabled>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4323      	orrs	r3, r4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e012      	b.n	8002a76 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002a50:	481a      	ldr	r0, [pc, #104]	; (8002abc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a52:	f7ff fe80 	bl	8002756 <LL_ADC_IsEnabled>
 8002a56:	4604      	mov	r4, r0
 8002a58:	4819      	ldr	r0, [pc, #100]	; (8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a5a:	f7ff fe7c 	bl	8002756 <LL_ADC_IsEnabled>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	431c      	orrs	r4, r3
 8002a62:	481a      	ldr	r0, [pc, #104]	; (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a64:	f7ff fe77 	bl	8002756 <LL_ADC_IsEnabled>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4323      	orrs	r3, r4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d012      	beq.n	8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a82:	f023 030f 	bic.w	r3, r3, #15
 8002a86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a88:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a8a:	e009      	b.n	8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	f043 0220 	orr.w	r2, r3, #32
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002a9e:	e000      	b.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002aa0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002aaa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3784      	adds	r7, #132	; 0x84
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd90      	pop	{r4, r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	50000100 	.word	0x50000100
 8002abc:	50000400 	.word	0x50000400
 8002ac0:	50000500 	.word	0x50000500
 8002ac4:	50000300 	.word	0x50000300
 8002ac8:	50000700 	.word	0x50000700
 8002acc:	50000600 	.word	0x50000600

08002ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aec:	4013      	ands	r3, r2
 8002aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b02:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <__NVIC_SetPriorityGrouping+0x44>)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	60d3      	str	r3, [r2, #12]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <__NVIC_GetPriorityGrouping+0x18>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	0a1b      	lsrs	r3, r3, #8
 8002b22:	f003 0307 	and.w	r3, r3, #7
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	db0b      	blt.n	8002b5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	f003 021f 	and.w	r2, r3, #31
 8002b4c:	4907      	ldr	r1, [pc, #28]	; (8002b6c <__NVIC_EnableIRQ+0x38>)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2001      	movs	r0, #1
 8002b56:	fa00 f202 	lsl.w	r2, r0, r2
 8002b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000e100 	.word	0xe000e100

08002b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	6039      	str	r1, [r7, #0]
 8002b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	db0a      	blt.n	8002b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	490c      	ldr	r1, [pc, #48]	; (8002bbc <__NVIC_SetPriority+0x4c>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	0112      	lsls	r2, r2, #4
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	440b      	add	r3, r1
 8002b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b98:	e00a      	b.n	8002bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	4908      	ldr	r1, [pc, #32]	; (8002bc0 <__NVIC_SetPriority+0x50>)
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	3b04      	subs	r3, #4
 8002ba8:	0112      	lsls	r2, r2, #4
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	440b      	add	r3, r1
 8002bae:	761a      	strb	r2, [r3, #24]
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000e100 	.word	0xe000e100
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b089      	sub	sp, #36	; 0x24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f1c3 0307 	rsb	r3, r3, #7
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	bf28      	it	cs
 8002be2:	2304      	movcs	r3, #4
 8002be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3304      	adds	r3, #4
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d902      	bls.n	8002bf4 <NVIC_EncodePriority+0x30>
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3b03      	subs	r3, #3
 8002bf2:	e000      	b.n	8002bf6 <NVIC_EncodePriority+0x32>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43da      	mvns	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	401a      	ands	r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	43d9      	mvns	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1c:	4313      	orrs	r3, r2
         );
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3724      	adds	r7, #36	; 0x24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c3c:	d301      	bcc.n	8002c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e00f      	b.n	8002c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c42:	4a0a      	ldr	r2, [pc, #40]	; (8002c6c <SysTick_Config+0x40>)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c4a:	210f      	movs	r1, #15
 8002c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c50:	f7ff ff8e 	bl	8002b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <SysTick_Config+0x40>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c5a:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <SysTick_Config+0x40>)
 8002c5c:	2207      	movs	r2, #7
 8002c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	e000e010 	.word	0xe000e010

08002c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff ff29 	bl	8002ad0 <__NVIC_SetPriorityGrouping>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c94:	f7ff ff40 	bl	8002b18 <__NVIC_GetPriorityGrouping>
 8002c98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	6978      	ldr	r0, [r7, #20]
 8002ca0:	f7ff ff90 	bl	8002bc4 <NVIC_EncodePriority>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff5f 	bl	8002b70 <__NVIC_SetPriority>
}
 8002cb2:	bf00      	nop
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff33 	bl	8002b34 <__NVIC_EnableIRQ>
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff ffa4 	bl	8002c2c <SysTick_Config>
 8002ce4:	4603      	mov	r3, r0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002cfe:	e15a      	b.n	8002fb6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	2101      	movs	r1, #1
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 814c 	beq.w	8002fb0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d005      	beq.n	8002d30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d130      	bne.n	8002d92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d66:	2201      	movs	r2, #1
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	f003 0201 	and.w	r2, r3, #1
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d017      	beq.n	8002dce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	2203      	movs	r2, #3
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d123      	bne.n	8002e22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	08da      	lsrs	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3208      	adds	r2, #8
 8002de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	220f      	movs	r2, #15
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	08da      	lsrs	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3208      	adds	r2, #8
 8002e1c:	6939      	ldr	r1, [r7, #16]
 8002e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0203 	and.w	r2, r3, #3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80a6 	beq.w	8002fb0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e64:	4b5b      	ldr	r3, [pc, #364]	; (8002fd4 <HAL_GPIO_Init+0x2e4>)
 8002e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e68:	4a5a      	ldr	r2, [pc, #360]	; (8002fd4 <HAL_GPIO_Init+0x2e4>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6613      	str	r3, [r2, #96]	; 0x60
 8002e70:	4b58      	ldr	r3, [pc, #352]	; (8002fd4 <HAL_GPIO_Init+0x2e4>)
 8002e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e7c:	4a56      	ldr	r2, [pc, #344]	; (8002fd8 <HAL_GPIO_Init+0x2e8>)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	3302      	adds	r3, #2
 8002e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	220f      	movs	r2, #15
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ea6:	d01f      	beq.n	8002ee8 <HAL_GPIO_Init+0x1f8>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a4c      	ldr	r2, [pc, #304]	; (8002fdc <HAL_GPIO_Init+0x2ec>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d019      	beq.n	8002ee4 <HAL_GPIO_Init+0x1f4>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a4b      	ldr	r2, [pc, #300]	; (8002fe0 <HAL_GPIO_Init+0x2f0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d013      	beq.n	8002ee0 <HAL_GPIO_Init+0x1f0>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a4a      	ldr	r2, [pc, #296]	; (8002fe4 <HAL_GPIO_Init+0x2f4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00d      	beq.n	8002edc <HAL_GPIO_Init+0x1ec>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a49      	ldr	r2, [pc, #292]	; (8002fe8 <HAL_GPIO_Init+0x2f8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <HAL_GPIO_Init+0x1e8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a48      	ldr	r2, [pc, #288]	; (8002fec <HAL_GPIO_Init+0x2fc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d101      	bne.n	8002ed4 <HAL_GPIO_Init+0x1e4>
 8002ed0:	2305      	movs	r3, #5
 8002ed2:	e00a      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ed4:	2306      	movs	r3, #6
 8002ed6:	e008      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ed8:	2304      	movs	r3, #4
 8002eda:	e006      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002edc:	2303      	movs	r3, #3
 8002ede:	e004      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e002      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	f002 0203 	and.w	r2, r2, #3
 8002ef0:	0092      	lsls	r2, r2, #2
 8002ef2:	4093      	lsls	r3, r2
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002efa:	4937      	ldr	r1, [pc, #220]	; (8002fd8 <HAL_GPIO_Init+0x2e8>)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	089b      	lsrs	r3, r3, #2
 8002f00:	3302      	adds	r3, #2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f08:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f2c:	4a30      	ldr	r2, [pc, #192]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f32:	4b2f      	ldr	r3, [pc, #188]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f56:	4a26      	ldr	r2, [pc, #152]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002f5c:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f80:	4a1b      	ldr	r2, [pc, #108]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f86:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4013      	ands	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002faa:	4a11      	ldr	r2, [pc, #68]	; (8002ff0 <HAL_GPIO_Init+0x300>)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f47f ae9d 	bne.w	8002d00 <HAL_GPIO_Init+0x10>
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	48000400 	.word	0x48000400
 8002fe0:	48000800 	.word	0x48000800
 8002fe4:	48000c00 	.word	0x48000c00
 8002fe8:	48001000 	.word	0x48001000
 8002fec:	48001400 	.word	0x48001400
 8002ff0:	40010400 	.word	0x40010400

08002ff4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d141      	bne.n	8003086 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003002:	4b4b      	ldr	r3, [pc, #300]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300e:	d131      	bne.n	8003074 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003010:	4b47      	ldr	r3, [pc, #284]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003016:	4a46      	ldr	r2, [pc, #280]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800301c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003020:	4b43      	ldr	r3, [pc, #268]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003028:	4a41      	ldr	r2, [pc, #260]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800302e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003030:	4b40      	ldr	r3, [pc, #256]	; (8003134 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2232      	movs	r2, #50	; 0x32
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	4a3f      	ldr	r2, [pc, #252]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	0c9b      	lsrs	r3, r3, #18
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003046:	e002      	b.n	800304e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3b01      	subs	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800304e:	4b38      	ldr	r3, [pc, #224]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305a:	d102      	bne.n	8003062 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f2      	bne.n	8003048 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003062:	4b33      	ldr	r3, [pc, #204]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306e:	d158      	bne.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e057      	b.n	8003124 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003074:	4b2e      	ldr	r3, [pc, #184]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800307a:	4a2d      	ldr	r2, [pc, #180]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003084:	e04d      	b.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800308c:	d141      	bne.n	8003112 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800308e:	4b28      	ldr	r3, [pc, #160]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309a:	d131      	bne.n	8003100 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800309c:	4b24      	ldr	r3, [pc, #144]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030a2:	4a23      	ldr	r2, [pc, #140]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030ac:	4b20      	ldr	r3, [pc, #128]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030b4:	4a1e      	ldr	r2, [pc, #120]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030bc:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2232      	movs	r2, #50	; 0x32
 80030c2:	fb02 f303 	mul.w	r3, r2, r3
 80030c6:	4a1c      	ldr	r2, [pc, #112]	; (8003138 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	0c9b      	lsrs	r3, r3, #18
 80030ce:	3301      	adds	r3, #1
 80030d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030d2:	e002      	b.n	80030da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030da:	4b15      	ldr	r3, [pc, #84]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e6:	d102      	bne.n	80030ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f2      	bne.n	80030d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fa:	d112      	bne.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e011      	b.n	8003124 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003106:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003110:	e007      	b.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003112:	4b07      	ldr	r3, [pc, #28]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800311a:	4a05      	ldr	r2, [pc, #20]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003120:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40007000 	.word	0x40007000
 8003134:	20000000 	.word	0x20000000
 8003138:	431bde83 	.word	0x431bde83

0800313c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e2fe      	b.n	800374c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d075      	beq.n	8003246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800315a:	4b97      	ldr	r3, [pc, #604]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003164:	4b94      	ldr	r3, [pc, #592]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	2b0c      	cmp	r3, #12
 8003172:	d102      	bne.n	800317a <HAL_RCC_OscConfig+0x3e>
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2b03      	cmp	r3, #3
 8003178:	d002      	beq.n	8003180 <HAL_RCC_OscConfig+0x44>
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b08      	cmp	r3, #8
 800317e:	d10b      	bne.n	8003198 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	4b8d      	ldr	r3, [pc, #564]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d05b      	beq.n	8003244 <HAL_RCC_OscConfig+0x108>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d157      	bne.n	8003244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e2d9      	b.n	800374c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a0:	d106      	bne.n	80031b0 <HAL_RCC_OscConfig+0x74>
 80031a2:	4b85      	ldr	r3, [pc, #532]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a84      	ldr	r2, [pc, #528]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 80031a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	e01d      	b.n	80031ec <HAL_RCC_OscConfig+0xb0>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x98>
 80031ba:	4b7f      	ldr	r3, [pc, #508]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a7e      	ldr	r2, [pc, #504]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 80031c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	4b7c      	ldr	r3, [pc, #496]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a7b      	ldr	r2, [pc, #492]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0xb0>
 80031d4:	4b78      	ldr	r3, [pc, #480]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a77      	ldr	r2, [pc, #476]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 80031da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	4b75      	ldr	r3, [pc, #468]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a74      	ldr	r2, [pc, #464]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 80031e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d013      	beq.n	800321c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7fd fe04 	bl	8000e00 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031fc:	f7fd fe00 	bl	8000e00 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	; 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e29e      	b.n	800374c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320e:	4b6a      	ldr	r3, [pc, #424]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0xc0>
 800321a:	e014      	b.n	8003246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fd fdf0 	bl	8000e00 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003224:	f7fd fdec 	bl	8000e00 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	; 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e28a      	b.n	800374c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003236:	4b60      	ldr	r3, [pc, #384]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0xe8>
 8003242:	e000      	b.n	8003246 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d075      	beq.n	800333e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003252:	4b59      	ldr	r3, [pc, #356]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800325c:	4b56      	ldr	r3, [pc, #344]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b0c      	cmp	r3, #12
 800326a:	d102      	bne.n	8003272 <HAL_RCC_OscConfig+0x136>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d002      	beq.n	8003278 <HAL_RCC_OscConfig+0x13c>
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d11f      	bne.n	80032b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003278:	4b4f      	ldr	r3, [pc, #316]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_RCC_OscConfig+0x154>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e25d      	b.n	800374c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003290:	4b49      	ldr	r3, [pc, #292]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	4946      	ldr	r1, [pc, #280]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032a4:	4b45      	ldr	r3, [pc, #276]	; (80033bc <HAL_RCC_OscConfig+0x280>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fd fd5d 	bl	8000d68 <HAL_InitTick>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d043      	beq.n	800333c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e249      	b.n	800374c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d023      	beq.n	8003308 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c0:	4b3d      	ldr	r3, [pc, #244]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a3c      	ldr	r2, [pc, #240]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 80032c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fd fd98 	bl	8000e00 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d4:	f7fd fd94 	bl	8000e00 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e232      	b.n	800374c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e6:	4b34      	ldr	r3, [pc, #208]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f2:	4b31      	ldr	r3, [pc, #196]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	061b      	lsls	r3, r3, #24
 8003300:	492d      	ldr	r1, [pc, #180]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 8003302:	4313      	orrs	r3, r2
 8003304:	604b      	str	r3, [r1, #4]
 8003306:	e01a      	b.n	800333e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003308:	4b2b      	ldr	r3, [pc, #172]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a2a      	ldr	r2, [pc, #168]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 800330e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fd fd74 	bl	8000e00 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331c:	f7fd fd70 	bl	8000e00 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e20e      	b.n	800374c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800332e:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x1e0>
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800333c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d041      	beq.n	80033ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d01c      	beq.n	800338c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003352:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 8003354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003358:	4a17      	ldr	r2, [pc, #92]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003362:	f7fd fd4d 	bl	8000e00 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800336a:	f7fd fd49 	bl	8000e00 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e1e7      	b.n	800374c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800337c:	4b0e      	ldr	r3, [pc, #56]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 800337e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0ef      	beq.n	800336a <HAL_RCC_OscConfig+0x22e>
 800338a:	e020      	b.n	80033ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 800338e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003392:	4a09      	ldr	r2, [pc, #36]	; (80033b8 <HAL_RCC_OscConfig+0x27c>)
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339c:	f7fd fd30 	bl	8000e00 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033a2:	e00d      	b.n	80033c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a4:	f7fd fd2c 	bl	8000e00 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d906      	bls.n	80033c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e1ca      	b.n	800374c <HAL_RCC_OscConfig+0x610>
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c0:	4b8c      	ldr	r3, [pc, #560]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 80033c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1ea      	bne.n	80033a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 80a6 	beq.w	8003528 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033dc:	2300      	movs	r3, #0
 80033de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033e0:	4b84      	ldr	r3, [pc, #528]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 80033e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_OscConfig+0x2b4>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <HAL_RCC_OscConfig+0x2b6>
 80033f0:	2300      	movs	r3, #0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00d      	beq.n	8003412 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f6:	4b7f      	ldr	r3, [pc, #508]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 80033f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fa:	4a7e      	ldr	r2, [pc, #504]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 80033fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003400:	6593      	str	r3, [r2, #88]	; 0x58
 8003402:	4b7c      	ldr	r3, [pc, #496]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800340e:	2301      	movs	r3, #1
 8003410:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003412:	4b79      	ldr	r3, [pc, #484]	; (80035f8 <HAL_RCC_OscConfig+0x4bc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d118      	bne.n	8003450 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800341e:	4b76      	ldr	r3, [pc, #472]	; (80035f8 <HAL_RCC_OscConfig+0x4bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a75      	ldr	r2, [pc, #468]	; (80035f8 <HAL_RCC_OscConfig+0x4bc>)
 8003424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342a:	f7fd fce9 	bl	8000e00 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003432:	f7fd fce5 	bl	8000e00 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e183      	b.n	800374c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003444:	4b6c      	ldr	r3, [pc, #432]	; (80035f8 <HAL_RCC_OscConfig+0x4bc>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d108      	bne.n	800346a <HAL_RCC_OscConfig+0x32e>
 8003458:	4b66      	ldr	r3, [pc, #408]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	4a65      	ldr	r2, [pc, #404]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003468:	e024      	b.n	80034b4 <HAL_RCC_OscConfig+0x378>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b05      	cmp	r3, #5
 8003470:	d110      	bne.n	8003494 <HAL_RCC_OscConfig+0x358>
 8003472:	4b60      	ldr	r3, [pc, #384]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003478:	4a5e      	ldr	r2, [pc, #376]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 800347a:	f043 0304 	orr.w	r3, r3, #4
 800347e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003482:	4b5c      	ldr	r3, [pc, #368]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	4a5a      	ldr	r2, [pc, #360]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003492:	e00f      	b.n	80034b4 <HAL_RCC_OscConfig+0x378>
 8003494:	4b57      	ldr	r3, [pc, #348]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349a:	4a56      	ldr	r2, [pc, #344]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034a4:	4b53      	ldr	r3, [pc, #332]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	4a52      	ldr	r2, [pc, #328]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 80034ac:	f023 0304 	bic.w	r3, r3, #4
 80034b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d016      	beq.n	80034ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7fd fca0 	bl	8000e00 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c2:	e00a      	b.n	80034da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c4:	f7fd fc9c 	bl	8000e00 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e138      	b.n	800374c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034da:	4b46      	ldr	r3, [pc, #280]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0ed      	beq.n	80034c4 <HAL_RCC_OscConfig+0x388>
 80034e8:	e015      	b.n	8003516 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ea:	f7fd fc89 	bl	8000e00 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034f0:	e00a      	b.n	8003508 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f2:	f7fd fc85 	bl	8000e00 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003500:	4293      	cmp	r3, r2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e121      	b.n	800374c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003508:	4b3a      	ldr	r3, [pc, #232]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1ed      	bne.n	80034f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003516:	7ffb      	ldrb	r3, [r7, #31]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d105      	bne.n	8003528 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351c:	4b35      	ldr	r3, [pc, #212]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 800351e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003520:	4a34      	ldr	r2, [pc, #208]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 8003522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003526:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d03c      	beq.n	80035ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01c      	beq.n	8003576 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800353c:	4b2d      	ldr	r3, [pc, #180]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 800353e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003542:	4a2c      	ldr	r2, [pc, #176]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354c:	f7fd fc58 	bl	8000e00 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003554:	f7fd fc54 	bl	8000e00 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e0f2      	b.n	800374c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003566:	4b23      	ldr	r3, [pc, #140]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 8003568:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ef      	beq.n	8003554 <HAL_RCC_OscConfig+0x418>
 8003574:	e01b      	b.n	80035ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003576:	4b1f      	ldr	r3, [pc, #124]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 8003578:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800357c:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 800357e:	f023 0301 	bic.w	r3, r3, #1
 8003582:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003586:	f7fd fc3b 	bl	8000e00 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800358e:	f7fd fc37 	bl	8000e00 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e0d5      	b.n	800374c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035a0:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 80035a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1ef      	bne.n	800358e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 80c9 	beq.w	800374a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035b8:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 030c 	and.w	r3, r3, #12
 80035c0:	2b0c      	cmp	r3, #12
 80035c2:	f000 8083 	beq.w	80036cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d15e      	bne.n	800368c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <HAL_RCC_OscConfig+0x4b8>)
 80035d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035da:	f7fd fc11 	bl	8000e00 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e0:	e00c      	b.n	80035fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fd fc0d 	bl	8000e00 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d905      	bls.n	80035fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e0ab      	b.n	800374c <HAL_RCC_OscConfig+0x610>
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fc:	4b55      	ldr	r3, [pc, #340]	; (8003754 <HAL_RCC_OscConfig+0x618>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1ec      	bne.n	80035e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003608:	4b52      	ldr	r3, [pc, #328]	; (8003754 <HAL_RCC_OscConfig+0x618>)
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	4b52      	ldr	r3, [pc, #328]	; (8003758 <HAL_RCC_OscConfig+0x61c>)
 800360e:	4013      	ands	r3, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6a11      	ldr	r1, [r2, #32]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003618:	3a01      	subs	r2, #1
 800361a:	0112      	lsls	r2, r2, #4
 800361c:	4311      	orrs	r1, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003622:	0212      	lsls	r2, r2, #8
 8003624:	4311      	orrs	r1, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800362a:	0852      	lsrs	r2, r2, #1
 800362c:	3a01      	subs	r2, #1
 800362e:	0552      	lsls	r2, r2, #21
 8003630:	4311      	orrs	r1, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003636:	0852      	lsrs	r2, r2, #1
 8003638:	3a01      	subs	r2, #1
 800363a:	0652      	lsls	r2, r2, #25
 800363c:	4311      	orrs	r1, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003642:	06d2      	lsls	r2, r2, #27
 8003644:	430a      	orrs	r2, r1
 8003646:	4943      	ldr	r1, [pc, #268]	; (8003754 <HAL_RCC_OscConfig+0x618>)
 8003648:	4313      	orrs	r3, r2
 800364a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800364c:	4b41      	ldr	r3, [pc, #260]	; (8003754 <HAL_RCC_OscConfig+0x618>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a40      	ldr	r2, [pc, #256]	; (8003754 <HAL_RCC_OscConfig+0x618>)
 8003652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003656:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003658:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <HAL_RCC_OscConfig+0x618>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4a3d      	ldr	r2, [pc, #244]	; (8003754 <HAL_RCC_OscConfig+0x618>)
 800365e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003662:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fd fbcc 	bl	8000e00 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366c:	f7fd fbc8 	bl	8000e00 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e066      	b.n	800374c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367e:	4b35      	ldr	r3, [pc, #212]	; (8003754 <HAL_RCC_OscConfig+0x618>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x530>
 800368a:	e05e      	b.n	800374a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368c:	4b31      	ldr	r3, [pc, #196]	; (8003754 <HAL_RCC_OscConfig+0x618>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a30      	ldr	r2, [pc, #192]	; (8003754 <HAL_RCC_OscConfig+0x618>)
 8003692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fd fbb2 	bl	8000e00 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fd fbae 	bl	8000e00 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e04c      	b.n	800374c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b2:	4b28      	ldr	r3, [pc, #160]	; (8003754 <HAL_RCC_OscConfig+0x618>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80036be:	4b25      	ldr	r3, [pc, #148]	; (8003754 <HAL_RCC_OscConfig+0x618>)
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	4924      	ldr	r1, [pc, #144]	; (8003754 <HAL_RCC_OscConfig+0x618>)
 80036c4:	4b25      	ldr	r3, [pc, #148]	; (800375c <HAL_RCC_OscConfig+0x620>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	60cb      	str	r3, [r1, #12]
 80036ca:	e03e      	b.n	800374a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e039      	b.n	800374c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80036d8:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <HAL_RCC_OscConfig+0x618>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 0203 	and.w	r2, r3, #3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d12c      	bne.n	8003746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	3b01      	subs	r3, #1
 80036f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d123      	bne.n	8003746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d11b      	bne.n	8003746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800371a:	429a      	cmp	r2, r3
 800371c:	d113      	bne.n	8003746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	085b      	lsrs	r3, r3, #1
 800372a:	3b01      	subs	r3, #1
 800372c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d109      	bne.n	8003746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373c:	085b      	lsrs	r3, r3, #1
 800373e:	3b01      	subs	r3, #1
 8003740:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003742:	429a      	cmp	r2, r3
 8003744:	d001      	beq.n	800374a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3720      	adds	r7, #32
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40021000 	.word	0x40021000
 8003758:	019f800c 	.word	0x019f800c
 800375c:	feeefffc 	.word	0xfeeefffc

08003760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e11e      	b.n	80039b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003778:	4b91      	ldr	r3, [pc, #580]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d910      	bls.n	80037a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003786:	4b8e      	ldr	r3, [pc, #568]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 020f 	bic.w	r2, r3, #15
 800378e:	498c      	ldr	r1, [pc, #560]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003796:	4b8a      	ldr	r3, [pc, #552]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d001      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e106      	b.n	80039b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d073      	beq.n	800389c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d129      	bne.n	8003810 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037bc:	4b81      	ldr	r3, [pc, #516]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0f4      	b.n	80039b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80037cc:	f000 f99e 	bl	8003b0c <RCC_GetSysClockFreqFromPLLSource>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4a7c      	ldr	r2, [pc, #496]	; (80039c8 <HAL_RCC_ClockConfig+0x268>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d93f      	bls.n	800385a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037da:	4b7a      	ldr	r3, [pc, #488]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d033      	beq.n	800385a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d12f      	bne.n	800385a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037fa:	4b72      	ldr	r3, [pc, #456]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003802:	4a70      	ldr	r2, [pc, #448]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 8003804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003808:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800380a:	2380      	movs	r3, #128	; 0x80
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	e024      	b.n	800385a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d107      	bne.n	8003828 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003818:	4b6a      	ldr	r3, [pc, #424]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d109      	bne.n	8003838 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0c6      	b.n	80039b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003828:	4b66      	ldr	r3, [pc, #408]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0be      	b.n	80039b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003838:	f000 f8ce 	bl	80039d8 <HAL_RCC_GetSysClockFreq>
 800383c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4a61      	ldr	r2, [pc, #388]	; (80039c8 <HAL_RCC_ClockConfig+0x268>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d909      	bls.n	800385a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003846:	4b5f      	ldr	r3, [pc, #380]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800384e:	4a5d      	ldr	r2, [pc, #372]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 8003850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003854:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800385a:	4b5a      	ldr	r3, [pc, #360]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f023 0203 	bic.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4957      	ldr	r1, [pc, #348]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 8003868:	4313      	orrs	r3, r2
 800386a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800386c:	f7fd fac8 	bl	8000e00 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	e00a      	b.n	800388a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003874:	f7fd fac4 	bl	8000e00 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e095      	b.n	80039b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	4b4e      	ldr	r3, [pc, #312]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 020c 	and.w	r2, r3, #12
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	429a      	cmp	r2, r3
 800389a:	d1eb      	bne.n	8003874 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d023      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b4:	4b43      	ldr	r3, [pc, #268]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	4a42      	ldr	r2, [pc, #264]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 80038ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80038cc:	4b3d      	ldr	r3, [pc, #244]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80038d4:	4a3b      	ldr	r2, [pc, #236]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 80038d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038dc:	4b39      	ldr	r3, [pc, #228]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	4936      	ldr	r1, [pc, #216]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
 80038ee:	e008      	b.n	8003902 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2b80      	cmp	r3, #128	; 0x80
 80038f4:	d105      	bne.n	8003902 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038f6:	4b33      	ldr	r3, [pc, #204]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	4a32      	ldr	r2, [pc, #200]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 80038fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003900:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003902:	4b2f      	ldr	r3, [pc, #188]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d21d      	bcs.n	800394c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003910:	4b2b      	ldr	r3, [pc, #172]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 020f 	bic.w	r2, r3, #15
 8003918:	4929      	ldr	r1, [pc, #164]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	4313      	orrs	r3, r2
 800391e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003920:	f7fd fa6e 	bl	8000e00 <HAL_GetTick>
 8003924:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	e00a      	b.n	800393e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003928:	f7fd fa6a 	bl	8000e00 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	f241 3288 	movw	r2, #5000	; 0x1388
 8003936:	4293      	cmp	r3, r2
 8003938:	d901      	bls.n	800393e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e03b      	b.n	80039b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d1ed      	bne.n	8003928 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003958:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4917      	ldr	r1, [pc, #92]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 8003966:	4313      	orrs	r3, r2
 8003968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003976:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	490f      	ldr	r1, [pc, #60]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800398a:	f000 f825 	bl	80039d8 <HAL_RCC_GetSysClockFreq>
 800398e:	4602      	mov	r2, r0
 8003990:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <HAL_RCC_ClockConfig+0x264>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	091b      	lsrs	r3, r3, #4
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	490c      	ldr	r1, [pc, #48]	; (80039cc <HAL_RCC_ClockConfig+0x26c>)
 800399c:	5ccb      	ldrb	r3, [r1, r3]
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	fa22 f303 	lsr.w	r3, r2, r3
 80039a6:	4a0a      	ldr	r2, [pc, #40]	; (80039d0 <HAL_RCC_ClockConfig+0x270>)
 80039a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039aa:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <HAL_RCC_ClockConfig+0x274>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fd f9da 	bl	8000d68 <HAL_InitTick>
 80039b4:	4603      	mov	r3, r0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40022000 	.word	0x40022000
 80039c4:	40021000 	.word	0x40021000
 80039c8:	04c4b400 	.word	0x04c4b400
 80039cc:	08006528 	.word	0x08006528
 80039d0:	20000000 	.word	0x20000000
 80039d4:	20000004 	.word	0x20000004

080039d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039de:	4b2c      	ldr	r3, [pc, #176]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d102      	bne.n	80039f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039ea:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	e047      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039f0:	4b27      	ldr	r3, [pc, #156]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 030c 	and.w	r3, r3, #12
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d102      	bne.n	8003a02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039fc:	4b26      	ldr	r3, [pc, #152]	; (8003a98 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	e03e      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a02:	4b23      	ldr	r3, [pc, #140]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b0c      	cmp	r3, #12
 8003a0c:	d136      	bne.n	8003a7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a0e:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a18:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	3301      	adds	r3, #1
 8003a24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d10c      	bne.n	8003a46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a2c:	4a1a      	ldr	r2, [pc, #104]	; (8003a98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	4a16      	ldr	r2, [pc, #88]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a36:	68d2      	ldr	r2, [r2, #12]
 8003a38:	0a12      	lsrs	r2, r2, #8
 8003a3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	617b      	str	r3, [r7, #20]
      break;
 8003a44:	e00c      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a46:	4a13      	ldr	r2, [pc, #76]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	4a10      	ldr	r2, [pc, #64]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a50:	68d2      	ldr	r2, [r2, #12]
 8003a52:	0a12      	lsrs	r2, r2, #8
 8003a54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a58:	fb02 f303 	mul.w	r3, r2, r3
 8003a5c:	617b      	str	r3, [r7, #20]
      break;
 8003a5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	0e5b      	lsrs	r3, r3, #25
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	e001      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a80:	693b      	ldr	r3, [r7, #16]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000
 8003a94:	00f42400 	.word	0x00f42400
 8003a98:	007a1200 	.word	0x007a1200

08003a9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa0:	4b03      	ldr	r3, [pc, #12]	; (8003ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000000 	.word	0x20000000

08003ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ab8:	f7ff fff0 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003abc:	4602      	mov	r2, r0
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	4904      	ldr	r1, [pc, #16]	; (8003adc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aca:	5ccb      	ldrb	r3, [r1, r3]
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	08006538 	.word	0x08006538

08003ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ae4:	f7ff ffda 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	0adb      	lsrs	r3, r3, #11
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	4904      	ldr	r1, [pc, #16]	; (8003b08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003af6:	5ccb      	ldrb	r3, [r1, r3]
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40021000 	.word	0x40021000
 8003b08:	08006538 	.word	0x08006538

08003b0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b12:	4b1e      	ldr	r3, [pc, #120]	; (8003b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	091b      	lsrs	r3, r3, #4
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	3301      	adds	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b03      	cmp	r3, #3
 8003b2e:	d10c      	bne.n	8003b4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b30:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b38:	4a14      	ldr	r2, [pc, #80]	; (8003b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b3a:	68d2      	ldr	r2, [r2, #12]
 8003b3c:	0a12      	lsrs	r2, r2, #8
 8003b3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b42:	fb02 f303 	mul.w	r3, r2, r3
 8003b46:	617b      	str	r3, [r7, #20]
    break;
 8003b48:	e00c      	b.n	8003b64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b4a:	4a12      	ldr	r2, [pc, #72]	; (8003b94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b52:	4a0e      	ldr	r2, [pc, #56]	; (8003b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b54:	68d2      	ldr	r2, [r2, #12]
 8003b56:	0a12      	lsrs	r2, r2, #8
 8003b58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b5c:	fb02 f303 	mul.w	r3, r2, r3
 8003b60:	617b      	str	r3, [r7, #20]
    break;
 8003b62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	0e5b      	lsrs	r3, r3, #25
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	3301      	adds	r3, #1
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b7e:	687b      	ldr	r3, [r7, #4]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	007a1200 	.word	0x007a1200
 8003b94:	00f42400 	.word	0x00f42400

08003b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 8098 	beq.w	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bba:	4b43      	ldr	r3, [pc, #268]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10d      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc6:	4b40      	ldr	r3, [pc, #256]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bca:	4a3f      	ldr	r2, [pc, #252]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bde:	2301      	movs	r3, #1
 8003be0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be2:	4b3a      	ldr	r3, [pc, #232]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a39      	ldr	r2, [pc, #228]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bee:	f7fd f907 	bl	8000e00 <HAL_GetTick>
 8003bf2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bf4:	e009      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf6:	f7fd f903 	bl	8000e00 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d902      	bls.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	74fb      	strb	r3, [r7, #19]
        break;
 8003c08:	e005      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c0a:	4b30      	ldr	r3, [pc, #192]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0ef      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c16:	7cfb      	ldrb	r3, [r7, #19]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d159      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c1c:	4b2a      	ldr	r3, [pc, #168]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01e      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d019      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c38:	4b23      	ldr	r3, [pc, #140]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c44:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	4a1f      	ldr	r2, [pc, #124]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c54:	4b1c      	ldr	r3, [pc, #112]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5a:	4a1b      	ldr	r2, [pc, #108]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c64:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d016      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c76:	f7fd f8c3 	bl	8000e00 <HAL_GetTick>
 8003c7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c7c:	e00b      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fd f8bf 	bl	8000e00 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d902      	bls.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	74fb      	strb	r3, [r7, #19]
            break;
 8003c94:	e006      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0ec      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ca4:	7cfb      	ldrb	r3, [r7, #19]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10b      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb8:	4903      	ldr	r1, [pc, #12]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cc2:	7cfb      	ldrb	r3, [r7, #19]
 8003cc4:	74bb      	strb	r3, [r7, #18]
 8003cc6:	e005      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	7cfb      	ldrb	r3, [r7, #19]
 8003cd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd4:	7c7b      	ldrb	r3, [r7, #17]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d105      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cda:	4ba7      	ldr	r3, [pc, #668]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	4aa6      	ldr	r2, [pc, #664]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cf2:	4ba1      	ldr	r3, [pc, #644]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf8:	f023 0203 	bic.w	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	499d      	ldr	r1, [pc, #628]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d14:	4b98      	ldr	r3, [pc, #608]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1a:	f023 020c 	bic.w	r2, r3, #12
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	4995      	ldr	r1, [pc, #596]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d36:	4b90      	ldr	r3, [pc, #576]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	498c      	ldr	r1, [pc, #560]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d58:	4b87      	ldr	r3, [pc, #540]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	4984      	ldr	r1, [pc, #528]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d7a:	4b7f      	ldr	r3, [pc, #508]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	497b      	ldr	r1, [pc, #492]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d9c:	4b76      	ldr	r3, [pc, #472]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	4973      	ldr	r1, [pc, #460]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dbe:	4b6e      	ldr	r3, [pc, #440]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	496a      	ldr	r1, [pc, #424]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003de0:	4b65      	ldr	r3, [pc, #404]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	4962      	ldr	r1, [pc, #392]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e02:	4b5d      	ldr	r3, [pc, #372]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	4959      	ldr	r1, [pc, #356]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e24:	4b54      	ldr	r3, [pc, #336]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e2a:	f023 0203 	bic.w	r2, r3, #3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	4951      	ldr	r1, [pc, #324]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e46:	4b4c      	ldr	r3, [pc, #304]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	4948      	ldr	r1, [pc, #288]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d015      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e68:	4b43      	ldr	r3, [pc, #268]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	4940      	ldr	r1, [pc, #256]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e86:	d105      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e88:	4b3b      	ldr	r3, [pc, #236]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4a3a      	ldr	r2, [pc, #232]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d015      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ea0:	4b35      	ldr	r3, [pc, #212]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eae:	4932      	ldr	r1, [pc, #200]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ebe:	d105      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ec0:	4b2d      	ldr	r3, [pc, #180]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a2c      	ldr	r2, [pc, #176]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d015      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ed8:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	4924      	ldr	r1, [pc, #144]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ef6:	d105      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef8:	4b1f      	ldr	r3, [pc, #124]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a1e      	ldr	r2, [pc, #120]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d015      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f10:	4b19      	ldr	r3, [pc, #100]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1e:	4916      	ldr	r1, [pc, #88]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f30:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4a10      	ldr	r2, [pc, #64]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d019      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	4908      	ldr	r1, [pc, #32]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f66:	d109      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f68:	4b03      	ldr	r3, [pc, #12]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4a02      	ldr	r2, [pc, #8]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f72:	60d3      	str	r3, [r2, #12]
 8003f74:	e002      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d015      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f88:	4b29      	ldr	r3, [pc, #164]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	4926      	ldr	r1, [pc, #152]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fa6:	d105      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fa8:	4b21      	ldr	r3, [pc, #132]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4a20      	ldr	r2, [pc, #128]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d015      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fce:	4918      	ldr	r1, [pc, #96]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fde:	d105      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fe0:	4b13      	ldr	r3, [pc, #76]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4a12      	ldr	r2, [pc, #72]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d015      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ff8:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ffa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ffe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004006:	490a      	ldr	r1, [pc, #40]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004012:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004016:	d105      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4a04      	ldr	r2, [pc, #16]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800401e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004022:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004024:	7cbb      	ldrb	r3, [r7, #18]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40021000 	.word	0x40021000

08004034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e049      	b.n	80040da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fc fd4e 	bl	8000afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3304      	adds	r3, #4
 8004070:	4619      	mov	r1, r3
 8004072:	4610      	mov	r0, r2
 8004074:	f000 fa26 	bl	80044c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d001      	beq.n	80040fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e054      	b.n	80041a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a26      	ldr	r2, [pc, #152]	; (80041b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d022      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x80>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004126:	d01d      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x80>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a22      	ldr	r2, [pc, #136]	; (80041b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d018      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x80>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a21      	ldr	r2, [pc, #132]	; (80041bc <HAL_TIM_Base_Start_IT+0xd8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d013      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x80>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1f      	ldr	r2, [pc, #124]	; (80041c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00e      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x80>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d009      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x80>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1c      	ldr	r2, [pc, #112]	; (80041c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x80>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <HAL_TIM_Base_Start_IT+0xe8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d115      	bne.n	8004190 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <HAL_TIM_Base_Start_IT+0xec>)
 800416c:	4013      	ands	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b06      	cmp	r3, #6
 8004174:	d015      	beq.n	80041a2 <HAL_TIM_Base_Start_IT+0xbe>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417c:	d011      	beq.n	80041a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418e:	e008      	b.n	80041a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	e000      	b.n	80041a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40012c00 	.word	0x40012c00
 80041b8:	40000400 	.word	0x40000400
 80041bc:	40000800 	.word	0x40000800
 80041c0:	40000c00 	.word	0x40000c00
 80041c4:	40013400 	.word	0x40013400
 80041c8:	40014000 	.word	0x40014000
 80041cc:	40015000 	.word	0x40015000
 80041d0:	00010007 	.word	0x00010007

080041d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d020      	beq.n	8004238 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01b      	beq.n	8004238 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0202 	mvn.w	r2, #2
 8004208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f931 	bl	8004486 <HAL_TIM_IC_CaptureCallback>
 8004224:	e005      	b.n	8004232 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f923 	bl	8004472 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f934 	bl	800449a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	d020      	beq.n	8004284 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01b      	beq.n	8004284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0204 	mvn.w	r2, #4
 8004254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2202      	movs	r2, #2
 800425a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f90b 	bl	8004486 <HAL_TIM_IC_CaptureCallback>
 8004270:	e005      	b.n	800427e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f8fd 	bl	8004472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f90e 	bl	800449a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d020      	beq.n	80042d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01b      	beq.n	80042d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0208 	mvn.w	r2, #8
 80042a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2204      	movs	r2, #4
 80042a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f8e5 	bl	8004486 <HAL_TIM_IC_CaptureCallback>
 80042bc:	e005      	b.n	80042ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f8d7 	bl	8004472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f8e8 	bl	800449a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d020      	beq.n	800431c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01b      	beq.n	800431c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0210 	mvn.w	r2, #16
 80042ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2208      	movs	r2, #8
 80042f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f8bf 	bl	8004486 <HAL_TIM_IC_CaptureCallback>
 8004308:	e005      	b.n	8004316 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f8b1 	bl	8004472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f8c2 	bl	800449a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00c      	beq.n	8004340 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d007      	beq.n	8004340 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0201 	mvn.w	r2, #1
 8004338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fc f952 	bl	80005e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004346:	2b00      	cmp	r3, #0
 8004348:	d104      	bne.n	8004354 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00c      	beq.n	800436e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f9ff 	bl	800476c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00c      	beq.n	8004392 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800438a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f9f7 	bl	8004780 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00c      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f87c 	bl	80044ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00c      	beq.n	80043da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f06f 0220 	mvn.w	r2, #32
 80043d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f9bf 	bl	8004758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00c      	beq.n	80043fe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d007      	beq.n	80043fe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80043f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f9cb 	bl	8004794 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00c      	beq.n	8004422 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d007      	beq.n	8004422 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800441a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f9c3 	bl	80047a8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00c      	beq.n	8004446 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800443e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f9bb 	bl	80047bc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00c      	beq.n	800446a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d007      	beq.n	800446a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f9b3 	bl	80047d0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
	...

080044c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a4c      	ldr	r2, [pc, #304]	; (8004608 <TIM_Base_SetConfig+0x144>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d017      	beq.n	800450c <TIM_Base_SetConfig+0x48>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e2:	d013      	beq.n	800450c <TIM_Base_SetConfig+0x48>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a49      	ldr	r2, [pc, #292]	; (800460c <TIM_Base_SetConfig+0x148>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00f      	beq.n	800450c <TIM_Base_SetConfig+0x48>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a48      	ldr	r2, [pc, #288]	; (8004610 <TIM_Base_SetConfig+0x14c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00b      	beq.n	800450c <TIM_Base_SetConfig+0x48>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a47      	ldr	r2, [pc, #284]	; (8004614 <TIM_Base_SetConfig+0x150>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d007      	beq.n	800450c <TIM_Base_SetConfig+0x48>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a46      	ldr	r2, [pc, #280]	; (8004618 <TIM_Base_SetConfig+0x154>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_Base_SetConfig+0x48>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a45      	ldr	r2, [pc, #276]	; (800461c <TIM_Base_SetConfig+0x158>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d108      	bne.n	800451e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a39      	ldr	r2, [pc, #228]	; (8004608 <TIM_Base_SetConfig+0x144>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d023      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452c:	d01f      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a36      	ldr	r2, [pc, #216]	; (800460c <TIM_Base_SetConfig+0x148>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d01b      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a35      	ldr	r2, [pc, #212]	; (8004610 <TIM_Base_SetConfig+0x14c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d017      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a34      	ldr	r2, [pc, #208]	; (8004614 <TIM_Base_SetConfig+0x150>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d013      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a33      	ldr	r2, [pc, #204]	; (8004618 <TIM_Base_SetConfig+0x154>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00f      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a33      	ldr	r2, [pc, #204]	; (8004620 <TIM_Base_SetConfig+0x15c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00b      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a32      	ldr	r2, [pc, #200]	; (8004624 <TIM_Base_SetConfig+0x160>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a31      	ldr	r2, [pc, #196]	; (8004628 <TIM_Base_SetConfig+0x164>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d003      	beq.n	800456e <TIM_Base_SetConfig+0xaa>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a2c      	ldr	r2, [pc, #176]	; (800461c <TIM_Base_SetConfig+0x158>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d108      	bne.n	8004580 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a18      	ldr	r2, [pc, #96]	; (8004608 <TIM_Base_SetConfig+0x144>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <TIM_Base_SetConfig+0x110>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a1a      	ldr	r2, [pc, #104]	; (8004618 <TIM_Base_SetConfig+0x154>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00f      	beq.n	80045d4 <TIM_Base_SetConfig+0x110>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a1a      	ldr	r2, [pc, #104]	; (8004620 <TIM_Base_SetConfig+0x15c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00b      	beq.n	80045d4 <TIM_Base_SetConfig+0x110>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a19      	ldr	r2, [pc, #100]	; (8004624 <TIM_Base_SetConfig+0x160>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <TIM_Base_SetConfig+0x110>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a18      	ldr	r2, [pc, #96]	; (8004628 <TIM_Base_SetConfig+0x164>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_Base_SetConfig+0x110>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a13      	ldr	r2, [pc, #76]	; (800461c <TIM_Base_SetConfig+0x158>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d103      	bne.n	80045dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d105      	bne.n	80045fa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f023 0201 	bic.w	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	611a      	str	r2, [r3, #16]
  }
}
 80045fa:	bf00      	nop
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40012c00 	.word	0x40012c00
 800460c:	40000400 	.word	0x40000400
 8004610:	40000800 	.word	0x40000800
 8004614:	40000c00 	.word	0x40000c00
 8004618:	40013400 	.word	0x40013400
 800461c:	40015000 	.word	0x40015000
 8004620:	40014000 	.word	0x40014000
 8004624:	40014400 	.word	0x40014400
 8004628:	40014800 	.word	0x40014800

0800462c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004640:	2302      	movs	r3, #2
 8004642:	e074      	b.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a34      	ldr	r2, [pc, #208]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d009      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a33      	ldr	r2, [pc, #204]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d004      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a31      	ldr	r2, [pc, #196]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d108      	bne.n	8004694 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004688:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800469a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a21      	ldr	r2, [pc, #132]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d022      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c4:	d01d      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1f      	ldr	r2, [pc, #124]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d018      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1d      	ldr	r2, [pc, #116]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1c      	ldr	r2, [pc, #112]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00e      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a15      	ldr	r2, [pc, #84]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d009      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a11      	ldr	r2, [pc, #68]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d10c      	bne.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	4313      	orrs	r3, r2
 8004712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40013400 	.word	0x40013400
 8004744:	40015000 	.word	0x40015000
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40000c00 	.word	0x40000c00
 8004754:	40014000 	.word	0x40014000

08004758 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e042      	b.n	800487c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d106      	bne.n	800480e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7fc f91f 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2224      	movs	r2, #36	; 0x24
 8004812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0201 	bic.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fbb2 	bl	8004f98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f8b3 	bl	80049a0 <UART_SetConfig>
 800483a:	4603      	mov	r3, r0
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e01b      	b.n	800487c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 fc31 	bl	80050dc <UART_CheckIdleState>
 800487a:	4603      	mov	r3, r0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08a      	sub	sp, #40	; 0x28
 8004888:	af02      	add	r7, sp, #8
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	4613      	mov	r3, r2
 8004892:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	2b20      	cmp	r3, #32
 800489c:	d17b      	bne.n	8004996 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <HAL_UART_Transmit+0x26>
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e074      	b.n	8004998 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2221      	movs	r2, #33	; 0x21
 80048ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048be:	f7fc fa9f 	bl	8000e00 <HAL_GetTick>
 80048c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	88fa      	ldrh	r2, [r7, #6]
 80048c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	88fa      	ldrh	r2, [r7, #6]
 80048d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048dc:	d108      	bne.n	80048f0 <HAL_UART_Transmit+0x6c>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d104      	bne.n	80048f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	e003      	b.n	80048f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048f8:	e030      	b.n	800495c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2200      	movs	r2, #0
 8004902:	2180      	movs	r1, #128	; 0x80
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 fc93 	bl	8005230 <UART_WaitOnFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e03d      	b.n	8004998 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10b      	bne.n	800493a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004930:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	3302      	adds	r3, #2
 8004936:	61bb      	str	r3, [r7, #24]
 8004938:	e007      	b.n	800494a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	781a      	ldrb	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	3301      	adds	r3, #1
 8004948:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1c8      	bne.n	80048fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2200      	movs	r2, #0
 8004970:	2140      	movs	r1, #64	; 0x40
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fc5c 	bl	8005230 <UART_WaitOnFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e006      	b.n	8004998 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e000      	b.n	8004998 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004996:	2302      	movs	r3, #2
  }
}
 8004998:	4618      	mov	r0, r3
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a4:	b08c      	sub	sp, #48	; 0x30
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	431a      	orrs	r2, r3
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4baa      	ldr	r3, [pc, #680]	; (8004c78 <UART_SetConfig+0x2d8>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	6812      	ldr	r2, [r2, #0]
 80049d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049d8:	430b      	orrs	r3, r1
 80049da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a9f      	ldr	r2, [pc, #636]	; (8004c7c <UART_SetConfig+0x2dc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d004      	beq.n	8004a0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004a16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a20:	430b      	orrs	r3, r1
 8004a22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	f023 010f 	bic.w	r1, r3, #15
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a90      	ldr	r2, [pc, #576]	; (8004c80 <UART_SetConfig+0x2e0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d125      	bne.n	8004a90 <UART_SetConfig+0xf0>
 8004a44:	4b8f      	ldr	r3, [pc, #572]	; (8004c84 <UART_SetConfig+0x2e4>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d81a      	bhi.n	8004a88 <UART_SetConfig+0xe8>
 8004a52:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <UART_SetConfig+0xb8>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004a69 	.word	0x08004a69
 8004a5c:	08004a79 	.word	0x08004a79
 8004a60:	08004a71 	.word	0x08004a71
 8004a64:	08004a81 	.word	0x08004a81
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a6e:	e116      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004a70:	2302      	movs	r3, #2
 8004a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a76:	e112      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004a78:	2304      	movs	r3, #4
 8004a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a7e:	e10e      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004a80:	2308      	movs	r3, #8
 8004a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a86:	e10a      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004a88:	2310      	movs	r3, #16
 8004a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a8e:	e106      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a7c      	ldr	r2, [pc, #496]	; (8004c88 <UART_SetConfig+0x2e8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d138      	bne.n	8004b0c <UART_SetConfig+0x16c>
 8004a9a:	4b7a      	ldr	r3, [pc, #488]	; (8004c84 <UART_SetConfig+0x2e4>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa0:	f003 030c 	and.w	r3, r3, #12
 8004aa4:	2b0c      	cmp	r3, #12
 8004aa6:	d82d      	bhi.n	8004b04 <UART_SetConfig+0x164>
 8004aa8:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <UART_SetConfig+0x110>)
 8004aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aae:	bf00      	nop
 8004ab0:	08004ae5 	.word	0x08004ae5
 8004ab4:	08004b05 	.word	0x08004b05
 8004ab8:	08004b05 	.word	0x08004b05
 8004abc:	08004b05 	.word	0x08004b05
 8004ac0:	08004af5 	.word	0x08004af5
 8004ac4:	08004b05 	.word	0x08004b05
 8004ac8:	08004b05 	.word	0x08004b05
 8004acc:	08004b05 	.word	0x08004b05
 8004ad0:	08004aed 	.word	0x08004aed
 8004ad4:	08004b05 	.word	0x08004b05
 8004ad8:	08004b05 	.word	0x08004b05
 8004adc:	08004b05 	.word	0x08004b05
 8004ae0:	08004afd 	.word	0x08004afd
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aea:	e0d8      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004aec:	2302      	movs	r3, #2
 8004aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004af2:	e0d4      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004af4:	2304      	movs	r3, #4
 8004af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004afa:	e0d0      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004afc:	2308      	movs	r3, #8
 8004afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b02:	e0cc      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004b04:	2310      	movs	r3, #16
 8004b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b0a:	e0c8      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a5e      	ldr	r2, [pc, #376]	; (8004c8c <UART_SetConfig+0x2ec>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d125      	bne.n	8004b62 <UART_SetConfig+0x1c2>
 8004b16:	4b5b      	ldr	r3, [pc, #364]	; (8004c84 <UART_SetConfig+0x2e4>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b20:	2b30      	cmp	r3, #48	; 0x30
 8004b22:	d016      	beq.n	8004b52 <UART_SetConfig+0x1b2>
 8004b24:	2b30      	cmp	r3, #48	; 0x30
 8004b26:	d818      	bhi.n	8004b5a <UART_SetConfig+0x1ba>
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d00a      	beq.n	8004b42 <UART_SetConfig+0x1a2>
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d814      	bhi.n	8004b5a <UART_SetConfig+0x1ba>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <UART_SetConfig+0x19a>
 8004b34:	2b10      	cmp	r3, #16
 8004b36:	d008      	beq.n	8004b4a <UART_SetConfig+0x1aa>
 8004b38:	e00f      	b.n	8004b5a <UART_SetConfig+0x1ba>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b40:	e0ad      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004b42:	2302      	movs	r3, #2
 8004b44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b48:	e0a9      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004b4a:	2304      	movs	r3, #4
 8004b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b50:	e0a5      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004b52:	2308      	movs	r3, #8
 8004b54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b58:	e0a1      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004b5a:	2310      	movs	r3, #16
 8004b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b60:	e09d      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a4a      	ldr	r2, [pc, #296]	; (8004c90 <UART_SetConfig+0x2f0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d125      	bne.n	8004bb8 <UART_SetConfig+0x218>
 8004b6c:	4b45      	ldr	r3, [pc, #276]	; (8004c84 <UART_SetConfig+0x2e4>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b76:	2bc0      	cmp	r3, #192	; 0xc0
 8004b78:	d016      	beq.n	8004ba8 <UART_SetConfig+0x208>
 8004b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b7c:	d818      	bhi.n	8004bb0 <UART_SetConfig+0x210>
 8004b7e:	2b80      	cmp	r3, #128	; 0x80
 8004b80:	d00a      	beq.n	8004b98 <UART_SetConfig+0x1f8>
 8004b82:	2b80      	cmp	r3, #128	; 0x80
 8004b84:	d814      	bhi.n	8004bb0 <UART_SetConfig+0x210>
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <UART_SetConfig+0x1f0>
 8004b8a:	2b40      	cmp	r3, #64	; 0x40
 8004b8c:	d008      	beq.n	8004ba0 <UART_SetConfig+0x200>
 8004b8e:	e00f      	b.n	8004bb0 <UART_SetConfig+0x210>
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b96:	e082      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b9e:	e07e      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba6:	e07a      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004ba8:	2308      	movs	r3, #8
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bae:	e076      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb6:	e072      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a35      	ldr	r2, [pc, #212]	; (8004c94 <UART_SetConfig+0x2f4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d12a      	bne.n	8004c18 <UART_SetConfig+0x278>
 8004bc2:	4b30      	ldr	r3, [pc, #192]	; (8004c84 <UART_SetConfig+0x2e4>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bd0:	d01a      	beq.n	8004c08 <UART_SetConfig+0x268>
 8004bd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bd6:	d81b      	bhi.n	8004c10 <UART_SetConfig+0x270>
 8004bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bdc:	d00c      	beq.n	8004bf8 <UART_SetConfig+0x258>
 8004bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004be2:	d815      	bhi.n	8004c10 <UART_SetConfig+0x270>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <UART_SetConfig+0x250>
 8004be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bec:	d008      	beq.n	8004c00 <UART_SetConfig+0x260>
 8004bee:	e00f      	b.n	8004c10 <UART_SetConfig+0x270>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bf6:	e052      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bfe:	e04e      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004c00:	2304      	movs	r3, #4
 8004c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c06:	e04a      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004c08:	2308      	movs	r3, #8
 8004c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c0e:	e046      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004c10:	2310      	movs	r3, #16
 8004c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c16:	e042      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a17      	ldr	r2, [pc, #92]	; (8004c7c <UART_SetConfig+0x2dc>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d13a      	bne.n	8004c98 <UART_SetConfig+0x2f8>
 8004c22:	4b18      	ldr	r3, [pc, #96]	; (8004c84 <UART_SetConfig+0x2e4>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c30:	d01a      	beq.n	8004c68 <UART_SetConfig+0x2c8>
 8004c32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c36:	d81b      	bhi.n	8004c70 <UART_SetConfig+0x2d0>
 8004c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c3c:	d00c      	beq.n	8004c58 <UART_SetConfig+0x2b8>
 8004c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c42:	d815      	bhi.n	8004c70 <UART_SetConfig+0x2d0>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <UART_SetConfig+0x2b0>
 8004c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4c:	d008      	beq.n	8004c60 <UART_SetConfig+0x2c0>
 8004c4e:	e00f      	b.n	8004c70 <UART_SetConfig+0x2d0>
 8004c50:	2300      	movs	r3, #0
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c56:	e022      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c5e:	e01e      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004c60:	2304      	movs	r3, #4
 8004c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c66:	e01a      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004c68:	2308      	movs	r3, #8
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c6e:	e016      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004c70:	2310      	movs	r3, #16
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c76:	e012      	b.n	8004c9e <UART_SetConfig+0x2fe>
 8004c78:	cfff69f3 	.word	0xcfff69f3
 8004c7c:	40008000 	.word	0x40008000
 8004c80:	40013800 	.word	0x40013800
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40004400 	.word	0x40004400
 8004c8c:	40004800 	.word	0x40004800
 8004c90:	40004c00 	.word	0x40004c00
 8004c94:	40005000 	.word	0x40005000
 8004c98:	2310      	movs	r3, #16
 8004c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4aae      	ldr	r2, [pc, #696]	; (8004f5c <UART_SetConfig+0x5bc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	f040 8097 	bne.w	8004dd8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004caa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d823      	bhi.n	8004cfa <UART_SetConfig+0x35a>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <UART_SetConfig+0x318>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004cfb 	.word	0x08004cfb
 8004cc0:	08004ce5 	.word	0x08004ce5
 8004cc4:	08004cfb 	.word	0x08004cfb
 8004cc8:	08004ceb 	.word	0x08004ceb
 8004ccc:	08004cfb 	.word	0x08004cfb
 8004cd0:	08004cfb 	.word	0x08004cfb
 8004cd4:	08004cfb 	.word	0x08004cfb
 8004cd8:	08004cf3 	.word	0x08004cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cdc:	f7fe feea 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 8004ce0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ce2:	e010      	b.n	8004d06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce4:	4b9e      	ldr	r3, [pc, #632]	; (8004f60 <UART_SetConfig+0x5c0>)
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ce8:	e00d      	b.n	8004d06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cea:	f7fe fe75 	bl	80039d8 <HAL_RCC_GetSysClockFreq>
 8004cee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cf0:	e009      	b.n	8004d06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cf8:	e005      	b.n	8004d06 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 8130 	beq.w	8004f6e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	4a94      	ldr	r2, [pc, #592]	; (8004f64 <UART_SetConfig+0x5c4>)
 8004d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	4413      	add	r3, r2
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d305      	bcc.n	8004d3e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d903      	bls.n	8004d46 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d44:	e113      	b.n	8004f6e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	2200      	movs	r2, #0
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	60fa      	str	r2, [r7, #12]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	4a84      	ldr	r2, [pc, #528]	; (8004f64 <UART_SetConfig+0x5c4>)
 8004d54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d68:	f7fb faaa 	bl	80002c0 <__aeabi_uldivmod>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4610      	mov	r0, r2
 8004d72:	4619      	mov	r1, r3
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	020b      	lsls	r3, r1, #8
 8004d7e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d82:	0202      	lsls	r2, r0, #8
 8004d84:	6979      	ldr	r1, [r7, #20]
 8004d86:	6849      	ldr	r1, [r1, #4]
 8004d88:	0849      	lsrs	r1, r1, #1
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	4605      	mov	r5, r0
 8004d90:	eb12 0804 	adds.w	r8, r2, r4
 8004d94:	eb43 0905 	adc.w	r9, r3, r5
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	469a      	mov	sl, r3
 8004da0:	4693      	mov	fp, r2
 8004da2:	4652      	mov	r2, sl
 8004da4:	465b      	mov	r3, fp
 8004da6:	4640      	mov	r0, r8
 8004da8:	4649      	mov	r1, r9
 8004daa:	f7fb fa89 	bl	80002c0 <__aeabi_uldivmod>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4613      	mov	r3, r2
 8004db4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dbc:	d308      	bcc.n	8004dd0 <UART_SetConfig+0x430>
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dc4:	d204      	bcs.n	8004dd0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6a3a      	ldr	r2, [r7, #32]
 8004dcc:	60da      	str	r2, [r3, #12]
 8004dce:	e0ce      	b.n	8004f6e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004dd6:	e0ca      	b.n	8004f6e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de0:	d166      	bne.n	8004eb0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004de2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d827      	bhi.n	8004e3a <UART_SetConfig+0x49a>
 8004dea:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <UART_SetConfig+0x450>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e15 	.word	0x08004e15
 8004df4:	08004e1d 	.word	0x08004e1d
 8004df8:	08004e25 	.word	0x08004e25
 8004dfc:	08004e3b 	.word	0x08004e3b
 8004e00:	08004e2b 	.word	0x08004e2b
 8004e04:	08004e3b 	.word	0x08004e3b
 8004e08:	08004e3b 	.word	0x08004e3b
 8004e0c:	08004e3b 	.word	0x08004e3b
 8004e10:	08004e33 	.word	0x08004e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e14:	f7fe fe4e 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 8004e18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e1a:	e014      	b.n	8004e46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e1c:	f7fe fe60 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 8004e20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e22:	e010      	b.n	8004e46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e24:	4b4e      	ldr	r3, [pc, #312]	; (8004f60 <UART_SetConfig+0x5c0>)
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e28:	e00d      	b.n	8004e46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e2a:	f7fe fdd5 	bl	80039d8 <HAL_RCC_GetSysClockFreq>
 8004e2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e30:	e009      	b.n	8004e46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e38:	e005      	b.n	8004e46 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8090 	beq.w	8004f6e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	4a44      	ldr	r2, [pc, #272]	; (8004f64 <UART_SetConfig+0x5c4>)
 8004e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e60:	005a      	lsls	r2, r3, #1
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	085b      	lsrs	r3, r3, #1
 8004e68:	441a      	add	r2, r3
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	2b0f      	cmp	r3, #15
 8004e78:	d916      	bls.n	8004ea8 <UART_SetConfig+0x508>
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e80:	d212      	bcs.n	8004ea8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	f023 030f 	bic.w	r3, r3, #15
 8004e8a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	085b      	lsrs	r3, r3, #1
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	8bfb      	ldrh	r3, [r7, #30]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	8bfa      	ldrh	r2, [r7, #30]
 8004ea4:	60da      	str	r2, [r3, #12]
 8004ea6:	e062      	b.n	8004f6e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004eae:	e05e      	b.n	8004f6e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d828      	bhi.n	8004f0a <UART_SetConfig+0x56a>
 8004eb8:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <UART_SetConfig+0x520>)
 8004eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebe:	bf00      	nop
 8004ec0:	08004ee5 	.word	0x08004ee5
 8004ec4:	08004eed 	.word	0x08004eed
 8004ec8:	08004ef5 	.word	0x08004ef5
 8004ecc:	08004f0b 	.word	0x08004f0b
 8004ed0:	08004efb 	.word	0x08004efb
 8004ed4:	08004f0b 	.word	0x08004f0b
 8004ed8:	08004f0b 	.word	0x08004f0b
 8004edc:	08004f0b 	.word	0x08004f0b
 8004ee0:	08004f03 	.word	0x08004f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ee4:	f7fe fde6 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 8004ee8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eea:	e014      	b.n	8004f16 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eec:	f7fe fdf8 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 8004ef0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ef2:	e010      	b.n	8004f16 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ef4:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <UART_SetConfig+0x5c0>)
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ef8:	e00d      	b.n	8004f16 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004efa:	f7fe fd6d 	bl	80039d8 <HAL_RCC_GetSysClockFreq>
 8004efe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f00:	e009      	b.n	8004f16 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f08:	e005      	b.n	8004f16 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f14:	bf00      	nop
    }

    if (pclk != 0U)
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d028      	beq.n	8004f6e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	4a10      	ldr	r2, [pc, #64]	; (8004f64 <UART_SetConfig+0x5c4>)
 8004f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f26:	461a      	mov	r2, r3
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	441a      	add	r2, r3
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	2b0f      	cmp	r3, #15
 8004f44:	d910      	bls.n	8004f68 <UART_SetConfig+0x5c8>
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f4c:	d20c      	bcs.n	8004f68 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60da      	str	r2, [r3, #12]
 8004f58:	e009      	b.n	8004f6e <UART_SetConfig+0x5ce>
 8004f5a:	bf00      	nop
 8004f5c:	40008000 	.word	0x40008000
 8004f60:	00f42400 	.word	0x00f42400
 8004f64:	08006540 	.word	0x08006540
      }
      else
      {
        ret = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2200      	movs	r2, #0
 8004f82:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2200      	movs	r2, #0
 8004f88:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004f8a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3730      	adds	r7, #48	; 0x30
 8004f92:	46bd      	mov	sp, r7
 8004f94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	f003 0308 	and.w	r3, r3, #8
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01a      	beq.n	80050ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005096:	d10a      	bne.n	80050ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	605a      	str	r2, [r3, #4]
  }
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b098      	sub	sp, #96	; 0x60
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050ec:	f7fb fe88 	bl	8000e00 <HAL_GetTick>
 80050f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d12f      	bne.n	8005160 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005108:	2200      	movs	r2, #0
 800510a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f88e 	bl	8005230 <UART_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d022      	beq.n	8005160 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800512e:	653b      	str	r3, [r7, #80]	; 0x50
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005138:	647b      	str	r3, [r7, #68]	; 0x44
 800513a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800513e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e6      	bne.n	800511a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e063      	b.n	8005228 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0304 	and.w	r3, r3, #4
 800516a:	2b04      	cmp	r3, #4
 800516c:	d149      	bne.n	8005202 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800516e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005176:	2200      	movs	r2, #0
 8005178:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f857 	bl	8005230 <UART_WaitOnFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d03c      	beq.n	8005202 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	623b      	str	r3, [r7, #32]
   return(result);
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800519c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a6:	633b      	str	r3, [r7, #48]	; 0x30
 80051a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e6      	bne.n	8005188 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3308      	adds	r3, #8
 80051c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	e853 3f00 	ldrex	r3, [r3]
 80051c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f023 0301 	bic.w	r3, r3, #1
 80051d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3308      	adds	r3, #8
 80051d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051da:	61fa      	str	r2, [r7, #28]
 80051dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	69b9      	ldr	r1, [r7, #24]
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	e841 2300 	strex	r3, r2, [r1]
 80051e6:	617b      	str	r3, [r7, #20]
   return(result);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1e5      	bne.n	80051ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e012      	b.n	8005228 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2220      	movs	r2, #32
 8005206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2220      	movs	r2, #32
 800520e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3758      	adds	r7, #88	; 0x58
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	4613      	mov	r3, r2
 800523e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005240:	e04f      	b.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005248:	d04b      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524a:	f7fb fdd9 	bl	8000e00 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	429a      	cmp	r2, r3
 8005258:	d302      	bcc.n	8005260 <UART_WaitOnFlagUntilTimeout+0x30>
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e04e      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	d037      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b80      	cmp	r3, #128	; 0x80
 8005276:	d034      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b40      	cmp	r3, #64	; 0x40
 800527c:	d031      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b08      	cmp	r3, #8
 800528a:	d110      	bne.n	80052ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2208      	movs	r2, #8
 8005292:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f838 	bl	800530a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2208      	movs	r2, #8
 800529e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e029      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052bc:	d111      	bne.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f81e 	bl	800530a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e00f      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4013      	ands	r3, r2
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	bf0c      	ite	eq
 80052f2:	2301      	moveq	r3, #1
 80052f4:	2300      	movne	r3, #0
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	79fb      	ldrb	r3, [r7, #7]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d0a0      	beq.n	8005242 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800530a:	b480      	push	{r7}
 800530c:	b095      	sub	sp, #84	; 0x54
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	461a      	mov	r2, r3
 800532e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005330:	643b      	str	r3, [r7, #64]	; 0x40
 8005332:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005336:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e6      	bne.n	8005312 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3308      	adds	r3, #8
 800534a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	61fb      	str	r3, [r7, #28]
   return(result);
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800535a:	f023 0301 	bic.w	r3, r3, #1
 800535e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3308      	adds	r3, #8
 8005366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005368:	62fa      	str	r2, [r7, #44]	; 0x2c
 800536a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800536e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e3      	bne.n	8005344 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005380:	2b01      	cmp	r3, #1
 8005382:	d118      	bne.n	80053b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	60bb      	str	r3, [r7, #8]
   return(result);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f023 0310 	bic.w	r3, r3, #16
 8005398:	647b      	str	r3, [r7, #68]	; 0x44
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a2:	61bb      	str	r3, [r7, #24]
 80053a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6979      	ldr	r1, [r7, #20]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	613b      	str	r3, [r7, #16]
   return(result);
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e6      	bne.n	8005384 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80053ca:	bf00      	nop
 80053cc:	3754      	adds	r7, #84	; 0x54
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_UARTEx_DisableFifoMode+0x16>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e027      	b.n	800543c <HAL_UARTEx_DisableFifoMode+0x66>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2224      	movs	r2, #36	; 0x24
 80053f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0201 	bic.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800541a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800545c:	2302      	movs	r3, #2
 800545e:	e02d      	b.n	80054bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2224      	movs	r2, #36	; 0x24
 800546c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0201 	bic.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f84f 	bl	8005540 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054d8:	2302      	movs	r3, #2
 80054da:	e02d      	b.n	8005538 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2224      	movs	r2, #36	; 0x24
 80054e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0201 	bic.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f811 	bl	8005540 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800554c:	2b00      	cmp	r3, #0
 800554e:	d108      	bne.n	8005562 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005560:	e031      	b.n	80055c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005562:	2308      	movs	r3, #8
 8005564:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005566:	2308      	movs	r3, #8
 8005568:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	0e5b      	lsrs	r3, r3, #25
 8005572:	b2db      	uxtb	r3, r3
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	0f5b      	lsrs	r3, r3, #29
 8005582:	b2db      	uxtb	r3, r3
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800558a:	7bbb      	ldrb	r3, [r7, #14]
 800558c:	7b3a      	ldrb	r2, [r7, #12]
 800558e:	4911      	ldr	r1, [pc, #68]	; (80055d4 <UARTEx_SetNbDataToProcess+0x94>)
 8005590:	5c8a      	ldrb	r2, [r1, r2]
 8005592:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005596:	7b3a      	ldrb	r2, [r7, #12]
 8005598:	490f      	ldr	r1, [pc, #60]	; (80055d8 <UARTEx_SetNbDataToProcess+0x98>)
 800559a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800559c:	fb93 f3f2 	sdiv	r3, r3, r2
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	7b7a      	ldrb	r2, [r7, #13]
 80055ac:	4909      	ldr	r1, [pc, #36]	; (80055d4 <UARTEx_SetNbDataToProcess+0x94>)
 80055ae:	5c8a      	ldrb	r2, [r1, r2]
 80055b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80055b4:	7b7a      	ldrb	r2, [r7, #13]
 80055b6:	4908      	ldr	r1, [pc, #32]	; (80055d8 <UARTEx_SetNbDataToProcess+0x98>)
 80055b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80055be:	b29a      	uxth	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80055c6:	bf00      	nop
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	08006558 	.word	0x08006558
 80055d8:	08006560 	.word	0x08006560

080055dc <sbrk_aligned>:
 80055dc:	b570      	push	{r4, r5, r6, lr}
 80055de:	4e0e      	ldr	r6, [pc, #56]	; (8005618 <sbrk_aligned+0x3c>)
 80055e0:	460c      	mov	r4, r1
 80055e2:	6831      	ldr	r1, [r6, #0]
 80055e4:	4605      	mov	r5, r0
 80055e6:	b911      	cbnz	r1, 80055ee <sbrk_aligned+0x12>
 80055e8:	f000 f9dc 	bl	80059a4 <_sbrk_r>
 80055ec:	6030      	str	r0, [r6, #0]
 80055ee:	4621      	mov	r1, r4
 80055f0:	4628      	mov	r0, r5
 80055f2:	f000 f9d7 	bl	80059a4 <_sbrk_r>
 80055f6:	1c43      	adds	r3, r0, #1
 80055f8:	d00a      	beq.n	8005610 <sbrk_aligned+0x34>
 80055fa:	1cc4      	adds	r4, r0, #3
 80055fc:	f024 0403 	bic.w	r4, r4, #3
 8005600:	42a0      	cmp	r0, r4
 8005602:	d007      	beq.n	8005614 <sbrk_aligned+0x38>
 8005604:	1a21      	subs	r1, r4, r0
 8005606:	4628      	mov	r0, r5
 8005608:	f000 f9cc 	bl	80059a4 <_sbrk_r>
 800560c:	3001      	adds	r0, #1
 800560e:	d101      	bne.n	8005614 <sbrk_aligned+0x38>
 8005610:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005614:	4620      	mov	r0, r4
 8005616:	bd70      	pop	{r4, r5, r6, pc}
 8005618:	200001dc 	.word	0x200001dc

0800561c <_malloc_r>:
 800561c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005620:	1ccd      	adds	r5, r1, #3
 8005622:	f025 0503 	bic.w	r5, r5, #3
 8005626:	3508      	adds	r5, #8
 8005628:	2d0c      	cmp	r5, #12
 800562a:	bf38      	it	cc
 800562c:	250c      	movcc	r5, #12
 800562e:	2d00      	cmp	r5, #0
 8005630:	4607      	mov	r7, r0
 8005632:	db01      	blt.n	8005638 <_malloc_r+0x1c>
 8005634:	42a9      	cmp	r1, r5
 8005636:	d905      	bls.n	8005644 <_malloc_r+0x28>
 8005638:	230c      	movs	r3, #12
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	2600      	movs	r6, #0
 800563e:	4630      	mov	r0, r6
 8005640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005644:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005718 <_malloc_r+0xfc>
 8005648:	f000 f868 	bl	800571c <__malloc_lock>
 800564c:	f8d8 3000 	ldr.w	r3, [r8]
 8005650:	461c      	mov	r4, r3
 8005652:	bb5c      	cbnz	r4, 80056ac <_malloc_r+0x90>
 8005654:	4629      	mov	r1, r5
 8005656:	4638      	mov	r0, r7
 8005658:	f7ff ffc0 	bl	80055dc <sbrk_aligned>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	4604      	mov	r4, r0
 8005660:	d155      	bne.n	800570e <_malloc_r+0xf2>
 8005662:	f8d8 4000 	ldr.w	r4, [r8]
 8005666:	4626      	mov	r6, r4
 8005668:	2e00      	cmp	r6, #0
 800566a:	d145      	bne.n	80056f8 <_malloc_r+0xdc>
 800566c:	2c00      	cmp	r4, #0
 800566e:	d048      	beq.n	8005702 <_malloc_r+0xe6>
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	4631      	mov	r1, r6
 8005674:	4638      	mov	r0, r7
 8005676:	eb04 0903 	add.w	r9, r4, r3
 800567a:	f000 f993 	bl	80059a4 <_sbrk_r>
 800567e:	4581      	cmp	r9, r0
 8005680:	d13f      	bne.n	8005702 <_malloc_r+0xe6>
 8005682:	6821      	ldr	r1, [r4, #0]
 8005684:	1a6d      	subs	r5, r5, r1
 8005686:	4629      	mov	r1, r5
 8005688:	4638      	mov	r0, r7
 800568a:	f7ff ffa7 	bl	80055dc <sbrk_aligned>
 800568e:	3001      	adds	r0, #1
 8005690:	d037      	beq.n	8005702 <_malloc_r+0xe6>
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	442b      	add	r3, r5
 8005696:	6023      	str	r3, [r4, #0]
 8005698:	f8d8 3000 	ldr.w	r3, [r8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d038      	beq.n	8005712 <_malloc_r+0xf6>
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	42a2      	cmp	r2, r4
 80056a4:	d12b      	bne.n	80056fe <_malloc_r+0xe2>
 80056a6:	2200      	movs	r2, #0
 80056a8:	605a      	str	r2, [r3, #4]
 80056aa:	e00f      	b.n	80056cc <_malloc_r+0xb0>
 80056ac:	6822      	ldr	r2, [r4, #0]
 80056ae:	1b52      	subs	r2, r2, r5
 80056b0:	d41f      	bmi.n	80056f2 <_malloc_r+0xd6>
 80056b2:	2a0b      	cmp	r2, #11
 80056b4:	d917      	bls.n	80056e6 <_malloc_r+0xca>
 80056b6:	1961      	adds	r1, r4, r5
 80056b8:	42a3      	cmp	r3, r4
 80056ba:	6025      	str	r5, [r4, #0]
 80056bc:	bf18      	it	ne
 80056be:	6059      	strne	r1, [r3, #4]
 80056c0:	6863      	ldr	r3, [r4, #4]
 80056c2:	bf08      	it	eq
 80056c4:	f8c8 1000 	streq.w	r1, [r8]
 80056c8:	5162      	str	r2, [r4, r5]
 80056ca:	604b      	str	r3, [r1, #4]
 80056cc:	4638      	mov	r0, r7
 80056ce:	f104 060b 	add.w	r6, r4, #11
 80056d2:	f000 f829 	bl	8005728 <__malloc_unlock>
 80056d6:	f026 0607 	bic.w	r6, r6, #7
 80056da:	1d23      	adds	r3, r4, #4
 80056dc:	1af2      	subs	r2, r6, r3
 80056de:	d0ae      	beq.n	800563e <_malloc_r+0x22>
 80056e0:	1b9b      	subs	r3, r3, r6
 80056e2:	50a3      	str	r3, [r4, r2]
 80056e4:	e7ab      	b.n	800563e <_malloc_r+0x22>
 80056e6:	42a3      	cmp	r3, r4
 80056e8:	6862      	ldr	r2, [r4, #4]
 80056ea:	d1dd      	bne.n	80056a8 <_malloc_r+0x8c>
 80056ec:	f8c8 2000 	str.w	r2, [r8]
 80056f0:	e7ec      	b.n	80056cc <_malloc_r+0xb0>
 80056f2:	4623      	mov	r3, r4
 80056f4:	6864      	ldr	r4, [r4, #4]
 80056f6:	e7ac      	b.n	8005652 <_malloc_r+0x36>
 80056f8:	4634      	mov	r4, r6
 80056fa:	6876      	ldr	r6, [r6, #4]
 80056fc:	e7b4      	b.n	8005668 <_malloc_r+0x4c>
 80056fe:	4613      	mov	r3, r2
 8005700:	e7cc      	b.n	800569c <_malloc_r+0x80>
 8005702:	230c      	movs	r3, #12
 8005704:	603b      	str	r3, [r7, #0]
 8005706:	4638      	mov	r0, r7
 8005708:	f000 f80e 	bl	8005728 <__malloc_unlock>
 800570c:	e797      	b.n	800563e <_malloc_r+0x22>
 800570e:	6025      	str	r5, [r4, #0]
 8005710:	e7dc      	b.n	80056cc <_malloc_r+0xb0>
 8005712:	605b      	str	r3, [r3, #4]
 8005714:	deff      	udf	#255	; 0xff
 8005716:	bf00      	nop
 8005718:	200001d8 	.word	0x200001d8

0800571c <__malloc_lock>:
 800571c:	4801      	ldr	r0, [pc, #4]	; (8005724 <__malloc_lock+0x8>)
 800571e:	f000 b97c 	b.w	8005a1a <__retarget_lock_acquire_recursive>
 8005722:	bf00      	nop
 8005724:	2000031c 	.word	0x2000031c

08005728 <__malloc_unlock>:
 8005728:	4801      	ldr	r0, [pc, #4]	; (8005730 <__malloc_unlock+0x8>)
 800572a:	f000 b977 	b.w	8005a1c <__retarget_lock_release_recursive>
 800572e:	bf00      	nop
 8005730:	2000031c 	.word	0x2000031c

08005734 <std>:
 8005734:	2300      	movs	r3, #0
 8005736:	b510      	push	{r4, lr}
 8005738:	4604      	mov	r4, r0
 800573a:	e9c0 3300 	strd	r3, r3, [r0]
 800573e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005742:	6083      	str	r3, [r0, #8]
 8005744:	8181      	strh	r1, [r0, #12]
 8005746:	6643      	str	r3, [r0, #100]	; 0x64
 8005748:	81c2      	strh	r2, [r0, #14]
 800574a:	6183      	str	r3, [r0, #24]
 800574c:	4619      	mov	r1, r3
 800574e:	2208      	movs	r2, #8
 8005750:	305c      	adds	r0, #92	; 0x5c
 8005752:	f000 f91f 	bl	8005994 <memset>
 8005756:	4b0d      	ldr	r3, [pc, #52]	; (800578c <std+0x58>)
 8005758:	6263      	str	r3, [r4, #36]	; 0x24
 800575a:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <std+0x5c>)
 800575c:	62a3      	str	r3, [r4, #40]	; 0x28
 800575e:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <std+0x60>)
 8005760:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005762:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <std+0x64>)
 8005764:	6323      	str	r3, [r4, #48]	; 0x30
 8005766:	4b0d      	ldr	r3, [pc, #52]	; (800579c <std+0x68>)
 8005768:	6224      	str	r4, [r4, #32]
 800576a:	429c      	cmp	r4, r3
 800576c:	d006      	beq.n	800577c <std+0x48>
 800576e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005772:	4294      	cmp	r4, r2
 8005774:	d002      	beq.n	800577c <std+0x48>
 8005776:	33d0      	adds	r3, #208	; 0xd0
 8005778:	429c      	cmp	r4, r3
 800577a:	d105      	bne.n	8005788 <std+0x54>
 800577c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005784:	f000 b948 	b.w	8005a18 <__retarget_lock_init_recursive>
 8005788:	bd10      	pop	{r4, pc}
 800578a:	bf00      	nop
 800578c:	080061bd 	.word	0x080061bd
 8005790:	080061df 	.word	0x080061df
 8005794:	08006217 	.word	0x08006217
 8005798:	0800623b 	.word	0x0800623b
 800579c:	200001e0 	.word	0x200001e0

080057a0 <stdio_exit_handler>:
 80057a0:	4a02      	ldr	r2, [pc, #8]	; (80057ac <stdio_exit_handler+0xc>)
 80057a2:	4903      	ldr	r1, [pc, #12]	; (80057b0 <stdio_exit_handler+0x10>)
 80057a4:	4803      	ldr	r0, [pc, #12]	; (80057b4 <stdio_exit_handler+0x14>)
 80057a6:	f000 b869 	b.w	800587c <_fwalk_sglue>
 80057aa:	bf00      	nop
 80057ac:	2000000c 	.word	0x2000000c
 80057b0:	0800616d 	.word	0x0800616d
 80057b4:	20000018 	.word	0x20000018

080057b8 <cleanup_stdio>:
 80057b8:	6841      	ldr	r1, [r0, #4]
 80057ba:	4b0c      	ldr	r3, [pc, #48]	; (80057ec <cleanup_stdio+0x34>)
 80057bc:	4299      	cmp	r1, r3
 80057be:	b510      	push	{r4, lr}
 80057c0:	4604      	mov	r4, r0
 80057c2:	d001      	beq.n	80057c8 <cleanup_stdio+0x10>
 80057c4:	f000 fcd2 	bl	800616c <_fflush_r>
 80057c8:	68a1      	ldr	r1, [r4, #8]
 80057ca:	4b09      	ldr	r3, [pc, #36]	; (80057f0 <cleanup_stdio+0x38>)
 80057cc:	4299      	cmp	r1, r3
 80057ce:	d002      	beq.n	80057d6 <cleanup_stdio+0x1e>
 80057d0:	4620      	mov	r0, r4
 80057d2:	f000 fccb 	bl	800616c <_fflush_r>
 80057d6:	68e1      	ldr	r1, [r4, #12]
 80057d8:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <cleanup_stdio+0x3c>)
 80057da:	4299      	cmp	r1, r3
 80057dc:	d004      	beq.n	80057e8 <cleanup_stdio+0x30>
 80057de:	4620      	mov	r0, r4
 80057e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057e4:	f000 bcc2 	b.w	800616c <_fflush_r>
 80057e8:	bd10      	pop	{r4, pc}
 80057ea:	bf00      	nop
 80057ec:	200001e0 	.word	0x200001e0
 80057f0:	20000248 	.word	0x20000248
 80057f4:	200002b0 	.word	0x200002b0

080057f8 <global_stdio_init.part.0>:
 80057f8:	b510      	push	{r4, lr}
 80057fa:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <global_stdio_init.part.0+0x30>)
 80057fc:	4c0b      	ldr	r4, [pc, #44]	; (800582c <global_stdio_init.part.0+0x34>)
 80057fe:	4a0c      	ldr	r2, [pc, #48]	; (8005830 <global_stdio_init.part.0+0x38>)
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	4620      	mov	r0, r4
 8005804:	2200      	movs	r2, #0
 8005806:	2104      	movs	r1, #4
 8005808:	f7ff ff94 	bl	8005734 <std>
 800580c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005810:	2201      	movs	r2, #1
 8005812:	2109      	movs	r1, #9
 8005814:	f7ff ff8e 	bl	8005734 <std>
 8005818:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800581c:	2202      	movs	r2, #2
 800581e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005822:	2112      	movs	r1, #18
 8005824:	f7ff bf86 	b.w	8005734 <std>
 8005828:	20000318 	.word	0x20000318
 800582c:	200001e0 	.word	0x200001e0
 8005830:	080057a1 	.word	0x080057a1

08005834 <__sfp_lock_acquire>:
 8005834:	4801      	ldr	r0, [pc, #4]	; (800583c <__sfp_lock_acquire+0x8>)
 8005836:	f000 b8f0 	b.w	8005a1a <__retarget_lock_acquire_recursive>
 800583a:	bf00      	nop
 800583c:	2000031d 	.word	0x2000031d

08005840 <__sfp_lock_release>:
 8005840:	4801      	ldr	r0, [pc, #4]	; (8005848 <__sfp_lock_release+0x8>)
 8005842:	f000 b8eb 	b.w	8005a1c <__retarget_lock_release_recursive>
 8005846:	bf00      	nop
 8005848:	2000031d 	.word	0x2000031d

0800584c <__sinit>:
 800584c:	b510      	push	{r4, lr}
 800584e:	4604      	mov	r4, r0
 8005850:	f7ff fff0 	bl	8005834 <__sfp_lock_acquire>
 8005854:	6a23      	ldr	r3, [r4, #32]
 8005856:	b11b      	cbz	r3, 8005860 <__sinit+0x14>
 8005858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800585c:	f7ff bff0 	b.w	8005840 <__sfp_lock_release>
 8005860:	4b04      	ldr	r3, [pc, #16]	; (8005874 <__sinit+0x28>)
 8005862:	6223      	str	r3, [r4, #32]
 8005864:	4b04      	ldr	r3, [pc, #16]	; (8005878 <__sinit+0x2c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1f5      	bne.n	8005858 <__sinit+0xc>
 800586c:	f7ff ffc4 	bl	80057f8 <global_stdio_init.part.0>
 8005870:	e7f2      	b.n	8005858 <__sinit+0xc>
 8005872:	bf00      	nop
 8005874:	080057b9 	.word	0x080057b9
 8005878:	20000318 	.word	0x20000318

0800587c <_fwalk_sglue>:
 800587c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005880:	4607      	mov	r7, r0
 8005882:	4688      	mov	r8, r1
 8005884:	4614      	mov	r4, r2
 8005886:	2600      	movs	r6, #0
 8005888:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800588c:	f1b9 0901 	subs.w	r9, r9, #1
 8005890:	d505      	bpl.n	800589e <_fwalk_sglue+0x22>
 8005892:	6824      	ldr	r4, [r4, #0]
 8005894:	2c00      	cmp	r4, #0
 8005896:	d1f7      	bne.n	8005888 <_fwalk_sglue+0xc>
 8005898:	4630      	mov	r0, r6
 800589a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800589e:	89ab      	ldrh	r3, [r5, #12]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d907      	bls.n	80058b4 <_fwalk_sglue+0x38>
 80058a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058a8:	3301      	adds	r3, #1
 80058aa:	d003      	beq.n	80058b4 <_fwalk_sglue+0x38>
 80058ac:	4629      	mov	r1, r5
 80058ae:	4638      	mov	r0, r7
 80058b0:	47c0      	blx	r8
 80058b2:	4306      	orrs	r6, r0
 80058b4:	3568      	adds	r5, #104	; 0x68
 80058b6:	e7e9      	b.n	800588c <_fwalk_sglue+0x10>

080058b8 <iprintf>:
 80058b8:	b40f      	push	{r0, r1, r2, r3}
 80058ba:	b507      	push	{r0, r1, r2, lr}
 80058bc:	4906      	ldr	r1, [pc, #24]	; (80058d8 <iprintf+0x20>)
 80058be:	ab04      	add	r3, sp, #16
 80058c0:	6808      	ldr	r0, [r1, #0]
 80058c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80058c6:	6881      	ldr	r1, [r0, #8]
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	f000 f91f 	bl	8005b0c <_vfiprintf_r>
 80058ce:	b003      	add	sp, #12
 80058d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80058d4:	b004      	add	sp, #16
 80058d6:	4770      	bx	lr
 80058d8:	20000064 	.word	0x20000064

080058dc <_puts_r>:
 80058dc:	6a03      	ldr	r3, [r0, #32]
 80058de:	b570      	push	{r4, r5, r6, lr}
 80058e0:	6884      	ldr	r4, [r0, #8]
 80058e2:	4605      	mov	r5, r0
 80058e4:	460e      	mov	r6, r1
 80058e6:	b90b      	cbnz	r3, 80058ec <_puts_r+0x10>
 80058e8:	f7ff ffb0 	bl	800584c <__sinit>
 80058ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058ee:	07db      	lsls	r3, r3, #31
 80058f0:	d405      	bmi.n	80058fe <_puts_r+0x22>
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	0598      	lsls	r0, r3, #22
 80058f6:	d402      	bmi.n	80058fe <_puts_r+0x22>
 80058f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058fa:	f000 f88e 	bl	8005a1a <__retarget_lock_acquire_recursive>
 80058fe:	89a3      	ldrh	r3, [r4, #12]
 8005900:	0719      	lsls	r1, r3, #28
 8005902:	d513      	bpl.n	800592c <_puts_r+0x50>
 8005904:	6923      	ldr	r3, [r4, #16]
 8005906:	b18b      	cbz	r3, 800592c <_puts_r+0x50>
 8005908:	3e01      	subs	r6, #1
 800590a:	68a3      	ldr	r3, [r4, #8]
 800590c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005910:	3b01      	subs	r3, #1
 8005912:	60a3      	str	r3, [r4, #8]
 8005914:	b9e9      	cbnz	r1, 8005952 <_puts_r+0x76>
 8005916:	2b00      	cmp	r3, #0
 8005918:	da2e      	bge.n	8005978 <_puts_r+0x9c>
 800591a:	4622      	mov	r2, r4
 800591c:	210a      	movs	r1, #10
 800591e:	4628      	mov	r0, r5
 8005920:	f000 fc8f 	bl	8006242 <__swbuf_r>
 8005924:	3001      	adds	r0, #1
 8005926:	d007      	beq.n	8005938 <_puts_r+0x5c>
 8005928:	250a      	movs	r5, #10
 800592a:	e007      	b.n	800593c <_puts_r+0x60>
 800592c:	4621      	mov	r1, r4
 800592e:	4628      	mov	r0, r5
 8005930:	f000 fcc4 	bl	80062bc <__swsetup_r>
 8005934:	2800      	cmp	r0, #0
 8005936:	d0e7      	beq.n	8005908 <_puts_r+0x2c>
 8005938:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800593c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800593e:	07da      	lsls	r2, r3, #31
 8005940:	d405      	bmi.n	800594e <_puts_r+0x72>
 8005942:	89a3      	ldrh	r3, [r4, #12]
 8005944:	059b      	lsls	r3, r3, #22
 8005946:	d402      	bmi.n	800594e <_puts_r+0x72>
 8005948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800594a:	f000 f867 	bl	8005a1c <__retarget_lock_release_recursive>
 800594e:	4628      	mov	r0, r5
 8005950:	bd70      	pop	{r4, r5, r6, pc}
 8005952:	2b00      	cmp	r3, #0
 8005954:	da04      	bge.n	8005960 <_puts_r+0x84>
 8005956:	69a2      	ldr	r2, [r4, #24]
 8005958:	429a      	cmp	r2, r3
 800595a:	dc06      	bgt.n	800596a <_puts_r+0x8e>
 800595c:	290a      	cmp	r1, #10
 800595e:	d004      	beq.n	800596a <_puts_r+0x8e>
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	6022      	str	r2, [r4, #0]
 8005966:	7019      	strb	r1, [r3, #0]
 8005968:	e7cf      	b.n	800590a <_puts_r+0x2e>
 800596a:	4622      	mov	r2, r4
 800596c:	4628      	mov	r0, r5
 800596e:	f000 fc68 	bl	8006242 <__swbuf_r>
 8005972:	3001      	adds	r0, #1
 8005974:	d1c9      	bne.n	800590a <_puts_r+0x2e>
 8005976:	e7df      	b.n	8005938 <_puts_r+0x5c>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	250a      	movs	r5, #10
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	6022      	str	r2, [r4, #0]
 8005980:	701d      	strb	r5, [r3, #0]
 8005982:	e7db      	b.n	800593c <_puts_r+0x60>

08005984 <puts>:
 8005984:	4b02      	ldr	r3, [pc, #8]	; (8005990 <puts+0xc>)
 8005986:	4601      	mov	r1, r0
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	f7ff bfa7 	b.w	80058dc <_puts_r>
 800598e:	bf00      	nop
 8005990:	20000064 	.word	0x20000064

08005994 <memset>:
 8005994:	4402      	add	r2, r0
 8005996:	4603      	mov	r3, r0
 8005998:	4293      	cmp	r3, r2
 800599a:	d100      	bne.n	800599e <memset+0xa>
 800599c:	4770      	bx	lr
 800599e:	f803 1b01 	strb.w	r1, [r3], #1
 80059a2:	e7f9      	b.n	8005998 <memset+0x4>

080059a4 <_sbrk_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4d06      	ldr	r5, [pc, #24]	; (80059c0 <_sbrk_r+0x1c>)
 80059a8:	2300      	movs	r3, #0
 80059aa:	4604      	mov	r4, r0
 80059ac:	4608      	mov	r0, r1
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	f7fb f950 	bl	8000c54 <_sbrk>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d102      	bne.n	80059be <_sbrk_r+0x1a>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	b103      	cbz	r3, 80059be <_sbrk_r+0x1a>
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	20000320 	.word	0x20000320

080059c4 <__errno>:
 80059c4:	4b01      	ldr	r3, [pc, #4]	; (80059cc <__errno+0x8>)
 80059c6:	6818      	ldr	r0, [r3, #0]
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	20000064 	.word	0x20000064

080059d0 <__libc_init_array>:
 80059d0:	b570      	push	{r4, r5, r6, lr}
 80059d2:	4d0d      	ldr	r5, [pc, #52]	; (8005a08 <__libc_init_array+0x38>)
 80059d4:	4c0d      	ldr	r4, [pc, #52]	; (8005a0c <__libc_init_array+0x3c>)
 80059d6:	1b64      	subs	r4, r4, r5
 80059d8:	10a4      	asrs	r4, r4, #2
 80059da:	2600      	movs	r6, #0
 80059dc:	42a6      	cmp	r6, r4
 80059de:	d109      	bne.n	80059f4 <__libc_init_array+0x24>
 80059e0:	4d0b      	ldr	r5, [pc, #44]	; (8005a10 <__libc_init_array+0x40>)
 80059e2:	4c0c      	ldr	r4, [pc, #48]	; (8005a14 <__libc_init_array+0x44>)
 80059e4:	f000 fd8c 	bl	8006500 <_init>
 80059e8:	1b64      	subs	r4, r4, r5
 80059ea:	10a4      	asrs	r4, r4, #2
 80059ec:	2600      	movs	r6, #0
 80059ee:	42a6      	cmp	r6, r4
 80059f0:	d105      	bne.n	80059fe <__libc_init_array+0x2e>
 80059f2:	bd70      	pop	{r4, r5, r6, pc}
 80059f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f8:	4798      	blx	r3
 80059fa:	3601      	adds	r6, #1
 80059fc:	e7ee      	b.n	80059dc <__libc_init_array+0xc>
 80059fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a02:	4798      	blx	r3
 8005a04:	3601      	adds	r6, #1
 8005a06:	e7f2      	b.n	80059ee <__libc_init_array+0x1e>
 8005a08:	080065a4 	.word	0x080065a4
 8005a0c:	080065a4 	.word	0x080065a4
 8005a10:	080065a4 	.word	0x080065a4
 8005a14:	080065a8 	.word	0x080065a8

08005a18 <__retarget_lock_init_recursive>:
 8005a18:	4770      	bx	lr

08005a1a <__retarget_lock_acquire_recursive>:
 8005a1a:	4770      	bx	lr

08005a1c <__retarget_lock_release_recursive>:
 8005a1c:	4770      	bx	lr
	...

08005a20 <_free_r>:
 8005a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a22:	2900      	cmp	r1, #0
 8005a24:	d044      	beq.n	8005ab0 <_free_r+0x90>
 8005a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a2a:	9001      	str	r0, [sp, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a32:	bfb8      	it	lt
 8005a34:	18e4      	addlt	r4, r4, r3
 8005a36:	f7ff fe71 	bl	800571c <__malloc_lock>
 8005a3a:	4a1e      	ldr	r2, [pc, #120]	; (8005ab4 <_free_r+0x94>)
 8005a3c:	9801      	ldr	r0, [sp, #4]
 8005a3e:	6813      	ldr	r3, [r2, #0]
 8005a40:	b933      	cbnz	r3, 8005a50 <_free_r+0x30>
 8005a42:	6063      	str	r3, [r4, #4]
 8005a44:	6014      	str	r4, [r2, #0]
 8005a46:	b003      	add	sp, #12
 8005a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a4c:	f7ff be6c 	b.w	8005728 <__malloc_unlock>
 8005a50:	42a3      	cmp	r3, r4
 8005a52:	d908      	bls.n	8005a66 <_free_r+0x46>
 8005a54:	6825      	ldr	r5, [r4, #0]
 8005a56:	1961      	adds	r1, r4, r5
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	bf01      	itttt	eq
 8005a5c:	6819      	ldreq	r1, [r3, #0]
 8005a5e:	685b      	ldreq	r3, [r3, #4]
 8005a60:	1949      	addeq	r1, r1, r5
 8005a62:	6021      	streq	r1, [r4, #0]
 8005a64:	e7ed      	b.n	8005a42 <_free_r+0x22>
 8005a66:	461a      	mov	r2, r3
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	b10b      	cbz	r3, 8005a70 <_free_r+0x50>
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	d9fa      	bls.n	8005a66 <_free_r+0x46>
 8005a70:	6811      	ldr	r1, [r2, #0]
 8005a72:	1855      	adds	r5, r2, r1
 8005a74:	42a5      	cmp	r5, r4
 8005a76:	d10b      	bne.n	8005a90 <_free_r+0x70>
 8005a78:	6824      	ldr	r4, [r4, #0]
 8005a7a:	4421      	add	r1, r4
 8005a7c:	1854      	adds	r4, r2, r1
 8005a7e:	42a3      	cmp	r3, r4
 8005a80:	6011      	str	r1, [r2, #0]
 8005a82:	d1e0      	bne.n	8005a46 <_free_r+0x26>
 8005a84:	681c      	ldr	r4, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	6053      	str	r3, [r2, #4]
 8005a8a:	440c      	add	r4, r1
 8005a8c:	6014      	str	r4, [r2, #0]
 8005a8e:	e7da      	b.n	8005a46 <_free_r+0x26>
 8005a90:	d902      	bls.n	8005a98 <_free_r+0x78>
 8005a92:	230c      	movs	r3, #12
 8005a94:	6003      	str	r3, [r0, #0]
 8005a96:	e7d6      	b.n	8005a46 <_free_r+0x26>
 8005a98:	6825      	ldr	r5, [r4, #0]
 8005a9a:	1961      	adds	r1, r4, r5
 8005a9c:	428b      	cmp	r3, r1
 8005a9e:	bf04      	itt	eq
 8005aa0:	6819      	ldreq	r1, [r3, #0]
 8005aa2:	685b      	ldreq	r3, [r3, #4]
 8005aa4:	6063      	str	r3, [r4, #4]
 8005aa6:	bf04      	itt	eq
 8005aa8:	1949      	addeq	r1, r1, r5
 8005aaa:	6021      	streq	r1, [r4, #0]
 8005aac:	6054      	str	r4, [r2, #4]
 8005aae:	e7ca      	b.n	8005a46 <_free_r+0x26>
 8005ab0:	b003      	add	sp, #12
 8005ab2:	bd30      	pop	{r4, r5, pc}
 8005ab4:	200001d8 	.word	0x200001d8

08005ab8 <__sfputc_r>:
 8005ab8:	6893      	ldr	r3, [r2, #8]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	b410      	push	{r4}
 8005ac0:	6093      	str	r3, [r2, #8]
 8005ac2:	da08      	bge.n	8005ad6 <__sfputc_r+0x1e>
 8005ac4:	6994      	ldr	r4, [r2, #24]
 8005ac6:	42a3      	cmp	r3, r4
 8005ac8:	db01      	blt.n	8005ace <__sfputc_r+0x16>
 8005aca:	290a      	cmp	r1, #10
 8005acc:	d103      	bne.n	8005ad6 <__sfputc_r+0x1e>
 8005ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ad2:	f000 bbb6 	b.w	8006242 <__swbuf_r>
 8005ad6:	6813      	ldr	r3, [r2, #0]
 8005ad8:	1c58      	adds	r0, r3, #1
 8005ada:	6010      	str	r0, [r2, #0]
 8005adc:	7019      	strb	r1, [r3, #0]
 8005ade:	4608      	mov	r0, r1
 8005ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <__sfputs_r>:
 8005ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae8:	4606      	mov	r6, r0
 8005aea:	460f      	mov	r7, r1
 8005aec:	4614      	mov	r4, r2
 8005aee:	18d5      	adds	r5, r2, r3
 8005af0:	42ac      	cmp	r4, r5
 8005af2:	d101      	bne.n	8005af8 <__sfputs_r+0x12>
 8005af4:	2000      	movs	r0, #0
 8005af6:	e007      	b.n	8005b08 <__sfputs_r+0x22>
 8005af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005afc:	463a      	mov	r2, r7
 8005afe:	4630      	mov	r0, r6
 8005b00:	f7ff ffda 	bl	8005ab8 <__sfputc_r>
 8005b04:	1c43      	adds	r3, r0, #1
 8005b06:	d1f3      	bne.n	8005af0 <__sfputs_r+0xa>
 8005b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b0c <_vfiprintf_r>:
 8005b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	460d      	mov	r5, r1
 8005b12:	b09d      	sub	sp, #116	; 0x74
 8005b14:	4614      	mov	r4, r2
 8005b16:	4698      	mov	r8, r3
 8005b18:	4606      	mov	r6, r0
 8005b1a:	b118      	cbz	r0, 8005b24 <_vfiprintf_r+0x18>
 8005b1c:	6a03      	ldr	r3, [r0, #32]
 8005b1e:	b90b      	cbnz	r3, 8005b24 <_vfiprintf_r+0x18>
 8005b20:	f7ff fe94 	bl	800584c <__sinit>
 8005b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b26:	07d9      	lsls	r1, r3, #31
 8005b28:	d405      	bmi.n	8005b36 <_vfiprintf_r+0x2a>
 8005b2a:	89ab      	ldrh	r3, [r5, #12]
 8005b2c:	059a      	lsls	r2, r3, #22
 8005b2e:	d402      	bmi.n	8005b36 <_vfiprintf_r+0x2a>
 8005b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b32:	f7ff ff72 	bl	8005a1a <__retarget_lock_acquire_recursive>
 8005b36:	89ab      	ldrh	r3, [r5, #12]
 8005b38:	071b      	lsls	r3, r3, #28
 8005b3a:	d501      	bpl.n	8005b40 <_vfiprintf_r+0x34>
 8005b3c:	692b      	ldr	r3, [r5, #16]
 8005b3e:	b99b      	cbnz	r3, 8005b68 <_vfiprintf_r+0x5c>
 8005b40:	4629      	mov	r1, r5
 8005b42:	4630      	mov	r0, r6
 8005b44:	f000 fbba 	bl	80062bc <__swsetup_r>
 8005b48:	b170      	cbz	r0, 8005b68 <_vfiprintf_r+0x5c>
 8005b4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b4c:	07dc      	lsls	r4, r3, #31
 8005b4e:	d504      	bpl.n	8005b5a <_vfiprintf_r+0x4e>
 8005b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b54:	b01d      	add	sp, #116	; 0x74
 8005b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5a:	89ab      	ldrh	r3, [r5, #12]
 8005b5c:	0598      	lsls	r0, r3, #22
 8005b5e:	d4f7      	bmi.n	8005b50 <_vfiprintf_r+0x44>
 8005b60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b62:	f7ff ff5b 	bl	8005a1c <__retarget_lock_release_recursive>
 8005b66:	e7f3      	b.n	8005b50 <_vfiprintf_r+0x44>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b6c:	2320      	movs	r3, #32
 8005b6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b76:	2330      	movs	r3, #48	; 0x30
 8005b78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005d2c <_vfiprintf_r+0x220>
 8005b7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b80:	f04f 0901 	mov.w	r9, #1
 8005b84:	4623      	mov	r3, r4
 8005b86:	469a      	mov	sl, r3
 8005b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b8c:	b10a      	cbz	r2, 8005b92 <_vfiprintf_r+0x86>
 8005b8e:	2a25      	cmp	r2, #37	; 0x25
 8005b90:	d1f9      	bne.n	8005b86 <_vfiprintf_r+0x7a>
 8005b92:	ebba 0b04 	subs.w	fp, sl, r4
 8005b96:	d00b      	beq.n	8005bb0 <_vfiprintf_r+0xa4>
 8005b98:	465b      	mov	r3, fp
 8005b9a:	4622      	mov	r2, r4
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	f7ff ffa1 	bl	8005ae6 <__sfputs_r>
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	f000 80a9 	beq.w	8005cfc <_vfiprintf_r+0x1f0>
 8005baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bac:	445a      	add	r2, fp
 8005bae:	9209      	str	r2, [sp, #36]	; 0x24
 8005bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 80a1 	beq.w	8005cfc <_vfiprintf_r+0x1f0>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bc4:	f10a 0a01 	add.w	sl, sl, #1
 8005bc8:	9304      	str	r3, [sp, #16]
 8005bca:	9307      	str	r3, [sp, #28]
 8005bcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bd0:	931a      	str	r3, [sp, #104]	; 0x68
 8005bd2:	4654      	mov	r4, sl
 8005bd4:	2205      	movs	r2, #5
 8005bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bda:	4854      	ldr	r0, [pc, #336]	; (8005d2c <_vfiprintf_r+0x220>)
 8005bdc:	f7fa fb20 	bl	8000220 <memchr>
 8005be0:	9a04      	ldr	r2, [sp, #16]
 8005be2:	b9d8      	cbnz	r0, 8005c1c <_vfiprintf_r+0x110>
 8005be4:	06d1      	lsls	r1, r2, #27
 8005be6:	bf44      	itt	mi
 8005be8:	2320      	movmi	r3, #32
 8005bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bee:	0713      	lsls	r3, r2, #28
 8005bf0:	bf44      	itt	mi
 8005bf2:	232b      	movmi	r3, #43	; 0x2b
 8005bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8005bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8005bfe:	d015      	beq.n	8005c2c <_vfiprintf_r+0x120>
 8005c00:	9a07      	ldr	r2, [sp, #28]
 8005c02:	4654      	mov	r4, sl
 8005c04:	2000      	movs	r0, #0
 8005c06:	f04f 0c0a 	mov.w	ip, #10
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c10:	3b30      	subs	r3, #48	; 0x30
 8005c12:	2b09      	cmp	r3, #9
 8005c14:	d94d      	bls.n	8005cb2 <_vfiprintf_r+0x1a6>
 8005c16:	b1b0      	cbz	r0, 8005c46 <_vfiprintf_r+0x13a>
 8005c18:	9207      	str	r2, [sp, #28]
 8005c1a:	e014      	b.n	8005c46 <_vfiprintf_r+0x13a>
 8005c1c:	eba0 0308 	sub.w	r3, r0, r8
 8005c20:	fa09 f303 	lsl.w	r3, r9, r3
 8005c24:	4313      	orrs	r3, r2
 8005c26:	9304      	str	r3, [sp, #16]
 8005c28:	46a2      	mov	sl, r4
 8005c2a:	e7d2      	b.n	8005bd2 <_vfiprintf_r+0xc6>
 8005c2c:	9b03      	ldr	r3, [sp, #12]
 8005c2e:	1d19      	adds	r1, r3, #4
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	9103      	str	r1, [sp, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	bfbb      	ittet	lt
 8005c38:	425b      	neglt	r3, r3
 8005c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8005c3e:	9307      	strge	r3, [sp, #28]
 8005c40:	9307      	strlt	r3, [sp, #28]
 8005c42:	bfb8      	it	lt
 8005c44:	9204      	strlt	r2, [sp, #16]
 8005c46:	7823      	ldrb	r3, [r4, #0]
 8005c48:	2b2e      	cmp	r3, #46	; 0x2e
 8005c4a:	d10c      	bne.n	8005c66 <_vfiprintf_r+0x15a>
 8005c4c:	7863      	ldrb	r3, [r4, #1]
 8005c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c50:	d134      	bne.n	8005cbc <_vfiprintf_r+0x1b0>
 8005c52:	9b03      	ldr	r3, [sp, #12]
 8005c54:	1d1a      	adds	r2, r3, #4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	9203      	str	r2, [sp, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	bfb8      	it	lt
 8005c5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005c62:	3402      	adds	r4, #2
 8005c64:	9305      	str	r3, [sp, #20]
 8005c66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005d3c <_vfiprintf_r+0x230>
 8005c6a:	7821      	ldrb	r1, [r4, #0]
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	4650      	mov	r0, sl
 8005c70:	f7fa fad6 	bl	8000220 <memchr>
 8005c74:	b138      	cbz	r0, 8005c86 <_vfiprintf_r+0x17a>
 8005c76:	9b04      	ldr	r3, [sp, #16]
 8005c78:	eba0 000a 	sub.w	r0, r0, sl
 8005c7c:	2240      	movs	r2, #64	; 0x40
 8005c7e:	4082      	lsls	r2, r0
 8005c80:	4313      	orrs	r3, r2
 8005c82:	3401      	adds	r4, #1
 8005c84:	9304      	str	r3, [sp, #16]
 8005c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c8a:	4829      	ldr	r0, [pc, #164]	; (8005d30 <_vfiprintf_r+0x224>)
 8005c8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c90:	2206      	movs	r2, #6
 8005c92:	f7fa fac5 	bl	8000220 <memchr>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	d03f      	beq.n	8005d1a <_vfiprintf_r+0x20e>
 8005c9a:	4b26      	ldr	r3, [pc, #152]	; (8005d34 <_vfiprintf_r+0x228>)
 8005c9c:	bb1b      	cbnz	r3, 8005ce6 <_vfiprintf_r+0x1da>
 8005c9e:	9b03      	ldr	r3, [sp, #12]
 8005ca0:	3307      	adds	r3, #7
 8005ca2:	f023 0307 	bic.w	r3, r3, #7
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	9303      	str	r3, [sp, #12]
 8005caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cac:	443b      	add	r3, r7
 8005cae:	9309      	str	r3, [sp, #36]	; 0x24
 8005cb0:	e768      	b.n	8005b84 <_vfiprintf_r+0x78>
 8005cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	2001      	movs	r0, #1
 8005cba:	e7a6      	b.n	8005c0a <_vfiprintf_r+0xfe>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	3401      	adds	r4, #1
 8005cc0:	9305      	str	r3, [sp, #20]
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	f04f 0c0a 	mov.w	ip, #10
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cce:	3a30      	subs	r2, #48	; 0x30
 8005cd0:	2a09      	cmp	r2, #9
 8005cd2:	d903      	bls.n	8005cdc <_vfiprintf_r+0x1d0>
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0c6      	beq.n	8005c66 <_vfiprintf_r+0x15a>
 8005cd8:	9105      	str	r1, [sp, #20]
 8005cda:	e7c4      	b.n	8005c66 <_vfiprintf_r+0x15a>
 8005cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e7f0      	b.n	8005cc8 <_vfiprintf_r+0x1bc>
 8005ce6:	ab03      	add	r3, sp, #12
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	462a      	mov	r2, r5
 8005cec:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <_vfiprintf_r+0x22c>)
 8005cee:	a904      	add	r1, sp, #16
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	f3af 8000 	nop.w
 8005cf6:	4607      	mov	r7, r0
 8005cf8:	1c78      	adds	r0, r7, #1
 8005cfa:	d1d6      	bne.n	8005caa <_vfiprintf_r+0x19e>
 8005cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cfe:	07d9      	lsls	r1, r3, #31
 8005d00:	d405      	bmi.n	8005d0e <_vfiprintf_r+0x202>
 8005d02:	89ab      	ldrh	r3, [r5, #12]
 8005d04:	059a      	lsls	r2, r3, #22
 8005d06:	d402      	bmi.n	8005d0e <_vfiprintf_r+0x202>
 8005d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d0a:	f7ff fe87 	bl	8005a1c <__retarget_lock_release_recursive>
 8005d0e:	89ab      	ldrh	r3, [r5, #12]
 8005d10:	065b      	lsls	r3, r3, #25
 8005d12:	f53f af1d 	bmi.w	8005b50 <_vfiprintf_r+0x44>
 8005d16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d18:	e71c      	b.n	8005b54 <_vfiprintf_r+0x48>
 8005d1a:	ab03      	add	r3, sp, #12
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	462a      	mov	r2, r5
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <_vfiprintf_r+0x22c>)
 8005d22:	a904      	add	r1, sp, #16
 8005d24:	4630      	mov	r0, r6
 8005d26:	f000 f879 	bl	8005e1c <_printf_i>
 8005d2a:	e7e4      	b.n	8005cf6 <_vfiprintf_r+0x1ea>
 8005d2c:	08006568 	.word	0x08006568
 8005d30:	08006572 	.word	0x08006572
 8005d34:	00000000 	.word	0x00000000
 8005d38:	08005ae7 	.word	0x08005ae7
 8005d3c:	0800656e 	.word	0x0800656e

08005d40 <_printf_common>:
 8005d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d44:	4616      	mov	r6, r2
 8005d46:	4699      	mov	r9, r3
 8005d48:	688a      	ldr	r2, [r1, #8]
 8005d4a:	690b      	ldr	r3, [r1, #16]
 8005d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d50:	4293      	cmp	r3, r2
 8005d52:	bfb8      	it	lt
 8005d54:	4613      	movlt	r3, r2
 8005d56:	6033      	str	r3, [r6, #0]
 8005d58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d5c:	4607      	mov	r7, r0
 8005d5e:	460c      	mov	r4, r1
 8005d60:	b10a      	cbz	r2, 8005d66 <_printf_common+0x26>
 8005d62:	3301      	adds	r3, #1
 8005d64:	6033      	str	r3, [r6, #0]
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	0699      	lsls	r1, r3, #26
 8005d6a:	bf42      	ittt	mi
 8005d6c:	6833      	ldrmi	r3, [r6, #0]
 8005d6e:	3302      	addmi	r3, #2
 8005d70:	6033      	strmi	r3, [r6, #0]
 8005d72:	6825      	ldr	r5, [r4, #0]
 8005d74:	f015 0506 	ands.w	r5, r5, #6
 8005d78:	d106      	bne.n	8005d88 <_printf_common+0x48>
 8005d7a:	f104 0a19 	add.w	sl, r4, #25
 8005d7e:	68e3      	ldr	r3, [r4, #12]
 8005d80:	6832      	ldr	r2, [r6, #0]
 8005d82:	1a9b      	subs	r3, r3, r2
 8005d84:	42ab      	cmp	r3, r5
 8005d86:	dc26      	bgt.n	8005dd6 <_printf_common+0x96>
 8005d88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d8c:	1e13      	subs	r3, r2, #0
 8005d8e:	6822      	ldr	r2, [r4, #0]
 8005d90:	bf18      	it	ne
 8005d92:	2301      	movne	r3, #1
 8005d94:	0692      	lsls	r2, r2, #26
 8005d96:	d42b      	bmi.n	8005df0 <_printf_common+0xb0>
 8005d98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d9c:	4649      	mov	r1, r9
 8005d9e:	4638      	mov	r0, r7
 8005da0:	47c0      	blx	r8
 8005da2:	3001      	adds	r0, #1
 8005da4:	d01e      	beq.n	8005de4 <_printf_common+0xa4>
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	6922      	ldr	r2, [r4, #16]
 8005daa:	f003 0306 	and.w	r3, r3, #6
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	bf02      	ittt	eq
 8005db2:	68e5      	ldreq	r5, [r4, #12]
 8005db4:	6833      	ldreq	r3, [r6, #0]
 8005db6:	1aed      	subeq	r5, r5, r3
 8005db8:	68a3      	ldr	r3, [r4, #8]
 8005dba:	bf0c      	ite	eq
 8005dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dc0:	2500      	movne	r5, #0
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	bfc4      	itt	gt
 8005dc6:	1a9b      	subgt	r3, r3, r2
 8005dc8:	18ed      	addgt	r5, r5, r3
 8005dca:	2600      	movs	r6, #0
 8005dcc:	341a      	adds	r4, #26
 8005dce:	42b5      	cmp	r5, r6
 8005dd0:	d11a      	bne.n	8005e08 <_printf_common+0xc8>
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	e008      	b.n	8005de8 <_printf_common+0xa8>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	4652      	mov	r2, sl
 8005dda:	4649      	mov	r1, r9
 8005ddc:	4638      	mov	r0, r7
 8005dde:	47c0      	blx	r8
 8005de0:	3001      	adds	r0, #1
 8005de2:	d103      	bne.n	8005dec <_printf_common+0xac>
 8005de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dec:	3501      	adds	r5, #1
 8005dee:	e7c6      	b.n	8005d7e <_printf_common+0x3e>
 8005df0:	18e1      	adds	r1, r4, r3
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	2030      	movs	r0, #48	; 0x30
 8005df6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dfa:	4422      	add	r2, r4
 8005dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e04:	3302      	adds	r3, #2
 8005e06:	e7c7      	b.n	8005d98 <_printf_common+0x58>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	4649      	mov	r1, r9
 8005e0e:	4638      	mov	r0, r7
 8005e10:	47c0      	blx	r8
 8005e12:	3001      	adds	r0, #1
 8005e14:	d0e6      	beq.n	8005de4 <_printf_common+0xa4>
 8005e16:	3601      	adds	r6, #1
 8005e18:	e7d9      	b.n	8005dce <_printf_common+0x8e>
	...

08005e1c <_printf_i>:
 8005e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e20:	7e0f      	ldrb	r7, [r1, #24]
 8005e22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e24:	2f78      	cmp	r7, #120	; 0x78
 8005e26:	4691      	mov	r9, r2
 8005e28:	4680      	mov	r8, r0
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	469a      	mov	sl, r3
 8005e2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e32:	d807      	bhi.n	8005e44 <_printf_i+0x28>
 8005e34:	2f62      	cmp	r7, #98	; 0x62
 8005e36:	d80a      	bhi.n	8005e4e <_printf_i+0x32>
 8005e38:	2f00      	cmp	r7, #0
 8005e3a:	f000 80d4 	beq.w	8005fe6 <_printf_i+0x1ca>
 8005e3e:	2f58      	cmp	r7, #88	; 0x58
 8005e40:	f000 80c0 	beq.w	8005fc4 <_printf_i+0x1a8>
 8005e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e4c:	e03a      	b.n	8005ec4 <_printf_i+0xa8>
 8005e4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e52:	2b15      	cmp	r3, #21
 8005e54:	d8f6      	bhi.n	8005e44 <_printf_i+0x28>
 8005e56:	a101      	add	r1, pc, #4	; (adr r1, 8005e5c <_printf_i+0x40>)
 8005e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e5c:	08005eb5 	.word	0x08005eb5
 8005e60:	08005ec9 	.word	0x08005ec9
 8005e64:	08005e45 	.word	0x08005e45
 8005e68:	08005e45 	.word	0x08005e45
 8005e6c:	08005e45 	.word	0x08005e45
 8005e70:	08005e45 	.word	0x08005e45
 8005e74:	08005ec9 	.word	0x08005ec9
 8005e78:	08005e45 	.word	0x08005e45
 8005e7c:	08005e45 	.word	0x08005e45
 8005e80:	08005e45 	.word	0x08005e45
 8005e84:	08005e45 	.word	0x08005e45
 8005e88:	08005fcd 	.word	0x08005fcd
 8005e8c:	08005ef5 	.word	0x08005ef5
 8005e90:	08005f87 	.word	0x08005f87
 8005e94:	08005e45 	.word	0x08005e45
 8005e98:	08005e45 	.word	0x08005e45
 8005e9c:	08005fef 	.word	0x08005fef
 8005ea0:	08005e45 	.word	0x08005e45
 8005ea4:	08005ef5 	.word	0x08005ef5
 8005ea8:	08005e45 	.word	0x08005e45
 8005eac:	08005e45 	.word	0x08005e45
 8005eb0:	08005f8f 	.word	0x08005f8f
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	1d1a      	adds	r2, r3, #4
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	602a      	str	r2, [r5, #0]
 8005ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ec0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e09f      	b.n	8006008 <_printf_i+0x1ec>
 8005ec8:	6820      	ldr	r0, [r4, #0]
 8005eca:	682b      	ldr	r3, [r5, #0]
 8005ecc:	0607      	lsls	r7, r0, #24
 8005ece:	f103 0104 	add.w	r1, r3, #4
 8005ed2:	6029      	str	r1, [r5, #0]
 8005ed4:	d501      	bpl.n	8005eda <_printf_i+0xbe>
 8005ed6:	681e      	ldr	r6, [r3, #0]
 8005ed8:	e003      	b.n	8005ee2 <_printf_i+0xc6>
 8005eda:	0646      	lsls	r6, r0, #25
 8005edc:	d5fb      	bpl.n	8005ed6 <_printf_i+0xba>
 8005ede:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005ee2:	2e00      	cmp	r6, #0
 8005ee4:	da03      	bge.n	8005eee <_printf_i+0xd2>
 8005ee6:	232d      	movs	r3, #45	; 0x2d
 8005ee8:	4276      	negs	r6, r6
 8005eea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eee:	485a      	ldr	r0, [pc, #360]	; (8006058 <_printf_i+0x23c>)
 8005ef0:	230a      	movs	r3, #10
 8005ef2:	e012      	b.n	8005f1a <_printf_i+0xfe>
 8005ef4:	682b      	ldr	r3, [r5, #0]
 8005ef6:	6820      	ldr	r0, [r4, #0]
 8005ef8:	1d19      	adds	r1, r3, #4
 8005efa:	6029      	str	r1, [r5, #0]
 8005efc:	0605      	lsls	r5, r0, #24
 8005efe:	d501      	bpl.n	8005f04 <_printf_i+0xe8>
 8005f00:	681e      	ldr	r6, [r3, #0]
 8005f02:	e002      	b.n	8005f0a <_printf_i+0xee>
 8005f04:	0641      	lsls	r1, r0, #25
 8005f06:	d5fb      	bpl.n	8005f00 <_printf_i+0xe4>
 8005f08:	881e      	ldrh	r6, [r3, #0]
 8005f0a:	4853      	ldr	r0, [pc, #332]	; (8006058 <_printf_i+0x23c>)
 8005f0c:	2f6f      	cmp	r7, #111	; 0x6f
 8005f0e:	bf0c      	ite	eq
 8005f10:	2308      	moveq	r3, #8
 8005f12:	230a      	movne	r3, #10
 8005f14:	2100      	movs	r1, #0
 8005f16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f1a:	6865      	ldr	r5, [r4, #4]
 8005f1c:	60a5      	str	r5, [r4, #8]
 8005f1e:	2d00      	cmp	r5, #0
 8005f20:	bfa2      	ittt	ge
 8005f22:	6821      	ldrge	r1, [r4, #0]
 8005f24:	f021 0104 	bicge.w	r1, r1, #4
 8005f28:	6021      	strge	r1, [r4, #0]
 8005f2a:	b90e      	cbnz	r6, 8005f30 <_printf_i+0x114>
 8005f2c:	2d00      	cmp	r5, #0
 8005f2e:	d04b      	beq.n	8005fc8 <_printf_i+0x1ac>
 8005f30:	4615      	mov	r5, r2
 8005f32:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f36:	fb03 6711 	mls	r7, r3, r1, r6
 8005f3a:	5dc7      	ldrb	r7, [r0, r7]
 8005f3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f40:	4637      	mov	r7, r6
 8005f42:	42bb      	cmp	r3, r7
 8005f44:	460e      	mov	r6, r1
 8005f46:	d9f4      	bls.n	8005f32 <_printf_i+0x116>
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d10b      	bne.n	8005f64 <_printf_i+0x148>
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	07de      	lsls	r6, r3, #31
 8005f50:	d508      	bpl.n	8005f64 <_printf_i+0x148>
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	6861      	ldr	r1, [r4, #4]
 8005f56:	4299      	cmp	r1, r3
 8005f58:	bfde      	ittt	le
 8005f5a:	2330      	movle	r3, #48	; 0x30
 8005f5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f60:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005f64:	1b52      	subs	r2, r2, r5
 8005f66:	6122      	str	r2, [r4, #16]
 8005f68:	f8cd a000 	str.w	sl, [sp]
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	aa03      	add	r2, sp, #12
 8005f70:	4621      	mov	r1, r4
 8005f72:	4640      	mov	r0, r8
 8005f74:	f7ff fee4 	bl	8005d40 <_printf_common>
 8005f78:	3001      	adds	r0, #1
 8005f7a:	d14a      	bne.n	8006012 <_printf_i+0x1f6>
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f80:	b004      	add	sp, #16
 8005f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	f043 0320 	orr.w	r3, r3, #32
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	4833      	ldr	r0, [pc, #204]	; (800605c <_printf_i+0x240>)
 8005f90:	2778      	movs	r7, #120	; 0x78
 8005f92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	6829      	ldr	r1, [r5, #0]
 8005f9a:	061f      	lsls	r7, r3, #24
 8005f9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fa0:	d402      	bmi.n	8005fa8 <_printf_i+0x18c>
 8005fa2:	065f      	lsls	r7, r3, #25
 8005fa4:	bf48      	it	mi
 8005fa6:	b2b6      	uxthmi	r6, r6
 8005fa8:	07df      	lsls	r7, r3, #31
 8005faa:	bf48      	it	mi
 8005fac:	f043 0320 	orrmi.w	r3, r3, #32
 8005fb0:	6029      	str	r1, [r5, #0]
 8005fb2:	bf48      	it	mi
 8005fb4:	6023      	strmi	r3, [r4, #0]
 8005fb6:	b91e      	cbnz	r6, 8005fc0 <_printf_i+0x1a4>
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	f023 0320 	bic.w	r3, r3, #32
 8005fbe:	6023      	str	r3, [r4, #0]
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	e7a7      	b.n	8005f14 <_printf_i+0xf8>
 8005fc4:	4824      	ldr	r0, [pc, #144]	; (8006058 <_printf_i+0x23c>)
 8005fc6:	e7e4      	b.n	8005f92 <_printf_i+0x176>
 8005fc8:	4615      	mov	r5, r2
 8005fca:	e7bd      	b.n	8005f48 <_printf_i+0x12c>
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	6826      	ldr	r6, [r4, #0]
 8005fd0:	6961      	ldr	r1, [r4, #20]
 8005fd2:	1d18      	adds	r0, r3, #4
 8005fd4:	6028      	str	r0, [r5, #0]
 8005fd6:	0635      	lsls	r5, r6, #24
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	d501      	bpl.n	8005fe0 <_printf_i+0x1c4>
 8005fdc:	6019      	str	r1, [r3, #0]
 8005fde:	e002      	b.n	8005fe6 <_printf_i+0x1ca>
 8005fe0:	0670      	lsls	r0, r6, #25
 8005fe2:	d5fb      	bpl.n	8005fdc <_printf_i+0x1c0>
 8005fe4:	8019      	strh	r1, [r3, #0]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	6123      	str	r3, [r4, #16]
 8005fea:	4615      	mov	r5, r2
 8005fec:	e7bc      	b.n	8005f68 <_printf_i+0x14c>
 8005fee:	682b      	ldr	r3, [r5, #0]
 8005ff0:	1d1a      	adds	r2, r3, #4
 8005ff2:	602a      	str	r2, [r5, #0]
 8005ff4:	681d      	ldr	r5, [r3, #0]
 8005ff6:	6862      	ldr	r2, [r4, #4]
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f7fa f910 	bl	8000220 <memchr>
 8006000:	b108      	cbz	r0, 8006006 <_printf_i+0x1ea>
 8006002:	1b40      	subs	r0, r0, r5
 8006004:	6060      	str	r0, [r4, #4]
 8006006:	6863      	ldr	r3, [r4, #4]
 8006008:	6123      	str	r3, [r4, #16]
 800600a:	2300      	movs	r3, #0
 800600c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006010:	e7aa      	b.n	8005f68 <_printf_i+0x14c>
 8006012:	6923      	ldr	r3, [r4, #16]
 8006014:	462a      	mov	r2, r5
 8006016:	4649      	mov	r1, r9
 8006018:	4640      	mov	r0, r8
 800601a:	47d0      	blx	sl
 800601c:	3001      	adds	r0, #1
 800601e:	d0ad      	beq.n	8005f7c <_printf_i+0x160>
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	079b      	lsls	r3, r3, #30
 8006024:	d413      	bmi.n	800604e <_printf_i+0x232>
 8006026:	68e0      	ldr	r0, [r4, #12]
 8006028:	9b03      	ldr	r3, [sp, #12]
 800602a:	4298      	cmp	r0, r3
 800602c:	bfb8      	it	lt
 800602e:	4618      	movlt	r0, r3
 8006030:	e7a6      	b.n	8005f80 <_printf_i+0x164>
 8006032:	2301      	movs	r3, #1
 8006034:	4632      	mov	r2, r6
 8006036:	4649      	mov	r1, r9
 8006038:	4640      	mov	r0, r8
 800603a:	47d0      	blx	sl
 800603c:	3001      	adds	r0, #1
 800603e:	d09d      	beq.n	8005f7c <_printf_i+0x160>
 8006040:	3501      	adds	r5, #1
 8006042:	68e3      	ldr	r3, [r4, #12]
 8006044:	9903      	ldr	r1, [sp, #12]
 8006046:	1a5b      	subs	r3, r3, r1
 8006048:	42ab      	cmp	r3, r5
 800604a:	dcf2      	bgt.n	8006032 <_printf_i+0x216>
 800604c:	e7eb      	b.n	8006026 <_printf_i+0x20a>
 800604e:	2500      	movs	r5, #0
 8006050:	f104 0619 	add.w	r6, r4, #25
 8006054:	e7f5      	b.n	8006042 <_printf_i+0x226>
 8006056:	bf00      	nop
 8006058:	08006579 	.word	0x08006579
 800605c:	0800658a 	.word	0x0800658a

08006060 <__sflush_r>:
 8006060:	898a      	ldrh	r2, [r1, #12]
 8006062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006066:	4605      	mov	r5, r0
 8006068:	0710      	lsls	r0, r2, #28
 800606a:	460c      	mov	r4, r1
 800606c:	d458      	bmi.n	8006120 <__sflush_r+0xc0>
 800606e:	684b      	ldr	r3, [r1, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	dc05      	bgt.n	8006080 <__sflush_r+0x20>
 8006074:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	dc02      	bgt.n	8006080 <__sflush_r+0x20>
 800607a:	2000      	movs	r0, #0
 800607c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006082:	2e00      	cmp	r6, #0
 8006084:	d0f9      	beq.n	800607a <__sflush_r+0x1a>
 8006086:	2300      	movs	r3, #0
 8006088:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800608c:	682f      	ldr	r7, [r5, #0]
 800608e:	6a21      	ldr	r1, [r4, #32]
 8006090:	602b      	str	r3, [r5, #0]
 8006092:	d032      	beq.n	80060fa <__sflush_r+0x9a>
 8006094:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006096:	89a3      	ldrh	r3, [r4, #12]
 8006098:	075a      	lsls	r2, r3, #29
 800609a:	d505      	bpl.n	80060a8 <__sflush_r+0x48>
 800609c:	6863      	ldr	r3, [r4, #4]
 800609e:	1ac0      	subs	r0, r0, r3
 80060a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060a2:	b10b      	cbz	r3, 80060a8 <__sflush_r+0x48>
 80060a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060a6:	1ac0      	subs	r0, r0, r3
 80060a8:	2300      	movs	r3, #0
 80060aa:	4602      	mov	r2, r0
 80060ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060ae:	6a21      	ldr	r1, [r4, #32]
 80060b0:	4628      	mov	r0, r5
 80060b2:	47b0      	blx	r6
 80060b4:	1c43      	adds	r3, r0, #1
 80060b6:	89a3      	ldrh	r3, [r4, #12]
 80060b8:	d106      	bne.n	80060c8 <__sflush_r+0x68>
 80060ba:	6829      	ldr	r1, [r5, #0]
 80060bc:	291d      	cmp	r1, #29
 80060be:	d82b      	bhi.n	8006118 <__sflush_r+0xb8>
 80060c0:	4a29      	ldr	r2, [pc, #164]	; (8006168 <__sflush_r+0x108>)
 80060c2:	410a      	asrs	r2, r1
 80060c4:	07d6      	lsls	r6, r2, #31
 80060c6:	d427      	bmi.n	8006118 <__sflush_r+0xb8>
 80060c8:	2200      	movs	r2, #0
 80060ca:	6062      	str	r2, [r4, #4]
 80060cc:	04d9      	lsls	r1, r3, #19
 80060ce:	6922      	ldr	r2, [r4, #16]
 80060d0:	6022      	str	r2, [r4, #0]
 80060d2:	d504      	bpl.n	80060de <__sflush_r+0x7e>
 80060d4:	1c42      	adds	r2, r0, #1
 80060d6:	d101      	bne.n	80060dc <__sflush_r+0x7c>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	b903      	cbnz	r3, 80060de <__sflush_r+0x7e>
 80060dc:	6560      	str	r0, [r4, #84]	; 0x54
 80060de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060e0:	602f      	str	r7, [r5, #0]
 80060e2:	2900      	cmp	r1, #0
 80060e4:	d0c9      	beq.n	800607a <__sflush_r+0x1a>
 80060e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060ea:	4299      	cmp	r1, r3
 80060ec:	d002      	beq.n	80060f4 <__sflush_r+0x94>
 80060ee:	4628      	mov	r0, r5
 80060f0:	f7ff fc96 	bl	8005a20 <_free_r>
 80060f4:	2000      	movs	r0, #0
 80060f6:	6360      	str	r0, [r4, #52]	; 0x34
 80060f8:	e7c0      	b.n	800607c <__sflush_r+0x1c>
 80060fa:	2301      	movs	r3, #1
 80060fc:	4628      	mov	r0, r5
 80060fe:	47b0      	blx	r6
 8006100:	1c41      	adds	r1, r0, #1
 8006102:	d1c8      	bne.n	8006096 <__sflush_r+0x36>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0c5      	beq.n	8006096 <__sflush_r+0x36>
 800610a:	2b1d      	cmp	r3, #29
 800610c:	d001      	beq.n	8006112 <__sflush_r+0xb2>
 800610e:	2b16      	cmp	r3, #22
 8006110:	d101      	bne.n	8006116 <__sflush_r+0xb6>
 8006112:	602f      	str	r7, [r5, #0]
 8006114:	e7b1      	b.n	800607a <__sflush_r+0x1a>
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800611c:	81a3      	strh	r3, [r4, #12]
 800611e:	e7ad      	b.n	800607c <__sflush_r+0x1c>
 8006120:	690f      	ldr	r7, [r1, #16]
 8006122:	2f00      	cmp	r7, #0
 8006124:	d0a9      	beq.n	800607a <__sflush_r+0x1a>
 8006126:	0793      	lsls	r3, r2, #30
 8006128:	680e      	ldr	r6, [r1, #0]
 800612a:	bf08      	it	eq
 800612c:	694b      	ldreq	r3, [r1, #20]
 800612e:	600f      	str	r7, [r1, #0]
 8006130:	bf18      	it	ne
 8006132:	2300      	movne	r3, #0
 8006134:	eba6 0807 	sub.w	r8, r6, r7
 8006138:	608b      	str	r3, [r1, #8]
 800613a:	f1b8 0f00 	cmp.w	r8, #0
 800613e:	dd9c      	ble.n	800607a <__sflush_r+0x1a>
 8006140:	6a21      	ldr	r1, [r4, #32]
 8006142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006144:	4643      	mov	r3, r8
 8006146:	463a      	mov	r2, r7
 8006148:	4628      	mov	r0, r5
 800614a:	47b0      	blx	r6
 800614c:	2800      	cmp	r0, #0
 800614e:	dc06      	bgt.n	800615e <__sflush_r+0xfe>
 8006150:	89a3      	ldrh	r3, [r4, #12]
 8006152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006156:	81a3      	strh	r3, [r4, #12]
 8006158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800615c:	e78e      	b.n	800607c <__sflush_r+0x1c>
 800615e:	4407      	add	r7, r0
 8006160:	eba8 0800 	sub.w	r8, r8, r0
 8006164:	e7e9      	b.n	800613a <__sflush_r+0xda>
 8006166:	bf00      	nop
 8006168:	dfbffffe 	.word	0xdfbffffe

0800616c <_fflush_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	690b      	ldr	r3, [r1, #16]
 8006170:	4605      	mov	r5, r0
 8006172:	460c      	mov	r4, r1
 8006174:	b913      	cbnz	r3, 800617c <_fflush_r+0x10>
 8006176:	2500      	movs	r5, #0
 8006178:	4628      	mov	r0, r5
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	b118      	cbz	r0, 8006186 <_fflush_r+0x1a>
 800617e:	6a03      	ldr	r3, [r0, #32]
 8006180:	b90b      	cbnz	r3, 8006186 <_fflush_r+0x1a>
 8006182:	f7ff fb63 	bl	800584c <__sinit>
 8006186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0f3      	beq.n	8006176 <_fflush_r+0xa>
 800618e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006190:	07d0      	lsls	r0, r2, #31
 8006192:	d404      	bmi.n	800619e <_fflush_r+0x32>
 8006194:	0599      	lsls	r1, r3, #22
 8006196:	d402      	bmi.n	800619e <_fflush_r+0x32>
 8006198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800619a:	f7ff fc3e 	bl	8005a1a <__retarget_lock_acquire_recursive>
 800619e:	4628      	mov	r0, r5
 80061a0:	4621      	mov	r1, r4
 80061a2:	f7ff ff5d 	bl	8006060 <__sflush_r>
 80061a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061a8:	07da      	lsls	r2, r3, #31
 80061aa:	4605      	mov	r5, r0
 80061ac:	d4e4      	bmi.n	8006178 <_fflush_r+0xc>
 80061ae:	89a3      	ldrh	r3, [r4, #12]
 80061b0:	059b      	lsls	r3, r3, #22
 80061b2:	d4e1      	bmi.n	8006178 <_fflush_r+0xc>
 80061b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061b6:	f7ff fc31 	bl	8005a1c <__retarget_lock_release_recursive>
 80061ba:	e7dd      	b.n	8006178 <_fflush_r+0xc>

080061bc <__sread>:
 80061bc:	b510      	push	{r4, lr}
 80061be:	460c      	mov	r4, r1
 80061c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c4:	f000 f978 	bl	80064b8 <_read_r>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	bfab      	itete	ge
 80061cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061ce:	89a3      	ldrhlt	r3, [r4, #12]
 80061d0:	181b      	addge	r3, r3, r0
 80061d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061d6:	bfac      	ite	ge
 80061d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80061da:	81a3      	strhlt	r3, [r4, #12]
 80061dc:	bd10      	pop	{r4, pc}

080061de <__swrite>:
 80061de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e2:	461f      	mov	r7, r3
 80061e4:	898b      	ldrh	r3, [r1, #12]
 80061e6:	05db      	lsls	r3, r3, #23
 80061e8:	4605      	mov	r5, r0
 80061ea:	460c      	mov	r4, r1
 80061ec:	4616      	mov	r6, r2
 80061ee:	d505      	bpl.n	80061fc <__swrite+0x1e>
 80061f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f4:	2302      	movs	r3, #2
 80061f6:	2200      	movs	r2, #0
 80061f8:	f000 f94c 	bl	8006494 <_lseek_r>
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006206:	81a3      	strh	r3, [r4, #12]
 8006208:	4632      	mov	r2, r6
 800620a:	463b      	mov	r3, r7
 800620c:	4628      	mov	r0, r5
 800620e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006212:	f000 b963 	b.w	80064dc <_write_r>

08006216 <__sseek>:
 8006216:	b510      	push	{r4, lr}
 8006218:	460c      	mov	r4, r1
 800621a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800621e:	f000 f939 	bl	8006494 <_lseek_r>
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	89a3      	ldrh	r3, [r4, #12]
 8006226:	bf15      	itete	ne
 8006228:	6560      	strne	r0, [r4, #84]	; 0x54
 800622a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800622e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006232:	81a3      	strheq	r3, [r4, #12]
 8006234:	bf18      	it	ne
 8006236:	81a3      	strhne	r3, [r4, #12]
 8006238:	bd10      	pop	{r4, pc}

0800623a <__sclose>:
 800623a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800623e:	f000 b8f7 	b.w	8006430 <_close_r>

08006242 <__swbuf_r>:
 8006242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006244:	460e      	mov	r6, r1
 8006246:	4614      	mov	r4, r2
 8006248:	4605      	mov	r5, r0
 800624a:	b118      	cbz	r0, 8006254 <__swbuf_r+0x12>
 800624c:	6a03      	ldr	r3, [r0, #32]
 800624e:	b90b      	cbnz	r3, 8006254 <__swbuf_r+0x12>
 8006250:	f7ff fafc 	bl	800584c <__sinit>
 8006254:	69a3      	ldr	r3, [r4, #24]
 8006256:	60a3      	str	r3, [r4, #8]
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	071a      	lsls	r2, r3, #28
 800625c:	d525      	bpl.n	80062aa <__swbuf_r+0x68>
 800625e:	6923      	ldr	r3, [r4, #16]
 8006260:	b31b      	cbz	r3, 80062aa <__swbuf_r+0x68>
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	6922      	ldr	r2, [r4, #16]
 8006266:	1a98      	subs	r0, r3, r2
 8006268:	6963      	ldr	r3, [r4, #20]
 800626a:	b2f6      	uxtb	r6, r6
 800626c:	4283      	cmp	r3, r0
 800626e:	4637      	mov	r7, r6
 8006270:	dc04      	bgt.n	800627c <__swbuf_r+0x3a>
 8006272:	4621      	mov	r1, r4
 8006274:	4628      	mov	r0, r5
 8006276:	f7ff ff79 	bl	800616c <_fflush_r>
 800627a:	b9e0      	cbnz	r0, 80062b6 <__swbuf_r+0x74>
 800627c:	68a3      	ldr	r3, [r4, #8]
 800627e:	3b01      	subs	r3, #1
 8006280:	60a3      	str	r3, [r4, #8]
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	6022      	str	r2, [r4, #0]
 8006288:	701e      	strb	r6, [r3, #0]
 800628a:	6962      	ldr	r2, [r4, #20]
 800628c:	1c43      	adds	r3, r0, #1
 800628e:	429a      	cmp	r2, r3
 8006290:	d004      	beq.n	800629c <__swbuf_r+0x5a>
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	07db      	lsls	r3, r3, #31
 8006296:	d506      	bpl.n	80062a6 <__swbuf_r+0x64>
 8006298:	2e0a      	cmp	r6, #10
 800629a:	d104      	bne.n	80062a6 <__swbuf_r+0x64>
 800629c:	4621      	mov	r1, r4
 800629e:	4628      	mov	r0, r5
 80062a0:	f7ff ff64 	bl	800616c <_fflush_r>
 80062a4:	b938      	cbnz	r0, 80062b6 <__swbuf_r+0x74>
 80062a6:	4638      	mov	r0, r7
 80062a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062aa:	4621      	mov	r1, r4
 80062ac:	4628      	mov	r0, r5
 80062ae:	f000 f805 	bl	80062bc <__swsetup_r>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	d0d5      	beq.n	8006262 <__swbuf_r+0x20>
 80062b6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80062ba:	e7f4      	b.n	80062a6 <__swbuf_r+0x64>

080062bc <__swsetup_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	4b2a      	ldr	r3, [pc, #168]	; (8006368 <__swsetup_r+0xac>)
 80062c0:	4605      	mov	r5, r0
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	460c      	mov	r4, r1
 80062c6:	b118      	cbz	r0, 80062d0 <__swsetup_r+0x14>
 80062c8:	6a03      	ldr	r3, [r0, #32]
 80062ca:	b90b      	cbnz	r3, 80062d0 <__swsetup_r+0x14>
 80062cc:	f7ff fabe 	bl	800584c <__sinit>
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062d6:	0718      	lsls	r0, r3, #28
 80062d8:	d422      	bmi.n	8006320 <__swsetup_r+0x64>
 80062da:	06d9      	lsls	r1, r3, #27
 80062dc:	d407      	bmi.n	80062ee <__swsetup_r+0x32>
 80062de:	2309      	movs	r3, #9
 80062e0:	602b      	str	r3, [r5, #0]
 80062e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062e6:	81a3      	strh	r3, [r4, #12]
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062ec:	e034      	b.n	8006358 <__swsetup_r+0x9c>
 80062ee:	0758      	lsls	r0, r3, #29
 80062f0:	d512      	bpl.n	8006318 <__swsetup_r+0x5c>
 80062f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062f4:	b141      	cbz	r1, 8006308 <__swsetup_r+0x4c>
 80062f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062fa:	4299      	cmp	r1, r3
 80062fc:	d002      	beq.n	8006304 <__swsetup_r+0x48>
 80062fe:	4628      	mov	r0, r5
 8006300:	f7ff fb8e 	bl	8005a20 <_free_r>
 8006304:	2300      	movs	r3, #0
 8006306:	6363      	str	r3, [r4, #52]	; 0x34
 8006308:	89a3      	ldrh	r3, [r4, #12]
 800630a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800630e:	81a3      	strh	r3, [r4, #12]
 8006310:	2300      	movs	r3, #0
 8006312:	6063      	str	r3, [r4, #4]
 8006314:	6923      	ldr	r3, [r4, #16]
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	f043 0308 	orr.w	r3, r3, #8
 800631e:	81a3      	strh	r3, [r4, #12]
 8006320:	6923      	ldr	r3, [r4, #16]
 8006322:	b94b      	cbnz	r3, 8006338 <__swsetup_r+0x7c>
 8006324:	89a3      	ldrh	r3, [r4, #12]
 8006326:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800632a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800632e:	d003      	beq.n	8006338 <__swsetup_r+0x7c>
 8006330:	4621      	mov	r1, r4
 8006332:	4628      	mov	r0, r5
 8006334:	f000 f840 	bl	80063b8 <__smakebuf_r>
 8006338:	89a0      	ldrh	r0, [r4, #12]
 800633a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800633e:	f010 0301 	ands.w	r3, r0, #1
 8006342:	d00a      	beq.n	800635a <__swsetup_r+0x9e>
 8006344:	2300      	movs	r3, #0
 8006346:	60a3      	str	r3, [r4, #8]
 8006348:	6963      	ldr	r3, [r4, #20]
 800634a:	425b      	negs	r3, r3
 800634c:	61a3      	str	r3, [r4, #24]
 800634e:	6923      	ldr	r3, [r4, #16]
 8006350:	b943      	cbnz	r3, 8006364 <__swsetup_r+0xa8>
 8006352:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006356:	d1c4      	bne.n	80062e2 <__swsetup_r+0x26>
 8006358:	bd38      	pop	{r3, r4, r5, pc}
 800635a:	0781      	lsls	r1, r0, #30
 800635c:	bf58      	it	pl
 800635e:	6963      	ldrpl	r3, [r4, #20]
 8006360:	60a3      	str	r3, [r4, #8]
 8006362:	e7f4      	b.n	800634e <__swsetup_r+0x92>
 8006364:	2000      	movs	r0, #0
 8006366:	e7f7      	b.n	8006358 <__swsetup_r+0x9c>
 8006368:	20000064 	.word	0x20000064

0800636c <__swhatbuf_r>:
 800636c:	b570      	push	{r4, r5, r6, lr}
 800636e:	460c      	mov	r4, r1
 8006370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006374:	2900      	cmp	r1, #0
 8006376:	b096      	sub	sp, #88	; 0x58
 8006378:	4615      	mov	r5, r2
 800637a:	461e      	mov	r6, r3
 800637c:	da0d      	bge.n	800639a <__swhatbuf_r+0x2e>
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006384:	f04f 0100 	mov.w	r1, #0
 8006388:	bf0c      	ite	eq
 800638a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800638e:	2340      	movne	r3, #64	; 0x40
 8006390:	2000      	movs	r0, #0
 8006392:	6031      	str	r1, [r6, #0]
 8006394:	602b      	str	r3, [r5, #0]
 8006396:	b016      	add	sp, #88	; 0x58
 8006398:	bd70      	pop	{r4, r5, r6, pc}
 800639a:	466a      	mov	r2, sp
 800639c:	f000 f858 	bl	8006450 <_fstat_r>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	dbec      	blt.n	800637e <__swhatbuf_r+0x12>
 80063a4:	9901      	ldr	r1, [sp, #4]
 80063a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80063aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80063ae:	4259      	negs	r1, r3
 80063b0:	4159      	adcs	r1, r3
 80063b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063b6:	e7eb      	b.n	8006390 <__swhatbuf_r+0x24>

080063b8 <__smakebuf_r>:
 80063b8:	898b      	ldrh	r3, [r1, #12]
 80063ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063bc:	079d      	lsls	r5, r3, #30
 80063be:	4606      	mov	r6, r0
 80063c0:	460c      	mov	r4, r1
 80063c2:	d507      	bpl.n	80063d4 <__smakebuf_r+0x1c>
 80063c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	6123      	str	r3, [r4, #16]
 80063cc:	2301      	movs	r3, #1
 80063ce:	6163      	str	r3, [r4, #20]
 80063d0:	b002      	add	sp, #8
 80063d2:	bd70      	pop	{r4, r5, r6, pc}
 80063d4:	ab01      	add	r3, sp, #4
 80063d6:	466a      	mov	r2, sp
 80063d8:	f7ff ffc8 	bl	800636c <__swhatbuf_r>
 80063dc:	9900      	ldr	r1, [sp, #0]
 80063de:	4605      	mov	r5, r0
 80063e0:	4630      	mov	r0, r6
 80063e2:	f7ff f91b 	bl	800561c <_malloc_r>
 80063e6:	b948      	cbnz	r0, 80063fc <__smakebuf_r+0x44>
 80063e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ec:	059a      	lsls	r2, r3, #22
 80063ee:	d4ef      	bmi.n	80063d0 <__smakebuf_r+0x18>
 80063f0:	f023 0303 	bic.w	r3, r3, #3
 80063f4:	f043 0302 	orr.w	r3, r3, #2
 80063f8:	81a3      	strh	r3, [r4, #12]
 80063fa:	e7e3      	b.n	80063c4 <__smakebuf_r+0xc>
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	6020      	str	r0, [r4, #0]
 8006400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006404:	81a3      	strh	r3, [r4, #12]
 8006406:	9b00      	ldr	r3, [sp, #0]
 8006408:	6163      	str	r3, [r4, #20]
 800640a:	9b01      	ldr	r3, [sp, #4]
 800640c:	6120      	str	r0, [r4, #16]
 800640e:	b15b      	cbz	r3, 8006428 <__smakebuf_r+0x70>
 8006410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006414:	4630      	mov	r0, r6
 8006416:	f000 f82d 	bl	8006474 <_isatty_r>
 800641a:	b128      	cbz	r0, 8006428 <__smakebuf_r+0x70>
 800641c:	89a3      	ldrh	r3, [r4, #12]
 800641e:	f023 0303 	bic.w	r3, r3, #3
 8006422:	f043 0301 	orr.w	r3, r3, #1
 8006426:	81a3      	strh	r3, [r4, #12]
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	431d      	orrs	r5, r3
 800642c:	81a5      	strh	r5, [r4, #12]
 800642e:	e7cf      	b.n	80063d0 <__smakebuf_r+0x18>

08006430 <_close_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	4d06      	ldr	r5, [pc, #24]	; (800644c <_close_r+0x1c>)
 8006434:	2300      	movs	r3, #0
 8006436:	4604      	mov	r4, r0
 8006438:	4608      	mov	r0, r1
 800643a:	602b      	str	r3, [r5, #0]
 800643c:	f7fa fbd5 	bl	8000bea <_close>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d102      	bne.n	800644a <_close_r+0x1a>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	b103      	cbz	r3, 800644a <_close_r+0x1a>
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	bd38      	pop	{r3, r4, r5, pc}
 800644c:	20000320 	.word	0x20000320

08006450 <_fstat_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4d07      	ldr	r5, [pc, #28]	; (8006470 <_fstat_r+0x20>)
 8006454:	2300      	movs	r3, #0
 8006456:	4604      	mov	r4, r0
 8006458:	4608      	mov	r0, r1
 800645a:	4611      	mov	r1, r2
 800645c:	602b      	str	r3, [r5, #0]
 800645e:	f7fa fbd0 	bl	8000c02 <_fstat>
 8006462:	1c43      	adds	r3, r0, #1
 8006464:	d102      	bne.n	800646c <_fstat_r+0x1c>
 8006466:	682b      	ldr	r3, [r5, #0]
 8006468:	b103      	cbz	r3, 800646c <_fstat_r+0x1c>
 800646a:	6023      	str	r3, [r4, #0]
 800646c:	bd38      	pop	{r3, r4, r5, pc}
 800646e:	bf00      	nop
 8006470:	20000320 	.word	0x20000320

08006474 <_isatty_r>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	4d06      	ldr	r5, [pc, #24]	; (8006490 <_isatty_r+0x1c>)
 8006478:	2300      	movs	r3, #0
 800647a:	4604      	mov	r4, r0
 800647c:	4608      	mov	r0, r1
 800647e:	602b      	str	r3, [r5, #0]
 8006480:	f7fa fbcf 	bl	8000c22 <_isatty>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	d102      	bne.n	800648e <_isatty_r+0x1a>
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	b103      	cbz	r3, 800648e <_isatty_r+0x1a>
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	20000320 	.word	0x20000320

08006494 <_lseek_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4d07      	ldr	r5, [pc, #28]	; (80064b4 <_lseek_r+0x20>)
 8006498:	4604      	mov	r4, r0
 800649a:	4608      	mov	r0, r1
 800649c:	4611      	mov	r1, r2
 800649e:	2200      	movs	r2, #0
 80064a0:	602a      	str	r2, [r5, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	f7fa fbc8 	bl	8000c38 <_lseek>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d102      	bne.n	80064b2 <_lseek_r+0x1e>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	b103      	cbz	r3, 80064b2 <_lseek_r+0x1e>
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	bd38      	pop	{r3, r4, r5, pc}
 80064b4:	20000320 	.word	0x20000320

080064b8 <_read_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4d07      	ldr	r5, [pc, #28]	; (80064d8 <_read_r+0x20>)
 80064bc:	4604      	mov	r4, r0
 80064be:	4608      	mov	r0, r1
 80064c0:	4611      	mov	r1, r2
 80064c2:	2200      	movs	r2, #0
 80064c4:	602a      	str	r2, [r5, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	f7fa fb72 	bl	8000bb0 <_read>
 80064cc:	1c43      	adds	r3, r0, #1
 80064ce:	d102      	bne.n	80064d6 <_read_r+0x1e>
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	b103      	cbz	r3, 80064d6 <_read_r+0x1e>
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	bd38      	pop	{r3, r4, r5, pc}
 80064d8:	20000320 	.word	0x20000320

080064dc <_write_r>:
 80064dc:	b538      	push	{r3, r4, r5, lr}
 80064de:	4d07      	ldr	r5, [pc, #28]	; (80064fc <_write_r+0x20>)
 80064e0:	4604      	mov	r4, r0
 80064e2:	4608      	mov	r0, r1
 80064e4:	4611      	mov	r1, r2
 80064e6:	2200      	movs	r2, #0
 80064e8:	602a      	str	r2, [r5, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	f7fa f8a8 	bl	8000640 <_write>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d102      	bne.n	80064fa <_write_r+0x1e>
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	b103      	cbz	r3, 80064fa <_write_r+0x1e>
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	bd38      	pop	{r3, r4, r5, pc}
 80064fc:	20000320 	.word	0x20000320

08006500 <_init>:
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	bf00      	nop
 8006504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006506:	bc08      	pop	{r3}
 8006508:	469e      	mov	lr, r3
 800650a:	4770      	bx	lr

0800650c <_fini>:
 800650c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650e:	bf00      	nop
 8006510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006512:	bc08      	pop	{r3}
 8006514:	469e      	mov	lr, r3
 8006516:	4770      	bx	lr
