
NHK2024_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006288  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064ec  080064ec  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080064ec  080064ec  000164ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064f4  080064f4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064f4  080064f4  000164f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064f8  080064f8  000164f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080064fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000068  08006564  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08006564  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016ac4  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a9c  00000000  00000000  00036b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  00039640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000100a  00000000  00000000  0003aad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002806c  00000000  00000000  0003bada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016bd5  00000000  00000000  00063b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114e1d  00000000  00000000  0007a71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060cc  00000000  00000000  0018f538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00195604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006450 	.word	0x08006450

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08006450 	.word	0x08006450

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <HAL_TIM_PeriodElapsedCallback>:
	 */
	low_pass_filter_settings = low_pass_filter_init(1e-3, 5e-2);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    if (htim == &htim6){ // 10KHz
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d11e      	bne.n	800060a <HAL_TIM_PeriodElapsedCallback+0x4e>
    	int val;
    	int filter_val;
    	HAL_ADC_Start(&hadc1);
 80005cc:	4812      	ldr	r0, [pc, #72]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80005ce:	f001 f84d 	bl	800166c <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80005d2:	210a      	movs	r1, #10
 80005d4:	4810      	ldr	r0, [pc, #64]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80005d6:	f001 f961 	bl	800189c <HAL_ADC_PollForConversion>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d111      	bne.n	8000604 <HAL_TIM_PeriodElapsedCallback+0x48>
			HAL_ADC_Stop(&hadc1);
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80005e2:	f001 f927 	bl	8001834 <HAL_ADC_Stop>
			val = HAL_ADC_GetValue(&hadc1);
 80005e6:	480c      	ldr	r0, [pc, #48]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80005e8:	f001 fa5e 	bl	8001aa8 <HAL_ADC_GetValue>
 80005ec:	4603      	mov	r3, r0
 80005ee:	60fb      	str	r3, [r7, #12]
//			filter_val = (int)low_pass_filter_update(low_pass_filter_settings, val);
			printf("%d\r\n", val / 8);
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	da00      	bge.n	80005f8 <HAL_TIM_PeriodElapsedCallback+0x3c>
 80005f6:	3307      	adds	r3, #7
 80005f8:	10db      	asrs	r3, r3, #3
 80005fa:	4619      	mov	r1, r3
 80005fc:	4807      	ldr	r0, [pc, #28]	; (800061c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80005fe:	f005 f903 	bl	8005808 <iprintf>
			//ADC変換終了を待機
		} else {
			printf("error\n");
		}
    }
}
 8000602:	e002      	b.n	800060a <HAL_TIM_PeriodElapsedCallback+0x4e>
			printf("error\n");
 8000604:	4806      	ldr	r0, [pc, #24]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000606:	f005 f965 	bl	80058d4 <puts>
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000184 	.word	0x20000184
 8000618:	20000084 	.word	0x20000084
 800061c:	08006468 	.word	0x08006468
 8000620:	08006470 	.word	0x08006470

08000624 <_write>:

int _write(int file, char *ptr, int len)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hlpuart1,(uint8_t *)ptr,len,8);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	b29a      	uxth	r2, r3
 8000634:	2308      	movs	r3, #8
 8000636:	68b9      	ldr	r1, [r7, #8]
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <_write+0x24>)
 800063a:	f004 f8cb 	bl	80047d4 <HAL_UART_Transmit>
    return len;
 800063e:	687b      	ldr	r3, [r7, #4]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000f0 	.word	0x200000f0

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 fb65 	bl	8000d1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f814 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f956 	bl	8000908 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800065c:	f000 f8d4 	bl	8000808 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000660:	f000 f84e 	bl	8000700 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000664:	f000 f91a 	bl	800089c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <main+0x2c>)
 800066a:	f003 fce3 	bl	8004034 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  LL_VREFBUF_Enable();
//  LL_VREFBUF_SetVoltageScaling(LL_VREFBUF_VOLTAGE_SCALE2);
//  printf("vrefint %d\r\n", Vrefinit_ADC);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800066e:	217f      	movs	r1, #127	; 0x7f
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <main+0x30>)
 8000672:	f002 f86b 	bl	800274c <HAL_ADCEx_Calibration_Start>
  while (1)
 8000676:	e7fe      	b.n	8000676 <main+0x2a>
 8000678:	20000184 	.word	0x20000184
 800067c:	20000084 	.word	0x20000084

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	; 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	2238      	movs	r2, #56	; 0x38
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f005 f928 	bl	80058e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a6:	f002 fc4d 	bl	8002f44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2340      	movs	r3, #64	; 0x40
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0318 	add.w	r3, r7, #24
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fce3 	bl	800308c <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006cc:	f000 f934 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d4:	2301      	movs	r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 ffe1 	bl	80036b0 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006f4:	f000 f920 	bl	8000938 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	; 0x30
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2220      	movs	r2, #32
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f005 f8e3 	bl	80058e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800071e:	4b38      	ldr	r3, [pc, #224]	; (8000800 <MX_ADC1_Init+0x100>)
 8000720:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000724:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000726:	4b36      	ldr	r3, [pc, #216]	; (8000800 <MX_ADC1_Init+0x100>)
 8000728:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800072c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800072e:	4b34      	ldr	r3, [pc, #208]	; (8000800 <MX_ADC1_Init+0x100>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000734:	4b32      	ldr	r3, [pc, #200]	; (8000800 <MX_ADC1_Init+0x100>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800073a:	4b31      	ldr	r3, [pc, #196]	; (8000800 <MX_ADC1_Init+0x100>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000740:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <MX_ADC1_Init+0x100>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000746:	4b2e      	ldr	r3, [pc, #184]	; (8000800 <MX_ADC1_Init+0x100>)
 8000748:	2204      	movs	r2, #4
 800074a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800074c:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <MX_ADC1_Init+0x100>)
 800074e:	2200      	movs	r2, #0
 8000750:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000752:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <MX_ADC1_Init+0x100>)
 8000754:	2200      	movs	r2, #0
 8000756:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000758:	4b29      	ldr	r3, [pc, #164]	; (8000800 <MX_ADC1_Init+0x100>)
 800075a:	2201      	movs	r2, #1
 800075c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075e:	4b28      	ldr	r3, [pc, #160]	; (8000800 <MX_ADC1_Init+0x100>)
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_ADC1_Init+0x100>)
 8000768:	2200      	movs	r2, #0
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <MX_ADC1_Init+0x100>)
 800076e:	2200      	movs	r2, #0
 8000770:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000772:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_ADC1_Init+0x100>)
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_ADC1_Init+0x100>)
 800077c:	2200      	movs	r2, #0
 800077e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_ADC1_Init+0x100>)
 8000782:	2201      	movs	r2, #1
 8000784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_ADC1_Init+0x100>)
 800078a:	2208      	movs	r2, #8
 800078c:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_ADC1_Init+0x100>)
 8000790:	2200      	movs	r2, #0
 8000792:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_ADC1_Init+0x100>)
 8000796:	2200      	movs	r2, #0
 8000798:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_ADC1_Init+0x100>)
 800079c:	2201      	movs	r2, #1
 800079e:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a0:	4817      	ldr	r0, [pc, #92]	; (8000800 <MX_ADC1_Init+0x100>)
 80007a2:	f000 fda7 	bl	80012f4 <HAL_ADC_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80007ac:	f000 f8c4 	bl	8000938 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b8:	4619      	mov	r1, r3
 80007ba:	4811      	ldr	r0, [pc, #68]	; (8000800 <MX_ADC1_Init+0x100>)
 80007bc:	f002 f828 	bl	8002810 <HAL_ADCEx_MultiModeConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80007c6:	f000 f8b7 	bl	8000938 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_ADC1_Init+0x104>)
 80007cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ce:	2306      	movs	r3, #6
 80007d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80007d2:	2307      	movs	r3, #7
 80007d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007d6:	237f      	movs	r3, #127	; 0x7f
 80007d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007da:	2304      	movs	r3, #4
 80007dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <MX_ADC1_Init+0x100>)
 80007e8:	f001 f96c 	bl	8001ac4 <HAL_ADC_ConfigChannel>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80007f2:	f000 f8a1 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	3730      	adds	r7, #48	; 0x30
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000084 	.word	0x20000084
 8000804:	08600004 	.word	0x08600004

08000808 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800080c:	4b21      	ldr	r3, [pc, #132]	; (8000894 <MX_LPUART1_UART_Init+0x8c>)
 800080e:	4a22      	ldr	r2, [pc, #136]	; (8000898 <MX_LPUART1_UART_Init+0x90>)
 8000810:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <MX_LPUART1_UART_Init+0x8c>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <MX_LPUART1_UART_Init+0x8c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <MX_LPUART1_UART_Init+0x8c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_LPUART1_UART_Init+0x8c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_LPUART1_UART_Init+0x8c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_LPUART1_UART_Init+0x8c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_LPUART1_UART_Init+0x8c>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_LPUART1_UART_Init+0x8c>)
 8000840:	2200      	movs	r2, #0
 8000842:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_LPUART1_UART_Init+0x8c>)
 8000846:	2200      	movs	r2, #0
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800084a:	4812      	ldr	r0, [pc, #72]	; (8000894 <MX_LPUART1_UART_Init+0x8c>)
 800084c:	f003 ff72 	bl	8004734 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000856:	f000 f86f 	bl	8000938 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <MX_LPUART1_UART_Init+0x8c>)
 800085e:	f004 fd9b 	bl	8005398 <HAL_UARTEx_SetTxFifoThreshold>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000868:	f000 f866 	bl	8000938 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086c:	2100      	movs	r1, #0
 800086e:	4809      	ldr	r0, [pc, #36]	; (8000894 <MX_LPUART1_UART_Init+0x8c>)
 8000870:	f004 fdd0 	bl	8005414 <HAL_UARTEx_SetRxFifoThreshold>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800087a:	f000 f85d 	bl	8000938 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_LPUART1_UART_Init+0x8c>)
 8000880:	f004 fd51 	bl	8005326 <HAL_UARTEx_DisableFifoMode>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800088a:	f000 f855 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000f0 	.word	0x200000f0
 8000898:	40008000 	.word	0x40008000

0800089c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_TIM6_Init+0x64>)
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <MX_TIM6_Init+0x68>)
 80008b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_TIM6_Init+0x64>)
 80008b4:	2210      	movs	r2, #16
 80008b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_TIM6_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_TIM6_Init+0x64>)
 80008c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008c4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_TIM6_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008cc:	480c      	ldr	r0, [pc, #48]	; (8000900 <MX_TIM6_Init+0x64>)
 80008ce:	f003 fb59 	bl	8003f84 <HAL_TIM_Base_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80008d8:	f000 f82e 	bl	8000938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_TIM6_Init+0x64>)
 80008ea:	f003 fe47 	bl	800457c <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80008f4:	f000 f820 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000184 	.word	0x20000184
 8000904:	40001000 	.word	0x40001000

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_GPIO_Init+0x2c>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <MX_GPIO_Init+0x2c>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_GPIO_Init+0x2c>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_MspInit+0x44>)
 800094c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094e:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <HAL_MspInit+0x44>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6613      	str	r3, [r2, #96]	; 0x60
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_MspInit+0x44>)
 8000958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <HAL_MspInit+0x44>)
 8000964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000966:	4a08      	ldr	r2, [pc, #32]	; (8000988 <HAL_MspInit+0x44>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6593      	str	r3, [r2, #88]	; 0x58
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_MspInit+0x44>)
 8000970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b09e      	sub	sp, #120	; 0x78
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	2254      	movs	r2, #84	; 0x54
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f004 ff99 	bl	80058e4 <memset>
  if(hadc->Instance==ADC1)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009ba:	d134      	bne.n	8000a26 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80009c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80009c6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 f88b 	bl	8003ae8 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009d8:	f7ff ffae 	bl	8000938 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_ADC_MspInit+0xa4>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e0:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <HAL_ADC_MspInit+0xa4>)
 80009e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_ADC_MspInit+0xa4>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_ADC_MspInit+0xa4>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <HAL_ADC_MspInit+0xa4>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_ADC_MspInit+0xa4>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a10:	2303      	movs	r3, #3
 8000a12:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a22:	f002 f90d 	bl	8002c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3778      	adds	r7, #120	; 0x78
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000

08000a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b09e      	sub	sp, #120	; 0x78
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2254      	movs	r2, #84	; 0x54
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f004 ff45 	bl	80058e4 <memset>
  if(huart->Instance==LPUART1)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	; (8000adc <HAL_UART_MspInit+0xa8>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d136      	bne.n	8000ad2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a64:	2320      	movs	r3, #32
 8000a66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4618      	mov	r0, r3
 8000a72:	f003 f839 	bl	8003ae8 <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a7c:	f7ff ff5c 	bl	8000938 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a84:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ace:	f002 f8b7 	bl	8002c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3778      	adds	r7, #120	; 0x78
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40008000 	.word	0x40008000
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <HAL_TIM_Base_MspInit+0x44>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d113      	bne.n	8000b1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_TIM_Base_MspInit+0x48>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	4a0c      	ldr	r2, [pc, #48]	; (8000b2c <HAL_TIM_Base_MspInit+0x48>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	6593      	str	r3, [r2, #88]	; 0x58
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <HAL_TIM_Base_MspInit+0x48>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	f003 0310 	and.w	r3, r3, #16
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	2036      	movs	r0, #54	; 0x36
 8000b14:	f002 f85f 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b18:	2036      	movs	r0, #54	; 0x36
 8000b1a:	f002 f876 	bl	8002c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40001000 	.word	0x40001000
 8000b2c:	40021000 	.word	0x40021000

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <NMI_Handler+0x4>

08000b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <MemManage_Handler+0x4>

08000b42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7c:	f000 f922 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <TIM6_DAC_IRQHandler+0x10>)
 8000b8a:	f003 facb 	bl	8004124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000184 	.word	0x20000184

08000b98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	e00a      	b.n	8000bc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000baa:	f3af 8000 	nop.w
 8000bae:	4601      	mov	r1, r0
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	60ba      	str	r2, [r7, #8]
 8000bb6:	b2ca      	uxtb	r2, r1
 8000bb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbf0      	blt.n	8000baa <_read+0x12>
  }

  return len;
 8000bc8:	687b      	ldr	r3, [r7, #4]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfa:	605a      	str	r2, [r3, #4]
  return 0;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_isatty>:

int _isatty(int file)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d207      	bcs.n	8000c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c6c:	f004 fe52 	bl	8005914 <__errno>
 8000c70:	4603      	mov	r3, r0
 8000c72:	220c      	movs	r2, #12
 8000c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c7a:	e009      	b.n	8000c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <_sbrk+0x64>)
 8000c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20020000 	.word	0x20020000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	200001d0 	.word	0x200001d0
 8000ca4:	20000328 	.word	0x20000328

08000ca8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd0:	f7ff ffea 	bl	8000ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd4:	480c      	ldr	r0, [pc, #48]	; (8000d08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cd6:	490d      	ldr	r1, [pc, #52]	; (8000d0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <LoopForever+0xe>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cec:	4c0a      	ldr	r4, [pc, #40]	; (8000d18 <LoopForever+0x16>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfa:	f004 fe11 	bl	8005920 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cfe:	f7ff fca5 	bl	800064c <main>

08000d02 <LoopForever>:

LoopForever:
    b LoopForever
 8000d02:	e7fe      	b.n	8000d02 <LoopForever>
  ldr   r0, =_estack
 8000d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d0c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d10:	080064fc 	.word	0x080064fc
  ldr r2, =_sbss
 8000d14:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d18:	20000324 	.word	0x20000324

08000d1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC1_2_IRQHandler>

08000d1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f001 ff49 	bl	8002bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2e:	200f      	movs	r0, #15
 8000d30:	f000 f80e 	bl	8000d50 <HAL_InitTick>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d002      	beq.n	8000d40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	71fb      	strb	r3, [r7, #7]
 8000d3e:	e001      	b.n	8000d44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d40:	f7ff fe00 	bl	8000944 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d44:	79fb      	ldrb	r3, [r7, #7]

}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <HAL_InitTick+0x68>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d022      	beq.n	8000daa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_InitTick+0x6c>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <HAL_InitTick+0x68>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d70:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f001 ff54 	bl	8002c26 <HAL_SYSTICK_Config>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d10f      	bne.n	8000da4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b0f      	cmp	r3, #15
 8000d88:	d809      	bhi.n	8000d9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d92:	f001 ff20 	bl	8002bd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_InitTick+0x70>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	e007      	b.n	8000dae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	e004      	b.n	8000dae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e001      	b.n	8000dae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_IncTick+0x1c>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_IncTick+0x20>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a03      	ldr	r2, [pc, #12]	; (8000de0 <HAL_IncTick+0x1c>)
 8000dd4:	6013      	str	r3, [r2, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	200001d4 	.word	0x200001d4
 8000de4:	20000008 	.word	0x20000008

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200001d4 	.word	0x200001d4

08000e00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	431a      	orrs	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	609a      	str	r2, [r3, #8]
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3360      	adds	r3, #96	; 0x60
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <LL_ADC_SetOffset+0x44>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	4313      	orrs	r3, r2
 8000e98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ea0:	bf00      	nop
 8000ea2:	371c      	adds	r7, #28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	03fff000 	.word	0x03fff000

08000eb0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3360      	adds	r3, #96	; 0x60
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3360      	adds	r3, #96	; 0x60
 8000eec:	461a      	mov	r2, r3
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	431a      	orrs	r2, r3
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f06:	bf00      	nop
 8000f08:	371c      	adds	r7, #28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b087      	sub	sp, #28
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3360      	adds	r3, #96	; 0x60
 8000f22:	461a      	mov	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	431a      	orrs	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000f3c:	bf00      	nop
 8000f3e:	371c      	adds	r7, #28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	3360      	adds	r3, #96	; 0x60
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000f72:	bf00      	nop
 8000f74:	371c      	adds	r7, #28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	431a      	orrs	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	615a      	str	r2, [r3, #20]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d101      	bne.n	8000fbc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e000      	b.n	8000fbe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b087      	sub	sp, #28
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	60f8      	str	r0, [r7, #12]
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3330      	adds	r3, #48	; 0x30
 8000fda:	461a      	mov	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	0a1b      	lsrs	r3, r3, #8
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	4413      	add	r3, r2
 8000fe8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	f003 031f 	and.w	r3, r3, #31
 8000ff4:	211f      	movs	r1, #31
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	401a      	ands	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	0e9b      	lsrs	r3, r3, #26
 8001002:	f003 011f 	and.w	r1, r3, #31
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	f003 031f 	and.w	r3, r3, #31
 800100c:	fa01 f303 	lsl.w	r3, r1, r3
 8001010:	431a      	orrs	r2, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001016:	bf00      	nop
 8001018:	371c      	adds	r7, #28
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001022:	b480      	push	{r7}
 8001024:	b087      	sub	sp, #28
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3314      	adds	r3, #20
 8001032:	461a      	mov	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	0e5b      	lsrs	r3, r3, #25
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	4413      	add	r3, r2
 8001040:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	0d1b      	lsrs	r3, r3, #20
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	2107      	movs	r1, #7
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	401a      	ands	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	0d1b      	lsrs	r3, r3, #20
 800105c:	f003 031f 	and.w	r3, r3, #31
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	431a      	orrs	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800106c:	bf00      	nop
 800106e:	371c      	adds	r7, #28
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001090:	43db      	mvns	r3, r3
 8001092:	401a      	ands	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0318 	and.w	r3, r3, #24
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800109c:	40d9      	lsrs	r1, r3
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	400b      	ands	r3, r1
 80010a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010a6:	431a      	orrs	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	0007ffff 	.word	0x0007ffff

080010c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f003 031f 	and.w	r3, r3, #31
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6093      	str	r3, [r2, #8]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800112c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001130:	d101      	bne.n	8001136 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001154:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001158:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001180:	d101      	bne.n	8001186 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011a8:	f043 0201 	orr.w	r2, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d0:	f043 0202 	orr.w	r2, r3, #2
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <LL_ADC_IsEnabled+0x18>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <LL_ADC_IsEnabled+0x1a>
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b02      	cmp	r3, #2
 800121c:	d101      	bne.n	8001222 <LL_ADC_IsDisableOngoing+0x18>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <LL_ADC_IsDisableOngoing+0x1a>
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001240:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001244:	f043 0204 	orr.w	r2, r3, #4
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800126c:	f043 0210 	orr.w	r2, r3, #16
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b04      	cmp	r3, #4
 8001292:	d101      	bne.n	8001298 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012ba:	f043 0220 	orr.w	r2, r3, #32
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d101      	bne.n	80012e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e1a9      	b.n	8001662 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001318:	2b00      	cmp	r3, #0
 800131a:	d109      	bne.n	8001330 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff fb35 	bl	800098c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fef1 	bl	800111c <LL_ADC_IsDeepPowerDownEnabled>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d004      	beq.n	800134a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fed7 	bl	80010f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff0c 	bl	800116c <LL_ADC_IsInternalRegulatorEnabled>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d115      	bne.n	8001386 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fef0 	bl	8001144 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001364:	4b9c      	ldr	r3, [pc, #624]	; (80015d8 <HAL_ADC_Init+0x2e4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	099b      	lsrs	r3, r3, #6
 800136a:	4a9c      	ldr	r2, [pc, #624]	; (80015dc <HAL_ADC_Init+0x2e8>)
 800136c:	fba2 2303 	umull	r2, r3, r2, r3
 8001370:	099b      	lsrs	r3, r3, #6
 8001372:	3301      	adds	r3, #1
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001378:	e002      	b.n	8001380 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3b01      	subs	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f9      	bne.n	800137a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff feee 	bl	800116c <LL_ADC_IsInternalRegulatorEnabled>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10d      	bne.n	80013b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139a:	f043 0210 	orr.w	r2, r3, #16
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a6:	f043 0201 	orr.w	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff62 	bl	8001280 <LL_ADC_REG_IsConversionOngoing>
 80013bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f040 8142 	bne.w	8001650 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f040 813e 	bne.w	8001650 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013dc:	f043 0202 	orr.w	r2, r3, #2
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fefb 	bl	80011e4 <LL_ADC_IsEnabled>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d141      	bne.n	8001478 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013fc:	d004      	beq.n	8001408 <HAL_ADC_Init+0x114>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a77      	ldr	r2, [pc, #476]	; (80015e0 <HAL_ADC_Init+0x2ec>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d10f      	bne.n	8001428 <HAL_ADC_Init+0x134>
 8001408:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800140c:	f7ff feea 	bl	80011e4 <LL_ADC_IsEnabled>
 8001410:	4604      	mov	r4, r0
 8001412:	4873      	ldr	r0, [pc, #460]	; (80015e0 <HAL_ADC_Init+0x2ec>)
 8001414:	f7ff fee6 	bl	80011e4 <LL_ADC_IsEnabled>
 8001418:	4603      	mov	r3, r0
 800141a:	4323      	orrs	r3, r4
 800141c:	2b00      	cmp	r3, #0
 800141e:	bf0c      	ite	eq
 8001420:	2301      	moveq	r3, #1
 8001422:	2300      	movne	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	e012      	b.n	800144e <HAL_ADC_Init+0x15a>
 8001428:	486e      	ldr	r0, [pc, #440]	; (80015e4 <HAL_ADC_Init+0x2f0>)
 800142a:	f7ff fedb 	bl	80011e4 <LL_ADC_IsEnabled>
 800142e:	4604      	mov	r4, r0
 8001430:	486d      	ldr	r0, [pc, #436]	; (80015e8 <HAL_ADC_Init+0x2f4>)
 8001432:	f7ff fed7 	bl	80011e4 <LL_ADC_IsEnabled>
 8001436:	4603      	mov	r3, r0
 8001438:	431c      	orrs	r4, r3
 800143a:	486c      	ldr	r0, [pc, #432]	; (80015ec <HAL_ADC_Init+0x2f8>)
 800143c:	f7ff fed2 	bl	80011e4 <LL_ADC_IsEnabled>
 8001440:	4603      	mov	r3, r0
 8001442:	4323      	orrs	r3, r4
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d012      	beq.n	8001478 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800145a:	d004      	beq.n	8001466 <HAL_ADC_Init+0x172>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a5f      	ldr	r2, [pc, #380]	; (80015e0 <HAL_ADC_Init+0x2ec>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d101      	bne.n	800146a <HAL_ADC_Init+0x176>
 8001466:	4a62      	ldr	r2, [pc, #392]	; (80015f0 <HAL_ADC_Init+0x2fc>)
 8001468:	e000      	b.n	800146c <HAL_ADC_Init+0x178>
 800146a:	4a62      	ldr	r2, [pc, #392]	; (80015f4 <HAL_ADC_Init+0x300>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4619      	mov	r1, r3
 8001472:	4610      	mov	r0, r2
 8001474:	f7ff fcc4 	bl	8000e00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7f5b      	ldrb	r3, [r3, #29]
 800147c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001482:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001488:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800148e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001496:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d106      	bne.n	80014b4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	3b01      	subs	r3, #1
 80014ac:	045b      	lsls	r3, r3, #17
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d009      	beq.n	80014d0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	4b48      	ldr	r3, [pc, #288]	; (80015f8 <HAL_ADC_Init+0x304>)
 80014d8:	4013      	ands	r3, r2
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	69b9      	ldr	r1, [r7, #24]
 80014e0:	430b      	orrs	r3, r1
 80014e2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fee5 	bl	80012ce <LL_ADC_INJ_IsConversionOngoing>
 8001504:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d17f      	bne.n	800160c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d17c      	bne.n	800160c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001516:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800151e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800152e:	f023 0302 	bic.w	r3, r3, #2
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	69b9      	ldr	r1, [r7, #24]
 8001538:	430b      	orrs	r3, r1
 800153a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d017      	beq.n	8001574 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	691a      	ldr	r2, [r3, #16]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001552:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800155c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001560:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6911      	ldr	r1, [r2, #16]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	430b      	orrs	r3, r1
 800156e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001572:	e013      	b.n	800159c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	691a      	ldr	r2, [r3, #16]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001582:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001594:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001598:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d12a      	bne.n	80015fc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015b0:	f023 0304 	bic.w	r3, r3, #4
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015bc:	4311      	orrs	r1, r2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80015c2:	4311      	orrs	r1, r2
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015c8:	430a      	orrs	r2, r1
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 0201 	orr.w	r2, r2, #1
 80015d4:	611a      	str	r2, [r3, #16]
 80015d6:	e019      	b.n	800160c <HAL_ADC_Init+0x318>
 80015d8:	20000000 	.word	0x20000000
 80015dc:	053e2d63 	.word	0x053e2d63
 80015e0:	50000100 	.word	0x50000100
 80015e4:	50000400 	.word	0x50000400
 80015e8:	50000500 	.word	0x50000500
 80015ec:	50000600 	.word	0x50000600
 80015f0:	50000300 	.word	0x50000300
 80015f4:	50000700 	.word	0x50000700
 80015f8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	691a      	ldr	r2, [r3, #16]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0201 	bic.w	r2, r2, #1
 800160a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d10c      	bne.n	800162e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f023 010f 	bic.w	r1, r3, #15
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	1e5a      	subs	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	631a      	str	r2, [r3, #48]	; 0x30
 800162c:	e007      	b.n	800163e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 020f 	bic.w	r2, r2, #15
 800163c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001642:	f023 0303 	bic.w	r3, r3, #3
 8001646:	f043 0201 	orr.w	r2, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	65da      	str	r2, [r3, #92]	; 0x5c
 800164e:	e007      	b.n	8001660 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001654:	f043 0210 	orr.w	r2, r3, #16
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001660:	7ffb      	ldrb	r3, [r7, #31]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3724      	adds	r7, #36	; 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd90      	pop	{r4, r7, pc}
 800166a:	bf00      	nop

0800166c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800167c:	d004      	beq.n	8001688 <HAL_ADC_Start+0x1c>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a67      	ldr	r2, [pc, #412]	; (8001820 <HAL_ADC_Start+0x1b4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d101      	bne.n	800168c <HAL_ADC_Start+0x20>
 8001688:	4b66      	ldr	r3, [pc, #408]	; (8001824 <HAL_ADC_Start+0x1b8>)
 800168a:	e000      	b.n	800168e <HAL_ADC_Start+0x22>
 800168c:	4b66      	ldr	r3, [pc, #408]	; (8001828 <HAL_ADC_Start+0x1bc>)
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fd16 	bl	80010c0 <LL_ADC_GetMultimode>
 8001694:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fdf0 	bl	8001280 <LL_ADC_REG_IsConversionOngoing>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f040 80b4 	bne.w	8001810 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_ADC_Start+0x4a>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e0af      	b.n	8001816 <HAL_ADC_Start+0x1aa>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 fefc 	bl	80024bc <ADC_Enable>
 80016c4:	4603      	mov	r3, r0
 80016c6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f040 809b 	bne.w	8001806 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016d8:	f023 0301 	bic.w	r3, r3, #1
 80016dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a4d      	ldr	r2, [pc, #308]	; (8001820 <HAL_ADC_Start+0x1b4>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d009      	beq.n	8001702 <HAL_ADC_Start+0x96>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a4e      	ldr	r2, [pc, #312]	; (800182c <HAL_ADC_Start+0x1c0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d002      	beq.n	80016fe <HAL_ADC_Start+0x92>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	e003      	b.n	8001706 <HAL_ADC_Start+0x9a>
 80016fe:	4b4c      	ldr	r3, [pc, #304]	; (8001830 <HAL_ADC_Start+0x1c4>)
 8001700:	e001      	b.n	8001706 <HAL_ADC_Start+0x9a>
 8001702:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	4293      	cmp	r3, r2
 800170c:	d002      	beq.n	8001714 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d105      	bne.n	8001720 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001718:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800172c:	d106      	bne.n	800173c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001732:	f023 0206 	bic.w	r2, r3, #6
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	661a      	str	r2, [r3, #96]	; 0x60
 800173a:	e002      	b.n	8001742 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	221c      	movs	r2, #28
 8001748:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a32      	ldr	r2, [pc, #200]	; (8001820 <HAL_ADC_Start+0x1b4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d009      	beq.n	8001770 <HAL_ADC_Start+0x104>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a32      	ldr	r2, [pc, #200]	; (800182c <HAL_ADC_Start+0x1c0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d002      	beq.n	800176c <HAL_ADC_Start+0x100>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	e003      	b.n	8001774 <HAL_ADC_Start+0x108>
 800176c:	4b30      	ldr	r3, [pc, #192]	; (8001830 <HAL_ADC_Start+0x1c4>)
 800176e:	e001      	b.n	8001774 <HAL_ADC_Start+0x108>
 8001770:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	4293      	cmp	r3, r2
 800177a:	d008      	beq.n	800178e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	2b05      	cmp	r3, #5
 8001786:	d002      	beq.n	800178e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	2b09      	cmp	r3, #9
 800178c:	d114      	bne.n	80017b8 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d007      	beq.n	80017ac <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fd3d 	bl	8001230 <LL_ADC_REG_StartConversion>
 80017b6:	e02d      	b.n	8001814 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a15      	ldr	r2, [pc, #84]	; (8001820 <HAL_ADC_Start+0x1b4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d009      	beq.n	80017e2 <HAL_ADC_Start+0x176>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a16      	ldr	r2, [pc, #88]	; (800182c <HAL_ADC_Start+0x1c0>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d002      	beq.n	80017de <HAL_ADC_Start+0x172>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	e003      	b.n	80017e6 <HAL_ADC_Start+0x17a>
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_ADC_Start+0x1c4>)
 80017e0:	e001      	b.n	80017e6 <HAL_ADC_Start+0x17a>
 80017e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017e6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00f      	beq.n	8001814 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	65da      	str	r2, [r3, #92]	; 0x5c
 8001804:	e006      	b.n	8001814 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800180e:	e001      	b.n	8001814 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001810:	2302      	movs	r3, #2
 8001812:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001814:	7dfb      	ldrb	r3, [r7, #23]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	50000100 	.word	0x50000100
 8001824:	50000300 	.word	0x50000300
 8001828:	50000700 	.word	0x50000700
 800182c:	50000500 	.word	0x50000500
 8001830:	50000400 	.word	0x50000400

08001834 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_ADC_Stop+0x16>
 8001846:	2302      	movs	r3, #2
 8001848:	e023      	b.n	8001892 <HAL_ADC_Stop+0x5e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001852:	2103      	movs	r1, #3
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 fd75 	bl	8002344 <ADC_ConversionStop>
 800185a:	4603      	mov	r3, r0
 800185c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d111      	bne.n	8001888 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 febf 	bl	80025e8 <ADC_Disable>
 800186a:	4603      	mov	r3, r0
 800186c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d109      	bne.n	8001888 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001878:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	f043 0201 	orr.w	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ae:	d004      	beq.n	80018ba <HAL_ADC_PollForConversion+0x1e>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a77      	ldr	r2, [pc, #476]	; (8001a94 <HAL_ADC_PollForConversion+0x1f8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d101      	bne.n	80018be <HAL_ADC_PollForConversion+0x22>
 80018ba:	4b77      	ldr	r3, [pc, #476]	; (8001a98 <HAL_ADC_PollForConversion+0x1fc>)
 80018bc:	e000      	b.n	80018c0 <HAL_ADC_PollForConversion+0x24>
 80018be:	4b77      	ldr	r3, [pc, #476]	; (8001a9c <HAL_ADC_PollForConversion+0x200>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fbfd 	bl	80010c0 <LL_ADC_GetMultimode>
 80018c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d102      	bne.n	80018d6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80018d0:	2308      	movs	r3, #8
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	e037      	b.n	8001946 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	2b05      	cmp	r3, #5
 80018e0:	d002      	beq.n	80018e8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2b09      	cmp	r3, #9
 80018e6:	d111      	bne.n	800190c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d007      	beq.n	8001906 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fa:	f043 0220 	orr.w	r2, r3, #32
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e0c1      	b.n	8001a8a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001906:	2304      	movs	r3, #4
 8001908:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800190a:	e01c      	b.n	8001946 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001914:	d004      	beq.n	8001920 <HAL_ADC_PollForConversion+0x84>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a5e      	ldr	r2, [pc, #376]	; (8001a94 <HAL_ADC_PollForConversion+0x1f8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d101      	bne.n	8001924 <HAL_ADC_PollForConversion+0x88>
 8001920:	4b5d      	ldr	r3, [pc, #372]	; (8001a98 <HAL_ADC_PollForConversion+0x1fc>)
 8001922:	e000      	b.n	8001926 <HAL_ADC_PollForConversion+0x8a>
 8001924:	4b5d      	ldr	r3, [pc, #372]	; (8001a9c <HAL_ADC_PollForConversion+0x200>)
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fbd8 	bl	80010dc <LL_ADC_GetMultiDMATransfer>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d007      	beq.n	8001942 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001936:	f043 0220 	orr.w	r2, r3, #32
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e0a3      	b.n	8001a8a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001942:	2304      	movs	r3, #4
 8001944:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001946:	f7ff fa4f 	bl	8000de8 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800194c:	e021      	b.n	8001992 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001954:	d01d      	beq.n	8001992 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001956:	f7ff fa47 	bl	8000de8 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d302      	bcc.n	800196c <HAL_ADC_PollForConversion+0xd0>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d112      	bne.n	8001992 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	4013      	ands	r3, r2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10b      	bne.n	8001992 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197e:	f043 0204 	orr.w	r2, r3, #4
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e07b      	b.n	8001a8a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0d6      	beq.n	800194e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff faf7 	bl	8000fa4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d01c      	beq.n	80019f6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7f5b      	ldrb	r3, [r3, #29]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d118      	bne.n	80019f6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d111      	bne.n	80019f6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d105      	bne.n	80019f6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ee:	f043 0201 	orr.w	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a26      	ldr	r2, [pc, #152]	; (8001a94 <HAL_ADC_PollForConversion+0x1f8>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d009      	beq.n	8001a14 <HAL_ADC_PollForConversion+0x178>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a26      	ldr	r2, [pc, #152]	; (8001aa0 <HAL_ADC_PollForConversion+0x204>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d002      	beq.n	8001a10 <HAL_ADC_PollForConversion+0x174>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	e003      	b.n	8001a18 <HAL_ADC_PollForConversion+0x17c>
 8001a10:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <HAL_ADC_PollForConversion+0x208>)
 8001a12:	e001      	b.n	8001a18 <HAL_ADC_PollForConversion+0x17c>
 8001a14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d008      	beq.n	8001a32 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d002      	beq.n	8001a32 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2b09      	cmp	r3, #9
 8001a30:	d104      	bne.n	8001a3c <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	61bb      	str	r3, [r7, #24]
 8001a3a:	e014      	b.n	8001a66 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <HAL_ADC_PollForConversion+0x1f8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d009      	beq.n	8001a5a <HAL_ADC_PollForConversion+0x1be>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a15      	ldr	r2, [pc, #84]	; (8001aa0 <HAL_ADC_PollForConversion+0x204>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d002      	beq.n	8001a56 <HAL_ADC_PollForConversion+0x1ba>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	e003      	b.n	8001a5e <HAL_ADC_PollForConversion+0x1c2>
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_ADC_PollForConversion+0x208>)
 8001a58:	e001      	b.n	8001a5e <HAL_ADC_PollForConversion+0x1c2>
 8001a5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a5e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d104      	bne.n	8001a76 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2208      	movs	r2, #8
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e008      	b.n	8001a88 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d103      	bne.n	8001a88 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	220c      	movs	r2, #12
 8001a86:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3720      	adds	r7, #32
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	50000100 	.word	0x50000100
 8001a98:	50000300 	.word	0x50000300
 8001a9c:	50000700 	.word	0x50000700
 8001aa0:	50000500 	.word	0x50000500
 8001aa4:	50000400 	.word	0x50000400

08001aa8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b0b6      	sub	sp, #216	; 0xd8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d102      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x24>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	f000 bc13 	b.w	800230e <HAL_ADC_ConfigChannel+0x84a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fbc3 	bl	8001280 <LL_ADC_REG_IsConversionOngoing>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f040 83f3 	bne.w	80022e8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	6859      	ldr	r1, [r3, #4]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f7ff fa5b 	bl	8000fca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fbb1 	bl	8001280 <LL_ADC_REG_IsConversionOngoing>
 8001b1e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fbd1 	bl	80012ce <LL_ADC_INJ_IsConversionOngoing>
 8001b2c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 81d9 	bne.w	8001eec <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f040 81d4 	bne.w	8001eec <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b4c:	d10f      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2200      	movs	r2, #0
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f7ff fa62 	bl	8001022 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fa09 	bl	8000f7e <LL_ADC_SetSamplingTimeCommonConfig>
 8001b6c:	e00e      	b.n	8001b8c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	6819      	ldr	r1, [r3, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f7ff fa51 	bl	8001022 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f9f9 	bl	8000f7e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	08db      	lsrs	r3, r3, #3
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d022      	beq.n	8001bf4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	6919      	ldr	r1, [r3, #16]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bbe:	f7ff f953 	bl	8000e68 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6919      	ldr	r1, [r3, #16]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f7ff f99f 	bl	8000f12 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d102      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x126>
 8001be4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be8:	e000      	b.n	8001bec <HAL_ADC_ConfigChannel+0x128>
 8001bea:	2300      	movs	r3, #0
 8001bec:	461a      	mov	r2, r3
 8001bee:	f7ff f9ab 	bl	8000f48 <LL_ADC_SetOffsetSaturation>
 8001bf2:	e17b      	b.n	8001eec <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff f958 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10a      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x15c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f94d 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001c16:	4603      	mov	r3, r0
 8001c18:	0e9b      	lsrs	r3, r3, #26
 8001c1a:	f003 021f 	and.w	r2, r3, #31
 8001c1e:	e01e      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x19a>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f942 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001c4e:	2320      	movs	r3, #32
 8001c50:	e004      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001c52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d105      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x1b2>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	0e9b      	lsrs	r3, r3, #26
 8001c70:	f003 031f 	and.w	r3, r3, #31
 8001c74:	e018      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x1e4>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001c9a:	2320      	movs	r3, #32
 8001c9c:	e004      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001c9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d106      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff f911 	bl	8000edc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff f8f5 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10a      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x222>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f8ea 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	0e9b      	lsrs	r3, r3, #26
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	e01e      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x260>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2101      	movs	r1, #1
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff f8df 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cfc:	fa93 f3a3 	rbit	r3, r3
 8001d00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001d14:	2320      	movs	r3, #32
 8001d16:	e004      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001d18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d1c:	fab3 f383 	clz	r3, r3
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d105      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x278>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	0e9b      	lsrs	r3, r3, #26
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	e018      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x2aa>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001d60:	2320      	movs	r3, #32
 8001d62:	e004      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d106      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2200      	movs	r2, #0
 8001d78:	2101      	movs	r1, #1
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f8ae 	bl	8000edc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2102      	movs	r1, #2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f892 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10a      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x2e8>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2102      	movs	r1, #2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff f887 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001da2:	4603      	mov	r3, r0
 8001da4:	0e9b      	lsrs	r3, r3, #26
 8001da6:	f003 021f 	and.w	r2, r3, #31
 8001daa:	e01e      	b.n	8001dea <HAL_ADC_ConfigChannel+0x326>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2102      	movs	r1, #2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff f87c 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001dca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001dd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001dda:	2320      	movs	r3, #32
 8001ddc:	e004      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001dde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x33e>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0e9b      	lsrs	r3, r3, #26
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	e016      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x36c>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e0e:	fa93 f3a3 	rbit	r3, r3
 8001e12:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001e22:	2320      	movs	r3, #32
 8001e24:	e004      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001e26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d106      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2102      	movs	r1, #2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff f84d 	bl	8000edc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2103      	movs	r1, #3
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff f831 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10a      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x3aa>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2103      	movs	r1, #3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff f826 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001e64:	4603      	mov	r3, r0
 8001e66:	0e9b      	lsrs	r3, r3, #26
 8001e68:	f003 021f 	and.w	r2, r3, #31
 8001e6c:	e017      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x3da>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2103      	movs	r1, #3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff f81b 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e88:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001e90:	2320      	movs	r3, #32
 8001e92:	e003      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d105      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x3f2>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	0e9b      	lsrs	r3, r3, #26
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	e011      	b.n	8001eda <HAL_ADC_ConfigChannel+0x416>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001ece:	2320      	movs	r3, #32
 8001ed0:	e003      	b.n	8001eda <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d106      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2103      	movs	r1, #3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fff8 	bl	8000edc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff f977 	bl	80011e4 <LL_ADC_IsEnabled>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f040 813d 	bne.w	8002178 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6819      	ldr	r1, [r3, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f7ff f8b4 	bl	8001078 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4aa2      	ldr	r2, [pc, #648]	; (80021a0 <HAL_ADC_ConfigChannel+0x6dc>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	f040 812e 	bne.w	8002178 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10b      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x480>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0e9b      	lsrs	r3, r3, #26
 8001f32:	3301      	adds	r3, #1
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	2b09      	cmp	r3, #9
 8001f3a:	bf94      	ite	ls
 8001f3c:	2301      	movls	r3, #1
 8001f3e:	2300      	movhi	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	e019      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x4b4>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f54:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	e003      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001f60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	2b09      	cmp	r3, #9
 8001f70:	bf94      	ite	ls
 8001f72:	2301      	movls	r3, #1
 8001f74:	2300      	movhi	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d079      	beq.n	8002070 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d107      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x4d4>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	0e9b      	lsrs	r3, r3, #26
 8001f8e:	3301      	adds	r3, #1
 8001f90:	069b      	lsls	r3, r3, #26
 8001f92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f96:	e015      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x500>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fa8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	e003      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	069b      	lsls	r3, r3, #26
 8001fc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d109      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x520>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	0e9b      	lsrs	r3, r3, #26
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f003 031f 	and.w	r3, r3, #31
 8001fdc:	2101      	movs	r1, #1
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	e017      	b.n	8002014 <HAL_ADC_ConfigChannel+0x550>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001ffc:	2320      	movs	r3, #32
 8001ffe:	e003      	b.n	8002008 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	3301      	adds	r3, #1
 800200a:	f003 031f 	and.w	r3, r3, #31
 800200e:	2101      	movs	r1, #1
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	ea42 0103 	orr.w	r1, r2, r3
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10a      	bne.n	800203a <HAL_ADC_ConfigChannel+0x576>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	0e9b      	lsrs	r3, r3, #26
 800202a:	3301      	adds	r3, #1
 800202c:	f003 021f 	and.w	r2, r3, #31
 8002030:	4613      	mov	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	051b      	lsls	r3, r3, #20
 8002038:	e018      	b.n	800206c <HAL_ADC_ConfigChannel+0x5a8>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800204c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002052:	2320      	movs	r3, #32
 8002054:	e003      	b.n	800205e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	3301      	adds	r3, #1
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800206c:	430b      	orrs	r3, r1
 800206e:	e07e      	b.n	800216e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002078:	2b00      	cmp	r3, #0
 800207a:	d107      	bne.n	800208c <HAL_ADC_ConfigChannel+0x5c8>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0e9b      	lsrs	r3, r3, #26
 8002082:	3301      	adds	r3, #1
 8002084:	069b      	lsls	r3, r3, #26
 8002086:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800208a:	e015      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x5f4>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800209e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80020a4:	2320      	movs	r3, #32
 80020a6:	e003      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80020a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	3301      	adds	r3, #1
 80020b2:	069b      	lsls	r3, r3, #26
 80020b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d109      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x614>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0e9b      	lsrs	r3, r3, #26
 80020ca:	3301      	adds	r3, #1
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	2101      	movs	r1, #1
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	e017      	b.n	8002108 <HAL_ADC_ConfigChannel+0x644>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	fa93 f3a3 	rbit	r3, r3
 80020e4:	61fb      	str	r3, [r7, #28]
  return result;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80020f0:	2320      	movs	r3, #32
 80020f2:	e003      	b.n	80020fc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	3301      	adds	r3, #1
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	2101      	movs	r1, #1
 8002104:	fa01 f303 	lsl.w	r3, r1, r3
 8002108:	ea42 0103 	orr.w	r1, r2, r3
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10d      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x670>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	0e9b      	lsrs	r3, r3, #26
 800211e:	3301      	adds	r3, #1
 8002120:	f003 021f 	and.w	r2, r3, #31
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	3b1e      	subs	r3, #30
 800212c:	051b      	lsls	r3, r3, #20
 800212e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002132:	e01b      	b.n	800216c <HAL_ADC_ConfigChannel+0x6a8>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	613b      	str	r3, [r7, #16]
  return result;
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800214c:	2320      	movs	r3, #32
 800214e:	e003      	b.n	8002158 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	3301      	adds	r3, #1
 800215a:	f003 021f 	and.w	r2, r3, #31
 800215e:	4613      	mov	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	3b1e      	subs	r3, #30
 8002166:	051b      	lsls	r3, r3, #20
 8002168:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800216c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002172:	4619      	mov	r1, r3
 8002174:	f7fe ff55 	bl	8001022 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_ADC_ConfigChannel+0x6e0>)
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80be 	beq.w	8002302 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800218e:	d004      	beq.n	800219a <HAL_ADC_ConfigChannel+0x6d6>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <HAL_ADC_ConfigChannel+0x6e4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d10a      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x6ec>
 800219a:	4b04      	ldr	r3, [pc, #16]	; (80021ac <HAL_ADC_ConfigChannel+0x6e8>)
 800219c:	e009      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x6ee>
 800219e:	bf00      	nop
 80021a0:	407f0000 	.word	0x407f0000
 80021a4:	80080000 	.word	0x80080000
 80021a8:	50000100 	.word	0x50000100
 80021ac:	50000300 	.word	0x50000300
 80021b0:	4b59      	ldr	r3, [pc, #356]	; (8002318 <HAL_ADC_ConfigChannel+0x854>)
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fe4a 	bl	8000e4c <LL_ADC_GetCommonPathInternalCh>
 80021b8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a56      	ldr	r2, [pc, #344]	; (800231c <HAL_ADC_ConfigChannel+0x858>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d004      	beq.n	80021d0 <HAL_ADC_ConfigChannel+0x70c>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a55      	ldr	r2, [pc, #340]	; (8002320 <HAL_ADC_ConfigChannel+0x85c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d13a      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d134      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021e4:	d005      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0x72e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a4e      	ldr	r2, [pc, #312]	; (8002324 <HAL_ADC_ConfigChannel+0x860>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	f040 8085 	bne.w	80022fc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021fa:	d004      	beq.n	8002206 <HAL_ADC_ConfigChannel+0x742>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a49      	ldr	r2, [pc, #292]	; (8002328 <HAL_ADC_ConfigChannel+0x864>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d101      	bne.n	800220a <HAL_ADC_ConfigChannel+0x746>
 8002206:	4a49      	ldr	r2, [pc, #292]	; (800232c <HAL_ADC_ConfigChannel+0x868>)
 8002208:	e000      	b.n	800220c <HAL_ADC_ConfigChannel+0x748>
 800220a:	4a43      	ldr	r2, [pc, #268]	; (8002318 <HAL_ADC_ConfigChannel+0x854>)
 800220c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002210:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f7fe fe05 	bl	8000e26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800221c:	4b44      	ldr	r3, [pc, #272]	; (8002330 <HAL_ADC_ConfigChannel+0x86c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	099b      	lsrs	r3, r3, #6
 8002222:	4a44      	ldr	r2, [pc, #272]	; (8002334 <HAL_ADC_ConfigChannel+0x870>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	099b      	lsrs	r3, r3, #6
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002236:	e002      	b.n	800223e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3b01      	subs	r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f9      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002244:	e05a      	b.n	80022fc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a3b      	ldr	r2, [pc, #236]	; (8002338 <HAL_ADC_ConfigChannel+0x874>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d125      	bne.n	800229c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002250:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002254:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d11f      	bne.n	800229c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a31      	ldr	r2, [pc, #196]	; (8002328 <HAL_ADC_ConfigChannel+0x864>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d104      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x7ac>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a34      	ldr	r2, [pc, #208]	; (800233c <HAL_ADC_ConfigChannel+0x878>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d047      	beq.n	8002300 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002278:	d004      	beq.n	8002284 <HAL_ADC_ConfigChannel+0x7c0>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a2a      	ldr	r2, [pc, #168]	; (8002328 <HAL_ADC_ConfigChannel+0x864>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d101      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x7c4>
 8002284:	4a29      	ldr	r2, [pc, #164]	; (800232c <HAL_ADC_ConfigChannel+0x868>)
 8002286:	e000      	b.n	800228a <HAL_ADC_ConfigChannel+0x7c6>
 8002288:	4a23      	ldr	r2, [pc, #140]	; (8002318 <HAL_ADC_ConfigChannel+0x854>)
 800228a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800228e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002292:	4619      	mov	r1, r3
 8002294:	4610      	mov	r0, r2
 8002296:	f7fe fdc6 	bl	8000e26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800229a:	e031      	b.n	8002300 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a27      	ldr	r2, [pc, #156]	; (8002340 <HAL_ADC_ConfigChannel+0x87c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d12d      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d127      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <HAL_ADC_ConfigChannel+0x864>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d022      	beq.n	8002302 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022c4:	d004      	beq.n	80022d0 <HAL_ADC_ConfigChannel+0x80c>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a17      	ldr	r2, [pc, #92]	; (8002328 <HAL_ADC_ConfigChannel+0x864>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d101      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x810>
 80022d0:	4a16      	ldr	r2, [pc, #88]	; (800232c <HAL_ADC_ConfigChannel+0x868>)
 80022d2:	e000      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x812>
 80022d4:	4a10      	ldr	r2, [pc, #64]	; (8002318 <HAL_ADC_ConfigChannel+0x854>)
 80022d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022de:	4619      	mov	r1, r3
 80022e0:	4610      	mov	r0, r2
 80022e2:	f7fe fda0 	bl	8000e26 <LL_ADC_SetCommonPathInternalCh>
 80022e6:	e00c      	b.n	8002302 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ec:	f043 0220 	orr.w	r2, r3, #32
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80022fa:	e002      	b.n	8002302 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022fc:	bf00      	nop
 80022fe:	e000      	b.n	8002302 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002300:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800230a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800230e:	4618      	mov	r0, r3
 8002310:	37d8      	adds	r7, #216	; 0xd8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	50000700 	.word	0x50000700
 800231c:	c3210000 	.word	0xc3210000
 8002320:	90c00010 	.word	0x90c00010
 8002324:	50000600 	.word	0x50000600
 8002328:	50000100 	.word	0x50000100
 800232c:	50000300 	.word	0x50000300
 8002330:	20000000 	.word	0x20000000
 8002334:	053e2d63 	.word	0x053e2d63
 8002338:	c7520000 	.word	0xc7520000
 800233c:	50000500 	.word	0x50000500
 8002340:	cb840000 	.word	0xcb840000

08002344 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe ff90 	bl	8001280 <LL_ADC_REG_IsConversionOngoing>
 8002360:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe ffb1 	bl	80012ce <LL_ADC_INJ_IsConversionOngoing>
 800236c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d103      	bne.n	800237c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8098 	beq.w	80024ac <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d02a      	beq.n	80023e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	7f5b      	ldrb	r3, [r3, #29]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d126      	bne.n	80023e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	7f1b      	ldrb	r3, [r3, #28]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d122      	bne.n	80023e0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800239a:	2301      	movs	r3, #1
 800239c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800239e:	e014      	b.n	80023ca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	4a45      	ldr	r2, [pc, #276]	; (80024b8 <ADC_ConversionStop+0x174>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d90d      	bls.n	80023c4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ac:	f043 0210 	orr.w	r2, r3, #16
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b8:	f043 0201 	orr.w	r2, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e074      	b.n	80024ae <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	3301      	adds	r3, #1
 80023c8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d4:	2b40      	cmp	r3, #64	; 0x40
 80023d6:	d1e3      	bne.n	80023a0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2240      	movs	r2, #64	; 0x40
 80023de:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d014      	beq.n	8002410 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe ff48 	bl	8001280 <LL_ADC_REG_IsConversionOngoing>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00c      	beq.n	8002410 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe ff05 	bl	800120a <LL_ADC_IsDisableOngoing>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d104      	bne.n	8002410 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe ff24 	bl	8001258 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d014      	beq.n	8002440 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe ff57 	bl	80012ce <LL_ADC_INJ_IsConversionOngoing>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00c      	beq.n	8002440 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe feed 	bl	800120a <LL_ADC_IsDisableOngoing>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d104      	bne.n	8002440 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe ff33 	bl	80012a6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d005      	beq.n	8002452 <ADC_ConversionStop+0x10e>
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d105      	bne.n	8002458 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800244c:	230c      	movs	r3, #12
 800244e:	617b      	str	r3, [r7, #20]
        break;
 8002450:	e005      	b.n	800245e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002452:	2308      	movs	r3, #8
 8002454:	617b      	str	r3, [r7, #20]
        break;
 8002456:	e002      	b.n	800245e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002458:	2304      	movs	r3, #4
 800245a:	617b      	str	r3, [r7, #20]
        break;
 800245c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800245e:	f7fe fcc3 	bl	8000de8 <HAL_GetTick>
 8002462:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002464:	e01b      	b.n	800249e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002466:	f7fe fcbf 	bl	8000de8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b05      	cmp	r3, #5
 8002472:	d914      	bls.n	800249e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00d      	beq.n	800249e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002486:	f043 0210 	orr.w	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e007      	b.n	80024ae <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1dc      	bne.n	8002466 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3720      	adds	r7, #32
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	a33fffff 	.word	0xa33fffff

080024bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe fe89 	bl	80011e4 <LL_ADC_IsEnabled>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d176      	bne.n	80025c6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	4b3c      	ldr	r3, [pc, #240]	; (80025d0 <ADC_Enable+0x114>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00d      	beq.n	8002502 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	f043 0210 	orr.w	r2, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f6:	f043 0201 	orr.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e062      	b.n	80025c8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fe44 	bl	8001194 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002514:	d004      	beq.n	8002520 <ADC_Enable+0x64>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a2e      	ldr	r2, [pc, #184]	; (80025d4 <ADC_Enable+0x118>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <ADC_Enable+0x68>
 8002520:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <ADC_Enable+0x11c>)
 8002522:	e000      	b.n	8002526 <ADC_Enable+0x6a>
 8002524:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <ADC_Enable+0x120>)
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe fc90 	bl	8000e4c <LL_ADC_GetCommonPathInternalCh>
 800252c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800252e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002532:	2b00      	cmp	r3, #0
 8002534:	d013      	beq.n	800255e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002536:	4b2a      	ldr	r3, [pc, #168]	; (80025e0 <ADC_Enable+0x124>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	099b      	lsrs	r3, r3, #6
 800253c:	4a29      	ldr	r2, [pc, #164]	; (80025e4 <ADC_Enable+0x128>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	099b      	lsrs	r3, r3, #6
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	4613      	mov	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002550:	e002      	b.n	8002558 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	3b01      	subs	r3, #1
 8002556:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f9      	bne.n	8002552 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800255e:	f7fe fc43 	bl	8000de8 <HAL_GetTick>
 8002562:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002564:	e028      	b.n	80025b8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fe3a 	bl	80011e4 <LL_ADC_IsEnabled>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d104      	bne.n	8002580 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fe0a 	bl	8001194 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002580:	f7fe fc32 	bl	8000de8 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d914      	bls.n	80025b8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	d00d      	beq.n	80025b8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a0:	f043 0210 	orr.w	r2, r3, #16
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e007      	b.n	80025c8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d1cf      	bne.n	8002566 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	8000003f 	.word	0x8000003f
 80025d4:	50000100 	.word	0x50000100
 80025d8:	50000300 	.word	0x50000300
 80025dc:	50000700 	.word	0x50000700
 80025e0:	20000000 	.word	0x20000000
 80025e4:	053e2d63 	.word	0x053e2d63

080025e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe fe08 	bl	800120a <LL_ADC_IsDisableOngoing>
 80025fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe fdef 	bl	80011e4 <LL_ADC_IsEnabled>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d047      	beq.n	800269c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d144      	bne.n	800269c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 030d 	and.w	r3, r3, #13
 800261c:	2b01      	cmp	r3, #1
 800261e:	d10c      	bne.n	800263a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe fdc9 	bl	80011bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2203      	movs	r2, #3
 8002630:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002632:	f7fe fbd9 	bl	8000de8 <HAL_GetTick>
 8002636:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002638:	e029      	b.n	800268e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	f043 0210 	orr.w	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264a:	f043 0201 	orr.w	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e023      	b.n	800269e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002656:	f7fe fbc7 	bl	8000de8 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d914      	bls.n	800268e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00d      	beq.n	800268e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	f043 0210 	orr.w	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002682:	f043 0201 	orr.w	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e007      	b.n	800269e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1dc      	bne.n	8002656 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <LL_ADC_IsEnabled>:
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <LL_ADC_IsEnabled+0x18>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <LL_ADC_IsEnabled+0x1a>
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_ADC_StartCalibration>:
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80026de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	609a      	str	r2, [r3, #8]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <LL_ADC_IsCalibrationOnGoing>:
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800270e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002712:	d101      	bne.n	8002718 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <LL_ADC_REG_IsConversionOngoing>:
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b04      	cmp	r3, #4
 8002738:	d101      	bne.n	800273e <LL_ADC_REG_IsConversionOngoing+0x18>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_ADCEx_Calibration_Start+0x1c>
 8002764:	2302      	movs	r3, #2
 8002766:	e04d      	b.n	8002804 <HAL_ADCEx_Calibration_Start+0xb8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff ff39 	bl	80025e8 <ADC_Disable>
 8002776:	4603      	mov	r3, r0
 8002778:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d136      	bne.n	80027ee <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002788:	f023 0302 	bic.w	r3, r3, #2
 800278c:	f043 0202 	orr.w	r2, r3, #2
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6839      	ldr	r1, [r7, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ff96 	bl	80026cc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027a0:	e014      	b.n	80027cc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	3301      	adds	r3, #1
 80027a6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4a18      	ldr	r2, [pc, #96]	; (800280c <HAL_ADCEx_Calibration_Start+0xc0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d90d      	bls.n	80027cc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	f023 0312 	bic.w	r3, r3, #18
 80027b8:	f043 0210 	orr.w	r2, r3, #16
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e01b      	b.n	8002804 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff94 	bl	80026fe <LL_ADC_IsCalibrationOnGoing>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1e2      	bne.n	80027a2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	f023 0303 	bic.w	r3, r3, #3
 80027e4:	f043 0201 	orr.w	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80027ec:	e005      	b.n	80027fa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f2:	f043 0210 	orr.w	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002802:	7bfb      	ldrb	r3, [r7, #15]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	0004de01 	.word	0x0004de01

08002810 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b0a1      	sub	sp, #132	; 0x84
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800282a:	2302      	movs	r3, #2
 800282c:	e0e7      	b.n	80029fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002836:	2300      	movs	r3, #0
 8002838:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800283a:	2300      	movs	r3, #0
 800283c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002846:	d102      	bne.n	800284e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002848:	4b6f      	ldr	r3, [pc, #444]	; (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	e009      	b.n	8002862 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a6e      	ldr	r2, [pc, #440]	; (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d102      	bne.n	800285e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002858:	4b6d      	ldr	r3, [pc, #436]	; (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	e001      	b.n	8002862 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10b      	bne.n	8002880 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	f043 0220 	orr.w	r2, r3, #32
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0be      	b.n	80029fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff4f 	bl	8002726 <LL_ADC_REG_IsConversionOngoing>
 8002888:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ff49 	bl	8002726 <LL_ADC_REG_IsConversionOngoing>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 80a0 	bne.w	80029dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800289c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f040 809c 	bne.w	80029dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028ac:	d004      	beq.n	80028b8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a55      	ldr	r2, [pc, #340]	; (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d101      	bne.n	80028bc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80028b8:	4b56      	ldr	r3, [pc, #344]	; (8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80028ba:	e000      	b.n	80028be <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80028bc:	4b56      	ldr	r3, [pc, #344]	; (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80028be:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d04b      	beq.n	8002960 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028da:	035b      	lsls	r3, r3, #13
 80028dc:	430b      	orrs	r3, r1
 80028de:	431a      	orrs	r2, r3
 80028e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028ec:	d004      	beq.n	80028f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a45      	ldr	r2, [pc, #276]	; (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d10f      	bne.n	8002918 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80028f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80028fc:	f7ff fed3 	bl	80026a6 <LL_ADC_IsEnabled>
 8002900:	4604      	mov	r4, r0
 8002902:	4841      	ldr	r0, [pc, #260]	; (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002904:	f7ff fecf 	bl	80026a6 <LL_ADC_IsEnabled>
 8002908:	4603      	mov	r3, r0
 800290a:	4323      	orrs	r3, r4
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	e012      	b.n	800293e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002918:	483c      	ldr	r0, [pc, #240]	; (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800291a:	f7ff fec4 	bl	80026a6 <LL_ADC_IsEnabled>
 800291e:	4604      	mov	r4, r0
 8002920:	483b      	ldr	r0, [pc, #236]	; (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002922:	f7ff fec0 	bl	80026a6 <LL_ADC_IsEnabled>
 8002926:	4603      	mov	r3, r0
 8002928:	431c      	orrs	r4, r3
 800292a:	483c      	ldr	r0, [pc, #240]	; (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800292c:	f7ff febb 	bl	80026a6 <LL_ADC_IsEnabled>
 8002930:	4603      	mov	r3, r0
 8002932:	4323      	orrs	r3, r4
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d056      	beq.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800294a:	f023 030f 	bic.w	r3, r3, #15
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	6811      	ldr	r1, [r2, #0]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	6892      	ldr	r2, [r2, #8]
 8002956:	430a      	orrs	r2, r1
 8002958:	431a      	orrs	r2, r3
 800295a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800295c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800295e:	e047      	b.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800296a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002974:	d004      	beq.n	8002980 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a23      	ldr	r2, [pc, #140]	; (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d10f      	bne.n	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002980:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002984:	f7ff fe8f 	bl	80026a6 <LL_ADC_IsEnabled>
 8002988:	4604      	mov	r4, r0
 800298a:	481f      	ldr	r0, [pc, #124]	; (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800298c:	f7ff fe8b 	bl	80026a6 <LL_ADC_IsEnabled>
 8002990:	4603      	mov	r3, r0
 8002992:	4323      	orrs	r3, r4
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	e012      	b.n	80029c6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80029a0:	481a      	ldr	r0, [pc, #104]	; (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029a2:	f7ff fe80 	bl	80026a6 <LL_ADC_IsEnabled>
 80029a6:	4604      	mov	r4, r0
 80029a8:	4819      	ldr	r0, [pc, #100]	; (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029aa:	f7ff fe7c 	bl	80026a6 <LL_ADC_IsEnabled>
 80029ae:	4603      	mov	r3, r0
 80029b0:	431c      	orrs	r4, r3
 80029b2:	481a      	ldr	r0, [pc, #104]	; (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80029b4:	f7ff fe77 	bl	80026a6 <LL_ADC_IsEnabled>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4323      	orrs	r3, r4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d012      	beq.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029d2:	f023 030f 	bic.w	r3, r3, #15
 80029d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80029d8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029da:	e009      	b.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e0:	f043 0220 	orr.w	r2, r3, #32
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80029ee:	e000      	b.n	80029f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80029fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3784      	adds	r7, #132	; 0x84
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd90      	pop	{r4, r7, pc}
 8002a06:	bf00      	nop
 8002a08:	50000100 	.word	0x50000100
 8002a0c:	50000400 	.word	0x50000400
 8002a10:	50000500 	.word	0x50000500
 8002a14:	50000300 	.word	0x50000300
 8002a18:	50000700 	.word	0x50000700
 8002a1c:	50000600 	.word	0x50000600

08002a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a52:	4a04      	ldr	r2, [pc, #16]	; (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	60d3      	str	r3, [r2, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <__NVIC_GetPriorityGrouping+0x18>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	f003 0307 	and.w	r3, r3, #7
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	db0b      	blt.n	8002aae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	f003 021f 	and.w	r2, r3, #31
 8002a9c:	4907      	ldr	r1, [pc, #28]	; (8002abc <__NVIC_EnableIRQ+0x38>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	e000e100 	.word	0xe000e100

08002ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	6039      	str	r1, [r7, #0]
 8002aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	db0a      	blt.n	8002aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	490c      	ldr	r1, [pc, #48]	; (8002b0c <__NVIC_SetPriority+0x4c>)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	0112      	lsls	r2, r2, #4
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae8:	e00a      	b.n	8002b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	4908      	ldr	r1, [pc, #32]	; (8002b10 <__NVIC_SetPriority+0x50>)
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	3b04      	subs	r3, #4
 8002af8:	0112      	lsls	r2, r2, #4
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	440b      	add	r3, r1
 8002afe:	761a      	strb	r2, [r3, #24]
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000e100 	.word	0xe000e100
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f1c3 0307 	rsb	r3, r3, #7
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	bf28      	it	cs
 8002b32:	2304      	movcs	r3, #4
 8002b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	d902      	bls.n	8002b44 <NVIC_EncodePriority+0x30>
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3b03      	subs	r3, #3
 8002b42:	e000      	b.n	8002b46 <NVIC_EncodePriority+0x32>
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43da      	mvns	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	401a      	ands	r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	43d9      	mvns	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b6c:	4313      	orrs	r3, r2
         );
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3724      	adds	r7, #36	; 0x24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b8c:	d301      	bcc.n	8002b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e00f      	b.n	8002bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b92:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <SysTick_Config+0x40>)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b9a:	210f      	movs	r1, #15
 8002b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ba0:	f7ff ff8e 	bl	8002ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <SysTick_Config+0x40>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002baa:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <SysTick_Config+0x40>)
 8002bac:	2207      	movs	r2, #7
 8002bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	e000e010 	.word	0xe000e010

08002bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ff29 	bl	8002a20 <__NVIC_SetPriorityGrouping>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002be4:	f7ff ff40 	bl	8002a68 <__NVIC_GetPriorityGrouping>
 8002be8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	6978      	ldr	r0, [r7, #20]
 8002bf0:	f7ff ff90 	bl	8002b14 <NVIC_EncodePriority>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff5f 	bl	8002ac0 <__NVIC_SetPriority>
}
 8002c02:	bf00      	nop
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	4603      	mov	r3, r0
 8002c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff33 	bl	8002a84 <__NVIC_EnableIRQ>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ffa4 	bl	8002b7c <SysTick_Config>
 8002c34:	4603      	mov	r3, r0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c4e:	e15a      	b.n	8002f06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	2101      	movs	r1, #1
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 814c 	beq.w	8002f00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d005      	beq.n	8002c80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d130      	bne.n	8002ce2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	f003 0201 	and.w	r2, r3, #1
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d017      	beq.n	8002d1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4013      	ands	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d123      	bne.n	8002d72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	08da      	lsrs	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3208      	adds	r2, #8
 8002d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	220f      	movs	r2, #15
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	691a      	ldr	r2, [r3, #16]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	08da      	lsrs	r2, r3, #3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3208      	adds	r2, #8
 8002d6c:	6939      	ldr	r1, [r7, #16]
 8002d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4013      	ands	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 0203 	and.w	r2, r3, #3
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 80a6 	beq.w	8002f00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db4:	4b5b      	ldr	r3, [pc, #364]	; (8002f24 <HAL_GPIO_Init+0x2e4>)
 8002db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db8:	4a5a      	ldr	r2, [pc, #360]	; (8002f24 <HAL_GPIO_Init+0x2e4>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6613      	str	r3, [r2, #96]	; 0x60
 8002dc0:	4b58      	ldr	r3, [pc, #352]	; (8002f24 <HAL_GPIO_Init+0x2e4>)
 8002dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dcc:	4a56      	ldr	r2, [pc, #344]	; (8002f28 <HAL_GPIO_Init+0x2e8>)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	220f      	movs	r2, #15
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4013      	ands	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002df6:	d01f      	beq.n	8002e38 <HAL_GPIO_Init+0x1f8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a4c      	ldr	r2, [pc, #304]	; (8002f2c <HAL_GPIO_Init+0x2ec>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d019      	beq.n	8002e34 <HAL_GPIO_Init+0x1f4>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a4b      	ldr	r2, [pc, #300]	; (8002f30 <HAL_GPIO_Init+0x2f0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d013      	beq.n	8002e30 <HAL_GPIO_Init+0x1f0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a4a      	ldr	r2, [pc, #296]	; (8002f34 <HAL_GPIO_Init+0x2f4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00d      	beq.n	8002e2c <HAL_GPIO_Init+0x1ec>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a49      	ldr	r2, [pc, #292]	; (8002f38 <HAL_GPIO_Init+0x2f8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d007      	beq.n	8002e28 <HAL_GPIO_Init+0x1e8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a48      	ldr	r2, [pc, #288]	; (8002f3c <HAL_GPIO_Init+0x2fc>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d101      	bne.n	8002e24 <HAL_GPIO_Init+0x1e4>
 8002e20:	2305      	movs	r3, #5
 8002e22:	e00a      	b.n	8002e3a <HAL_GPIO_Init+0x1fa>
 8002e24:	2306      	movs	r3, #6
 8002e26:	e008      	b.n	8002e3a <HAL_GPIO_Init+0x1fa>
 8002e28:	2304      	movs	r3, #4
 8002e2a:	e006      	b.n	8002e3a <HAL_GPIO_Init+0x1fa>
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e004      	b.n	8002e3a <HAL_GPIO_Init+0x1fa>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e002      	b.n	8002e3a <HAL_GPIO_Init+0x1fa>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <HAL_GPIO_Init+0x1fa>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	f002 0203 	and.w	r2, r2, #3
 8002e40:	0092      	lsls	r2, r2, #2
 8002e42:	4093      	lsls	r3, r2
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e4a:	4937      	ldr	r1, [pc, #220]	; (8002f28 <HAL_GPIO_Init+0x2e8>)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	3302      	adds	r3, #2
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e58:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <HAL_GPIO_Init+0x300>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e7c:	4a30      	ldr	r2, [pc, #192]	; (8002f40 <HAL_GPIO_Init+0x300>)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e82:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <HAL_GPIO_Init+0x300>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ea6:	4a26      	ldr	r2, [pc, #152]	; (8002f40 <HAL_GPIO_Init+0x300>)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002eac:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_GPIO_Init+0x300>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ed0:	4a1b      	ldr	r2, [pc, #108]	; (8002f40 <HAL_GPIO_Init+0x300>)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <HAL_GPIO_Init+0x300>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002efa:	4a11      	ldr	r2, [pc, #68]	; (8002f40 <HAL_GPIO_Init+0x300>)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3301      	adds	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f47f ae9d 	bne.w	8002c50 <HAL_GPIO_Init+0x10>
  }
}
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40010000 	.word	0x40010000
 8002f2c:	48000400 	.word	0x48000400
 8002f30:	48000800 	.word	0x48000800
 8002f34:	48000c00 	.word	0x48000c00
 8002f38:	48001000 	.word	0x48001000
 8002f3c:	48001400 	.word	0x48001400
 8002f40:	40010400 	.word	0x40010400

08002f44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d141      	bne.n	8002fd6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f52:	4b4b      	ldr	r3, [pc, #300]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5e:	d131      	bne.n	8002fc4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f60:	4b47      	ldr	r3, [pc, #284]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f66:	4a46      	ldr	r2, [pc, #280]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f70:	4b43      	ldr	r3, [pc, #268]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f78:	4a41      	ldr	r2, [pc, #260]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f80:	4b40      	ldr	r3, [pc, #256]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2232      	movs	r2, #50	; 0x32
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	4a3f      	ldr	r2, [pc, #252]	; (8003088 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f90:	0c9b      	lsrs	r3, r3, #18
 8002f92:	3301      	adds	r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f96:	e002      	b.n	8002f9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f9e:	4b38      	ldr	r3, [pc, #224]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002faa:	d102      	bne.n	8002fb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f2      	bne.n	8002f98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fb2:	4b33      	ldr	r3, [pc, #204]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fbe:	d158      	bne.n	8003072 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e057      	b.n	8003074 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fca:	4a2d      	ldr	r2, [pc, #180]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fd4:	e04d      	b.n	8003072 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fdc:	d141      	bne.n	8003062 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fde:	4b28      	ldr	r3, [pc, #160]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fea:	d131      	bne.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fec:	4b24      	ldr	r3, [pc, #144]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ff2:	4a23      	ldr	r2, [pc, #140]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ffc:	4b20      	ldr	r3, [pc, #128]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003004:	4a1e      	ldr	r2, [pc, #120]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800300a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800300c:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2232      	movs	r2, #50	; 0x32
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	4a1c      	ldr	r2, [pc, #112]	; (8003088 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003018:	fba2 2303 	umull	r2, r3, r2, r3
 800301c:	0c9b      	lsrs	r3, r3, #18
 800301e:	3301      	adds	r3, #1
 8003020:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003022:	e002      	b.n	800302a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3b01      	subs	r3, #1
 8003028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003036:	d102      	bne.n	800303e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f2      	bne.n	8003024 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304a:	d112      	bne.n	8003072 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e011      	b.n	8003074 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003056:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003060:	e007      	b.n	8003072 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003062:	4b07      	ldr	r3, [pc, #28]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800306a:	4a05      	ldr	r2, [pc, #20]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003070:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	40007000 	.word	0x40007000
 8003084:	20000000 	.word	0x20000000
 8003088:	431bde83 	.word	0x431bde83

0800308c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e2fe      	b.n	800369c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d075      	beq.n	8003196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030aa:	4b97      	ldr	r3, [pc, #604]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b4:	4b94      	ldr	r3, [pc, #592]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	2b0c      	cmp	r3, #12
 80030c2:	d102      	bne.n	80030ca <HAL_RCC_OscConfig+0x3e>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	d002      	beq.n	80030d0 <HAL_RCC_OscConfig+0x44>
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d10b      	bne.n	80030e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d0:	4b8d      	ldr	r3, [pc, #564]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d05b      	beq.n	8003194 <HAL_RCC_OscConfig+0x108>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d157      	bne.n	8003194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e2d9      	b.n	800369c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f0:	d106      	bne.n	8003100 <HAL_RCC_OscConfig+0x74>
 80030f2:	4b85      	ldr	r3, [pc, #532]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a84      	ldr	r2, [pc, #528]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e01d      	b.n	800313c <HAL_RCC_OscConfig+0xb0>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003108:	d10c      	bne.n	8003124 <HAL_RCC_OscConfig+0x98>
 800310a:	4b7f      	ldr	r3, [pc, #508]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a7e      	ldr	r2, [pc, #504]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	4b7c      	ldr	r3, [pc, #496]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a7b      	ldr	r2, [pc, #492]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 800311c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e00b      	b.n	800313c <HAL_RCC_OscConfig+0xb0>
 8003124:	4b78      	ldr	r3, [pc, #480]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a77      	ldr	r2, [pc, #476]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 800312a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	4b75      	ldr	r3, [pc, #468]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a74      	ldr	r2, [pc, #464]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800313a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d013      	beq.n	800316c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fd fe50 	bl	8000de8 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800314c:	f7fd fe4c 	bl	8000de8 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	; 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e29e      	b.n	800369c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800315e:	4b6a      	ldr	r3, [pc, #424]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0xc0>
 800316a:	e014      	b.n	8003196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fd fe3c 	bl	8000de8 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003174:	f7fd fe38 	bl	8000de8 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e28a      	b.n	800369c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003186:	4b60      	ldr	r3, [pc, #384]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0xe8>
 8003192:	e000      	b.n	8003196 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d075      	beq.n	800328e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031a2:	4b59      	ldr	r3, [pc, #356]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031ac:	4b56      	ldr	r3, [pc, #344]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b0c      	cmp	r3, #12
 80031ba:	d102      	bne.n	80031c2 <HAL_RCC_OscConfig+0x136>
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d002      	beq.n	80031c8 <HAL_RCC_OscConfig+0x13c>
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d11f      	bne.n	8003208 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031c8:	4b4f      	ldr	r3, [pc, #316]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_RCC_OscConfig+0x154>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e25d      	b.n	800369c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e0:	4b49      	ldr	r3, [pc, #292]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	061b      	lsls	r3, r3, #24
 80031ee:	4946      	ldr	r1, [pc, #280]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031f4:	4b45      	ldr	r3, [pc, #276]	; (800330c <HAL_RCC_OscConfig+0x280>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd fda9 	bl	8000d50 <HAL_InitTick>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d043      	beq.n	800328c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e249      	b.n	800369c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d023      	beq.n	8003258 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003210:	4b3d      	ldr	r3, [pc, #244]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a3c      	ldr	r2, [pc, #240]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fd fde4 	bl	8000de8 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003224:	f7fd fde0 	bl	8000de8 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e232      	b.n	800369c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003236:	4b34      	ldr	r3, [pc, #208]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003242:	4b31      	ldr	r3, [pc, #196]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	061b      	lsls	r3, r3, #24
 8003250:	492d      	ldr	r1, [pc, #180]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
 8003256:	e01a      	b.n	800328e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003258:	4b2b      	ldr	r3, [pc, #172]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a2a      	ldr	r2, [pc, #168]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 800325e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fd fdc0 	bl	8000de8 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800326c:	f7fd fdbc 	bl	8000de8 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e20e      	b.n	800369c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800327e:	4b22      	ldr	r3, [pc, #136]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x1e0>
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800328c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d041      	beq.n	800331e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01c      	beq.n	80032dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a2:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80032a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a8:	4a17      	ldr	r2, [pc, #92]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b2:	f7fd fd99 	bl	8000de8 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ba:	f7fd fd95 	bl	8000de8 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e1e7      	b.n	800369c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80032ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0ef      	beq.n	80032ba <HAL_RCC_OscConfig+0x22e>
 80032da:	e020      	b.n	800331e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80032de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e2:	4a09      	ldr	r2, [pc, #36]	; (8003308 <HAL_RCC_OscConfig+0x27c>)
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7fd fd7c 	bl	8000de8 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032f2:	e00d      	b.n	8003310 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f4:	f7fd fd78 	bl	8000de8 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d906      	bls.n	8003310 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1ca      	b.n	800369c <HAL_RCC_OscConfig+0x610>
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003310:	4b8c      	ldr	r3, [pc, #560]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 8003312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1ea      	bne.n	80032f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80a6 	beq.w	8003478 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332c:	2300      	movs	r3, #0
 800332e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003330:	4b84      	ldr	r3, [pc, #528]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 8003332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_OscConfig+0x2b4>
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <HAL_RCC_OscConfig+0x2b6>
 8003340:	2300      	movs	r3, #0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00d      	beq.n	8003362 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003346:	4b7f      	ldr	r3, [pc, #508]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 8003348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334a:	4a7e      	ldr	r2, [pc, #504]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 800334c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003350:	6593      	str	r3, [r2, #88]	; 0x58
 8003352:	4b7c      	ldr	r3, [pc, #496]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 8003354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800335e:	2301      	movs	r3, #1
 8003360:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003362:	4b79      	ldr	r3, [pc, #484]	; (8003548 <HAL_RCC_OscConfig+0x4bc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d118      	bne.n	80033a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0x4bc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a75      	ldr	r2, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x4bc>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800337a:	f7fd fd35 	bl	8000de8 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003382:	f7fd fd31 	bl	8000de8 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e183      	b.n	800369c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003394:	4b6c      	ldr	r3, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x4bc>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d108      	bne.n	80033ba <HAL_RCC_OscConfig+0x32e>
 80033a8:	4b66      	ldr	r3, [pc, #408]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	4a65      	ldr	r2, [pc, #404]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033b8:	e024      	b.n	8003404 <HAL_RCC_OscConfig+0x378>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b05      	cmp	r3, #5
 80033c0:	d110      	bne.n	80033e4 <HAL_RCC_OscConfig+0x358>
 80033c2:	4b60      	ldr	r3, [pc, #384]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c8:	4a5e      	ldr	r2, [pc, #376]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033ca:	f043 0304 	orr.w	r3, r3, #4
 80033ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033d2:	4b5c      	ldr	r3, [pc, #368]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d8:	4a5a      	ldr	r2, [pc, #360]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033e2:	e00f      	b.n	8003404 <HAL_RCC_OscConfig+0x378>
 80033e4:	4b57      	ldr	r3, [pc, #348]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	4a56      	ldr	r2, [pc, #344]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033f4:	4b53      	ldr	r3, [pc, #332]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	4a52      	ldr	r2, [pc, #328]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80033fc:	f023 0304 	bic.w	r3, r3, #4
 8003400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d016      	beq.n	800343a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7fd fcec 	bl	8000de8 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003412:	e00a      	b.n	800342a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fd fce8 	bl	8000de8 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e138      	b.n	800369c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800342a:	4b46      	ldr	r3, [pc, #280]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ed      	beq.n	8003414 <HAL_RCC_OscConfig+0x388>
 8003438:	e015      	b.n	8003466 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343a:	f7fd fcd5 	bl	8000de8 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003440:	e00a      	b.n	8003458 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fd fcd1 	bl	8000de8 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003450:	4293      	cmp	r3, r2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e121      	b.n	800369c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003458:	4b3a      	ldr	r3, [pc, #232]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1ed      	bne.n	8003442 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003466:	7ffb      	ldrb	r3, [r7, #31]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d105      	bne.n	8003478 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346c:	4b35      	ldr	r3, [pc, #212]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003470:	4a34      	ldr	r2, [pc, #208]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 8003472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003476:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d03c      	beq.n	80034fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01c      	beq.n	80034c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800348c:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 800348e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003492:	4a2c      	ldr	r2, [pc, #176]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349c:	f7fd fca4 	bl	8000de8 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034a4:	f7fd fca0 	bl	8000de8 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e0f2      	b.n	800369c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034b6:	4b23      	ldr	r3, [pc, #140]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80034b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0ef      	beq.n	80034a4 <HAL_RCC_OscConfig+0x418>
 80034c4:	e01b      	b.n	80034fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034c6:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80034c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034cc:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d6:	f7fd fc87 	bl	8000de8 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034de:	f7fd fc83 	bl	8000de8 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e0d5      	b.n	800369c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034f0:	4b14      	ldr	r3, [pc, #80]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 80034f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1ef      	bne.n	80034de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80c9 	beq.w	800369a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003508:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b0c      	cmp	r3, #12
 8003512:	f000 8083 	beq.w	800361c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d15e      	bne.n	80035dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a08      	ldr	r2, [pc, #32]	; (8003544 <HAL_RCC_OscConfig+0x4b8>)
 8003524:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fd fc5d 	bl	8000de8 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003530:	e00c      	b.n	800354c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003532:	f7fd fc59 	bl	8000de8 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d905      	bls.n	800354c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e0ab      	b.n	800369c <HAL_RCC_OscConfig+0x610>
 8003544:	40021000 	.word	0x40021000
 8003548:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800354c:	4b55      	ldr	r3, [pc, #340]	; (80036a4 <HAL_RCC_OscConfig+0x618>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ec      	bne.n	8003532 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003558:	4b52      	ldr	r3, [pc, #328]	; (80036a4 <HAL_RCC_OscConfig+0x618>)
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	4b52      	ldr	r3, [pc, #328]	; (80036a8 <HAL_RCC_OscConfig+0x61c>)
 800355e:	4013      	ands	r3, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6a11      	ldr	r1, [r2, #32]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003568:	3a01      	subs	r2, #1
 800356a:	0112      	lsls	r2, r2, #4
 800356c:	4311      	orrs	r1, r2
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003572:	0212      	lsls	r2, r2, #8
 8003574:	4311      	orrs	r1, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800357a:	0852      	lsrs	r2, r2, #1
 800357c:	3a01      	subs	r2, #1
 800357e:	0552      	lsls	r2, r2, #21
 8003580:	4311      	orrs	r1, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003586:	0852      	lsrs	r2, r2, #1
 8003588:	3a01      	subs	r2, #1
 800358a:	0652      	lsls	r2, r2, #25
 800358c:	4311      	orrs	r1, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003592:	06d2      	lsls	r2, r2, #27
 8003594:	430a      	orrs	r2, r1
 8003596:	4943      	ldr	r1, [pc, #268]	; (80036a4 <HAL_RCC_OscConfig+0x618>)
 8003598:	4313      	orrs	r3, r2
 800359a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800359c:	4b41      	ldr	r3, [pc, #260]	; (80036a4 <HAL_RCC_OscConfig+0x618>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a40      	ldr	r2, [pc, #256]	; (80036a4 <HAL_RCC_OscConfig+0x618>)
 80035a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035a8:	4b3e      	ldr	r3, [pc, #248]	; (80036a4 <HAL_RCC_OscConfig+0x618>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a3d      	ldr	r2, [pc, #244]	; (80036a4 <HAL_RCC_OscConfig+0x618>)
 80035ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fd fc18 	bl	8000de8 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035bc:	f7fd fc14 	bl	8000de8 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e066      	b.n	800369c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ce:	4b35      	ldr	r3, [pc, #212]	; (80036a4 <HAL_RCC_OscConfig+0x618>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x530>
 80035da:	e05e      	b.n	800369a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035dc:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <HAL_RCC_OscConfig+0x618>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a30      	ldr	r2, [pc, #192]	; (80036a4 <HAL_RCC_OscConfig+0x618>)
 80035e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fd fbfe 	bl	8000de8 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fd fbfa 	bl	8000de8 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e04c      	b.n	800369c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003602:	4b28      	ldr	r3, [pc, #160]	; (80036a4 <HAL_RCC_OscConfig+0x618>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800360e:	4b25      	ldr	r3, [pc, #148]	; (80036a4 <HAL_RCC_OscConfig+0x618>)
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	4924      	ldr	r1, [pc, #144]	; (80036a4 <HAL_RCC_OscConfig+0x618>)
 8003614:	4b25      	ldr	r3, [pc, #148]	; (80036ac <HAL_RCC_OscConfig+0x620>)
 8003616:	4013      	ands	r3, r2
 8003618:	60cb      	str	r3, [r1, #12]
 800361a:	e03e      	b.n	800369a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e039      	b.n	800369c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003628:	4b1e      	ldr	r3, [pc, #120]	; (80036a4 <HAL_RCC_OscConfig+0x618>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f003 0203 	and.w	r2, r3, #3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	429a      	cmp	r2, r3
 800363a:	d12c      	bne.n	8003696 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	3b01      	subs	r3, #1
 8003648:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d123      	bne.n	8003696 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d11b      	bne.n	8003696 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800366a:	429a      	cmp	r2, r3
 800366c:	d113      	bne.n	8003696 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	085b      	lsrs	r3, r3, #1
 800367a:	3b01      	subs	r3, #1
 800367c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d109      	bne.n	8003696 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	3b01      	subs	r3, #1
 8003690:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003692:	429a      	cmp	r2, r3
 8003694:	d001      	beq.n	800369a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000
 80036a8:	019f800c 	.word	0x019f800c
 80036ac:	feeefffc 	.word	0xfeeefffc

080036b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e11e      	b.n	8003906 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c8:	4b91      	ldr	r3, [pc, #580]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d910      	bls.n	80036f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b8e      	ldr	r3, [pc, #568]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 020f 	bic.w	r2, r3, #15
 80036de:	498c      	ldr	r1, [pc, #560]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e6:	4b8a      	ldr	r3, [pc, #552]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d001      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e106      	b.n	8003906 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d073      	beq.n	80037ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b03      	cmp	r3, #3
 800370a:	d129      	bne.n	8003760 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800370c:	4b81      	ldr	r3, [pc, #516]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0f4      	b.n	8003906 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800371c:	f000 f99e 	bl	8003a5c <RCC_GetSysClockFreqFromPLLSource>
 8003720:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4a7c      	ldr	r2, [pc, #496]	; (8003918 <HAL_RCC_ClockConfig+0x268>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d93f      	bls.n	80037aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800372a:	4b7a      	ldr	r3, [pc, #488]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800373e:	2b00      	cmp	r3, #0
 8003740:	d033      	beq.n	80037aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003746:	2b00      	cmp	r3, #0
 8003748:	d12f      	bne.n	80037aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800374a:	4b72      	ldr	r3, [pc, #456]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003752:	4a70      	ldr	r2, [pc, #448]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 8003754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003758:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	e024      	b.n	80037aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d107      	bne.n	8003778 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003768:	4b6a      	ldr	r3, [pc, #424]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d109      	bne.n	8003788 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0c6      	b.n	8003906 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003778:	4b66      	ldr	r3, [pc, #408]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0be      	b.n	8003906 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003788:	f000 f8ce 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 800378c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4a61      	ldr	r2, [pc, #388]	; (8003918 <HAL_RCC_ClockConfig+0x268>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d909      	bls.n	80037aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003796:	4b5f      	ldr	r3, [pc, #380]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800379e:	4a5d      	ldr	r2, [pc, #372]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80037a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037aa:	4b5a      	ldr	r3, [pc, #360]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f023 0203 	bic.w	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4957      	ldr	r1, [pc, #348]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037bc:	f7fd fb14 	bl	8000de8 <HAL_GetTick>
 80037c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c2:	e00a      	b.n	80037da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c4:	f7fd fb10 	bl	8000de8 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e095      	b.n	8003906 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	4b4e      	ldr	r3, [pc, #312]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 020c 	and.w	r2, r3, #12
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d1eb      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d023      	beq.n	8003840 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003804:	4b43      	ldr	r3, [pc, #268]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a42      	ldr	r2, [pc, #264]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800380a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800380e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800381c:	4b3d      	ldr	r3, [pc, #244]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003824:	4a3b      	ldr	r2, [pc, #236]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 8003826:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800382a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382c:	4b39      	ldr	r3, [pc, #228]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4936      	ldr	r1, [pc, #216]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
 800383e:	e008      	b.n	8003852 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2b80      	cmp	r3, #128	; 0x80
 8003844:	d105      	bne.n	8003852 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003846:	4b33      	ldr	r3, [pc, #204]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	4a32      	ldr	r2, [pc, #200]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 800384c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003850:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003852:	4b2f      	ldr	r3, [pc, #188]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d21d      	bcs.n	800389c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003860:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 020f 	bic.w	r2, r3, #15
 8003868:	4929      	ldr	r1, [pc, #164]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003870:	f7fd faba 	bl	8000de8 <HAL_GetTick>
 8003874:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	e00a      	b.n	800388e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003878:	f7fd fab6 	bl	8000de8 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	; 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e03b      	b.n	8003906 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388e:	4b20      	ldr	r3, [pc, #128]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d1ed      	bne.n	8003878 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a8:	4b1a      	ldr	r3, [pc, #104]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4917      	ldr	r1, [pc, #92]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038c6:	4b13      	ldr	r3, [pc, #76]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	490f      	ldr	r1, [pc, #60]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038da:	f000 f825 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 80038de:	4602      	mov	r2, r0
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <HAL_RCC_ClockConfig+0x264>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	490c      	ldr	r1, [pc, #48]	; (800391c <HAL_RCC_ClockConfig+0x26c>)
 80038ec:	5ccb      	ldrb	r3, [r1, r3]
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	fa22 f303 	lsr.w	r3, r2, r3
 80038f6:	4a0a      	ldr	r2, [pc, #40]	; (8003920 <HAL_RCC_ClockConfig+0x270>)
 80038f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <HAL_RCC_ClockConfig+0x274>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fd fa26 	bl	8000d50 <HAL_InitTick>
 8003904:	4603      	mov	r3, r0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40022000 	.word	0x40022000
 8003914:	40021000 	.word	0x40021000
 8003918:	04c4b400 	.word	0x04c4b400
 800391c:	08006478 	.word	0x08006478
 8003920:	20000000 	.word	0x20000000
 8003924:	20000004 	.word	0x20000004

08003928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800392e:	4b2c      	ldr	r3, [pc, #176]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b04      	cmp	r3, #4
 8003938:	d102      	bne.n	8003940 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800393a:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	e047      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003940:	4b27      	ldr	r3, [pc, #156]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 030c 	and.w	r3, r3, #12
 8003948:	2b08      	cmp	r3, #8
 800394a:	d102      	bne.n	8003952 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800394c:	4b26      	ldr	r3, [pc, #152]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	e03e      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003952:	4b23      	ldr	r3, [pc, #140]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 030c 	and.w	r3, r3, #12
 800395a:	2b0c      	cmp	r3, #12
 800395c:	d136      	bne.n	80039cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800395e:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003968:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	3301      	adds	r3, #1
 8003974:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d10c      	bne.n	8003996 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800397c:	4a1a      	ldr	r2, [pc, #104]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003986:	68d2      	ldr	r2, [r2, #12]
 8003988:	0a12      	lsrs	r2, r2, #8
 800398a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	617b      	str	r3, [r7, #20]
      break;
 8003994:	e00c      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003996:	4a13      	ldr	r2, [pc, #76]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	4a10      	ldr	r2, [pc, #64]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039a0:	68d2      	ldr	r2, [r2, #12]
 80039a2:	0a12      	lsrs	r2, r2, #8
 80039a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039a8:	fb02 f303 	mul.w	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
      break;
 80039ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	0e5b      	lsrs	r3, r3, #25
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	3301      	adds	r3, #1
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	e001      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039d0:	693b      	ldr	r3, [r7, #16]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000
 80039e4:	00f42400 	.word	0x00f42400
 80039e8:	007a1200 	.word	0x007a1200

080039ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80039f2:	681b      	ldr	r3, [r3, #0]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	20000000 	.word	0x20000000

08003a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a08:	f7ff fff0 	bl	80039ec <HAL_RCC_GetHCLKFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4904      	ldr	r1, [pc, #16]	; (8003a2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	08006488 	.word	0x08006488

08003a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a34:	f7ff ffda 	bl	80039ec <HAL_RCC_GetHCLKFreq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	0adb      	lsrs	r3, r3, #11
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	4904      	ldr	r1, [pc, #16]	; (8003a58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a46:	5ccb      	ldrb	r3, [r1, r3]
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40021000 	.word	0x40021000
 8003a58:	08006488 	.word	0x08006488

08003a5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a62:	4b1e      	ldr	r3, [pc, #120]	; (8003adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	3301      	adds	r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d10c      	bne.n	8003a9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a80:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	4a14      	ldr	r2, [pc, #80]	; (8003adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a8a:	68d2      	ldr	r2, [r2, #12]
 8003a8c:	0a12      	lsrs	r2, r2, #8
 8003a8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	617b      	str	r3, [r7, #20]
    break;
 8003a98:	e00c      	b.n	8003ab4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a9a:	4a12      	ldr	r2, [pc, #72]	; (8003ae4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa2:	4a0e      	ldr	r2, [pc, #56]	; (8003adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aa4:	68d2      	ldr	r2, [r2, #12]
 8003aa6:	0a12      	lsrs	r2, r2, #8
 8003aa8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003aac:	fb02 f303 	mul.w	r3, r2, r3
 8003ab0:	617b      	str	r3, [r7, #20]
    break;
 8003ab2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ab4:	4b09      	ldr	r3, [pc, #36]	; (8003adc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	0e5b      	lsrs	r3, r3, #25
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ace:	687b      	ldr	r3, [r7, #4]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	007a1200 	.word	0x007a1200
 8003ae4:	00f42400 	.word	0x00f42400

08003ae8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003af0:	2300      	movs	r3, #0
 8003af2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003af4:	2300      	movs	r3, #0
 8003af6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8098 	beq.w	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b06:	2300      	movs	r3, #0
 8003b08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b0a:	4b43      	ldr	r3, [pc, #268]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10d      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b16:	4b40      	ldr	r3, [pc, #256]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	4a3f      	ldr	r2, [pc, #252]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b20:	6593      	str	r3, [r2, #88]	; 0x58
 8003b22:	4b3d      	ldr	r3, [pc, #244]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b32:	4b3a      	ldr	r3, [pc, #232]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a39      	ldr	r2, [pc, #228]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b3e:	f7fd f953 	bl	8000de8 <HAL_GetTick>
 8003b42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b44:	e009      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b46:	f7fd f94f 	bl	8000de8 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d902      	bls.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	74fb      	strb	r3, [r7, #19]
        break;
 8003b58:	e005      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b5a:	4b30      	ldr	r3, [pc, #192]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0ef      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b66:	7cfb      	ldrb	r3, [r7, #19]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d159      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b6c:	4b2a      	ldr	r3, [pc, #168]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01e      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d019      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b88:	4b23      	ldr	r3, [pc, #140]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b94:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	4a1f      	ldr	r2, [pc, #124]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba4:	4b1c      	ldr	r3, [pc, #112]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003baa:	4a1b      	ldr	r2, [pc, #108]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bb4:	4a18      	ldr	r2, [pc, #96]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc6:	f7fd f90f 	bl	8000de8 <HAL_GetTick>
 8003bca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bcc:	e00b      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bce:	f7fd f90b 	bl	8000de8 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d902      	bls.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	74fb      	strb	r3, [r7, #19]
            break;
 8003be4:	e006      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be6:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ec      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10b      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bfa:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c08:	4903      	ldr	r1, [pc, #12]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c10:	e008      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c12:	7cfb      	ldrb	r3, [r7, #19]
 8003c14:	74bb      	strb	r3, [r7, #18]
 8003c16:	e005      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	7cfb      	ldrb	r3, [r7, #19]
 8003c22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c24:	7c7b      	ldrb	r3, [r7, #17]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d105      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2a:	4ba7      	ldr	r3, [pc, #668]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2e:	4aa6      	ldr	r2, [pc, #664]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c42:	4ba1      	ldr	r3, [pc, #644]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c48:	f023 0203 	bic.w	r2, r3, #3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	499d      	ldr	r1, [pc, #628]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c64:	4b98      	ldr	r3, [pc, #608]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6a:	f023 020c 	bic.w	r2, r3, #12
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	4995      	ldr	r1, [pc, #596]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c86:	4b90      	ldr	r3, [pc, #576]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	498c      	ldr	r1, [pc, #560]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ca8:	4b87      	ldr	r3, [pc, #540]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	4984      	ldr	r1, [pc, #528]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cca:	4b7f      	ldr	r3, [pc, #508]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	497b      	ldr	r1, [pc, #492]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cec:	4b76      	ldr	r3, [pc, #472]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	4973      	ldr	r1, [pc, #460]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d0e:	4b6e      	ldr	r3, [pc, #440]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	496a      	ldr	r1, [pc, #424]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d30:	4b65      	ldr	r3, [pc, #404]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	4962      	ldr	r1, [pc, #392]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d52:	4b5d      	ldr	r3, [pc, #372]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	4959      	ldr	r1, [pc, #356]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d74:	4b54      	ldr	r3, [pc, #336]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	4951      	ldr	r1, [pc, #324]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d96:	4b4c      	ldr	r3, [pc, #304]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	4948      	ldr	r1, [pc, #288]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d015      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003db8:	4b43      	ldr	r3, [pc, #268]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	4940      	ldr	r1, [pc, #256]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd6:	d105      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd8:	4b3b      	ldr	r3, [pc, #236]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4a3a      	ldr	r2, [pc, #232]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003de2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d015      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003df0:	4b35      	ldr	r3, [pc, #212]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfe:	4932      	ldr	r1, [pc, #200]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e10:	4b2d      	ldr	r3, [pc, #180]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4a2c      	ldr	r2, [pc, #176]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e1a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d015      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e28:	4b27      	ldr	r3, [pc, #156]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	4924      	ldr	r1, [pc, #144]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e46:	d105      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e48:	4b1f      	ldr	r3, [pc, #124]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a1e      	ldr	r2, [pc, #120]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d015      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e60:	4b19      	ldr	r3, [pc, #100]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6e:	4916      	ldr	r1, [pc, #88]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e7e:	d105      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e80:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4a10      	ldr	r2, [pc, #64]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d019      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e98:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	4908      	ldr	r1, [pc, #32]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eb6:	d109      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a02      	ldr	r2, [pc, #8]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ec2:	60d3      	str	r3, [r2, #12]
 8003ec4:	e002      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003ec6:	bf00      	nop
 8003ec8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d015      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ed8:	4b29      	ldr	r3, [pc, #164]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee6:	4926      	ldr	r1, [pc, #152]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ef6:	d105      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ef8:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a20      	ldr	r2, [pc, #128]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f02:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d015      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003f10:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f16:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1e:	4918      	ldr	r1, [pc, #96]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4a12      	ldr	r2, [pc, #72]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f3a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d015      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f48:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f56:	490a      	ldr	r1, [pc, #40]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f66:	d105      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f74:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000

08003f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e049      	b.n	800402a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fc fd9a 	bl	8000ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	f000 fa26 	bl	8004414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b01      	cmp	r3, #1
 8004046:	d001      	beq.n	800404c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e054      	b.n	80040f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a26      	ldr	r2, [pc, #152]	; (8004104 <HAL_TIM_Base_Start_IT+0xd0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d022      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x80>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004076:	d01d      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x80>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a22      	ldr	r2, [pc, #136]	; (8004108 <HAL_TIM_Base_Start_IT+0xd4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d018      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x80>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a21      	ldr	r2, [pc, #132]	; (800410c <HAL_TIM_Base_Start_IT+0xd8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d013      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x80>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <HAL_TIM_Base_Start_IT+0xdc>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00e      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x80>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1e      	ldr	r2, [pc, #120]	; (8004114 <HAL_TIM_Base_Start_IT+0xe0>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d009      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x80>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <HAL_TIM_Base_Start_IT+0xe4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x80>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1b      	ldr	r2, [pc, #108]	; (800411c <HAL_TIM_Base_Start_IT+0xe8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d115      	bne.n	80040e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	4b19      	ldr	r3, [pc, #100]	; (8004120 <HAL_TIM_Base_Start_IT+0xec>)
 80040bc:	4013      	ands	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b06      	cmp	r3, #6
 80040c4:	d015      	beq.n	80040f2 <HAL_TIM_Base_Start_IT+0xbe>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040cc:	d011      	beq.n	80040f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 0201 	orr.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040de:	e008      	b.n	80040f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	e000      	b.n	80040f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40012c00 	.word	0x40012c00
 8004108:	40000400 	.word	0x40000400
 800410c:	40000800 	.word	0x40000800
 8004110:	40000c00 	.word	0x40000c00
 8004114:	40013400 	.word	0x40013400
 8004118:	40014000 	.word	0x40014000
 800411c:	40015000 	.word	0x40015000
 8004120:	00010007 	.word	0x00010007

08004124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d020      	beq.n	8004188 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01b      	beq.n	8004188 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0202 	mvn.w	r2, #2
 8004158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f931 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f923 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f934 	bl	80043ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	d020      	beq.n	80041d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01b      	beq.n	80041d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0204 	mvn.w	r2, #4
 80041a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f90b 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 80041c0:	e005      	b.n	80041ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f8fd 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f90e 	bl	80043ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d020      	beq.n	8004220 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01b      	beq.n	8004220 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0208 	mvn.w	r2, #8
 80041f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2204      	movs	r2, #4
 80041f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f8e5 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f8d7 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f8e8 	bl	80043ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b00      	cmp	r3, #0
 8004228:	d020      	beq.n	800426c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01b      	beq.n	800426c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0210 	mvn.w	r2, #16
 800423c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2208      	movs	r2, #8
 8004242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f8bf 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 8004258:	e005      	b.n	8004266 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f8b1 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f8c2 	bl	80043ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00c      	beq.n	8004290 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0201 	mvn.w	r2, #1
 8004288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fc f996 	bl	80005bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004296:	2b00      	cmp	r3, #0
 8004298:	d104      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00c      	beq.n	80042be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80042b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f9ff 	bl	80046bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00c      	beq.n	80042e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d007      	beq.n	80042e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f9f7 	bl	80046d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00c      	beq.n	8004306 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d007      	beq.n	8004306 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f87c 	bl	80043fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00c      	beq.n	800432a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f06f 0220 	mvn.w	r2, #32
 8004322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f9bf 	bl	80046a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00c      	beq.n	800434e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d007      	beq.n	800434e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f9cb 	bl	80046e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00c      	beq.n	8004372 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800436a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f9c3 	bl	80046f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00c      	beq.n	8004396 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d007      	beq.n	8004396 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800438e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f9bb 	bl	800470c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00c      	beq.n	80043ba <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d007      	beq.n	80043ba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80043b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f9b3 	bl	8004720 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a4c      	ldr	r2, [pc, #304]	; (8004558 <TIM_Base_SetConfig+0x144>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d017      	beq.n	800445c <TIM_Base_SetConfig+0x48>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004432:	d013      	beq.n	800445c <TIM_Base_SetConfig+0x48>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a49      	ldr	r2, [pc, #292]	; (800455c <TIM_Base_SetConfig+0x148>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00f      	beq.n	800445c <TIM_Base_SetConfig+0x48>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a48      	ldr	r2, [pc, #288]	; (8004560 <TIM_Base_SetConfig+0x14c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00b      	beq.n	800445c <TIM_Base_SetConfig+0x48>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a47      	ldr	r2, [pc, #284]	; (8004564 <TIM_Base_SetConfig+0x150>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d007      	beq.n	800445c <TIM_Base_SetConfig+0x48>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a46      	ldr	r2, [pc, #280]	; (8004568 <TIM_Base_SetConfig+0x154>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d003      	beq.n	800445c <TIM_Base_SetConfig+0x48>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a45      	ldr	r2, [pc, #276]	; (800456c <TIM_Base_SetConfig+0x158>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d108      	bne.n	800446e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a39      	ldr	r2, [pc, #228]	; (8004558 <TIM_Base_SetConfig+0x144>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d023      	beq.n	80044be <TIM_Base_SetConfig+0xaa>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447c:	d01f      	beq.n	80044be <TIM_Base_SetConfig+0xaa>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a36      	ldr	r2, [pc, #216]	; (800455c <TIM_Base_SetConfig+0x148>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d01b      	beq.n	80044be <TIM_Base_SetConfig+0xaa>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a35      	ldr	r2, [pc, #212]	; (8004560 <TIM_Base_SetConfig+0x14c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d017      	beq.n	80044be <TIM_Base_SetConfig+0xaa>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a34      	ldr	r2, [pc, #208]	; (8004564 <TIM_Base_SetConfig+0x150>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d013      	beq.n	80044be <TIM_Base_SetConfig+0xaa>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a33      	ldr	r2, [pc, #204]	; (8004568 <TIM_Base_SetConfig+0x154>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00f      	beq.n	80044be <TIM_Base_SetConfig+0xaa>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a33      	ldr	r2, [pc, #204]	; (8004570 <TIM_Base_SetConfig+0x15c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00b      	beq.n	80044be <TIM_Base_SetConfig+0xaa>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a32      	ldr	r2, [pc, #200]	; (8004574 <TIM_Base_SetConfig+0x160>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d007      	beq.n	80044be <TIM_Base_SetConfig+0xaa>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a31      	ldr	r2, [pc, #196]	; (8004578 <TIM_Base_SetConfig+0x164>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d003      	beq.n	80044be <TIM_Base_SetConfig+0xaa>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a2c      	ldr	r2, [pc, #176]	; (800456c <TIM_Base_SetConfig+0x158>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d108      	bne.n	80044d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a18      	ldr	r2, [pc, #96]	; (8004558 <TIM_Base_SetConfig+0x144>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d013      	beq.n	8004524 <TIM_Base_SetConfig+0x110>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a1a      	ldr	r2, [pc, #104]	; (8004568 <TIM_Base_SetConfig+0x154>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00f      	beq.n	8004524 <TIM_Base_SetConfig+0x110>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a1a      	ldr	r2, [pc, #104]	; (8004570 <TIM_Base_SetConfig+0x15c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00b      	beq.n	8004524 <TIM_Base_SetConfig+0x110>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a19      	ldr	r2, [pc, #100]	; (8004574 <TIM_Base_SetConfig+0x160>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d007      	beq.n	8004524 <TIM_Base_SetConfig+0x110>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a18      	ldr	r2, [pc, #96]	; (8004578 <TIM_Base_SetConfig+0x164>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d003      	beq.n	8004524 <TIM_Base_SetConfig+0x110>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a13      	ldr	r2, [pc, #76]	; (800456c <TIM_Base_SetConfig+0x158>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d103      	bne.n	800452c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b01      	cmp	r3, #1
 800453c:	d105      	bne.n	800454a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f023 0201 	bic.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	611a      	str	r2, [r3, #16]
  }
}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800
 8004564:	40000c00 	.word	0x40000c00
 8004568:	40013400 	.word	0x40013400
 800456c:	40015000 	.word	0x40015000
 8004570:	40014000 	.word	0x40014000
 8004574:	40014400 	.word	0x40014400
 8004578:	40014800 	.word	0x40014800

0800457c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004590:	2302      	movs	r3, #2
 8004592:	e074      	b.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a34      	ldr	r2, [pc, #208]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d009      	beq.n	80045d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a33      	ldr	r2, [pc, #204]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d004      	beq.n	80045d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a31      	ldr	r2, [pc, #196]	; (8004694 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d108      	bne.n	80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80045ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a21      	ldr	r2, [pc, #132]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d022      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004614:	d01d      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1f      	ldr	r2, [pc, #124]	; (8004698 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d018      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1d      	ldr	r2, [pc, #116]	; (800469c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d013      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a1c      	ldr	r2, [pc, #112]	; (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00e      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a15      	ldr	r2, [pc, #84]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d009      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d004      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a11      	ldr	r2, [pc, #68]	; (8004694 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d10c      	bne.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	4313      	orrs	r3, r2
 8004662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40012c00 	.word	0x40012c00
 8004690:	40013400 	.word	0x40013400
 8004694:	40015000 	.word	0x40015000
 8004698:	40000400 	.word	0x40000400
 800469c:	40000800 	.word	0x40000800
 80046a0:	40000c00 	.word	0x40000c00
 80046a4:	40014000 	.word	0x40014000

080046a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e042      	b.n	80047cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474c:	2b00      	cmp	r3, #0
 800474e:	d106      	bne.n	800475e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7fc f96b 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2224      	movs	r2, #36	; 0x24
 8004762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0201 	bic.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fbb2 	bl	8004ee8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f8b3 	bl	80048f0 <UART_SetConfig>
 800478a:	4603      	mov	r3, r0
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e01b      	b.n	80047cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fc31 	bl	800502c <UART_CheckIdleState>
 80047ca:	4603      	mov	r3, r0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	; 0x28
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	603b      	str	r3, [r7, #0]
 80047e0:	4613      	mov	r3, r2
 80047e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	d17b      	bne.n	80048e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_UART_Transmit+0x26>
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e074      	b.n	80048e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2221      	movs	r2, #33	; 0x21
 800480a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800480e:	f7fc faeb 	bl	8000de8 <HAL_GetTick>
 8004812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	88fa      	ldrh	r2, [r7, #6]
 8004818:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	88fa      	ldrh	r2, [r7, #6]
 8004820:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482c:	d108      	bne.n	8004840 <HAL_UART_Transmit+0x6c>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d104      	bne.n	8004840 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	e003      	b.n	8004848 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004844:	2300      	movs	r3, #0
 8004846:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004848:	e030      	b.n	80048ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2200      	movs	r2, #0
 8004852:	2180      	movs	r1, #128	; 0x80
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 fc93 	bl	8005180 <UART_WaitOnFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2220      	movs	r2, #32
 8004864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e03d      	b.n	80048e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10b      	bne.n	800488a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004880:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	3302      	adds	r3, #2
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	e007      	b.n	800489a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	781a      	ldrb	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	3301      	adds	r3, #1
 8004898:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1c8      	bne.n	800484a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2200      	movs	r2, #0
 80048c0:	2140      	movs	r1, #64	; 0x40
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fc5c 	bl	8005180 <UART_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e006      	b.n	80048e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e000      	b.n	80048e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80048e6:	2302      	movs	r3, #2
  }
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3720      	adds	r7, #32
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f4:	b08c      	sub	sp, #48	; 0x30
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	431a      	orrs	r2, r3
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	431a      	orrs	r2, r3
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	4313      	orrs	r3, r2
 8004916:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	4baa      	ldr	r3, [pc, #680]	; (8004bc8 <UART_SetConfig+0x2d8>)
 8004920:	4013      	ands	r3, r2
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004928:	430b      	orrs	r3, r1
 800492a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a9f      	ldr	r2, [pc, #636]	; (8004bcc <UART_SetConfig+0x2dc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d004      	beq.n	800495c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004958:	4313      	orrs	r3, r2
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004966:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	6812      	ldr	r2, [r2, #0]
 800496e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004970:	430b      	orrs	r3, r1
 8004972:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	f023 010f 	bic.w	r1, r3, #15
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a90      	ldr	r2, [pc, #576]	; (8004bd0 <UART_SetConfig+0x2e0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d125      	bne.n	80049e0 <UART_SetConfig+0xf0>
 8004994:	4b8f      	ldr	r3, [pc, #572]	; (8004bd4 <UART_SetConfig+0x2e4>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d81a      	bhi.n	80049d8 <UART_SetConfig+0xe8>
 80049a2:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <UART_SetConfig+0xb8>)
 80049a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a8:	080049b9 	.word	0x080049b9
 80049ac:	080049c9 	.word	0x080049c9
 80049b0:	080049c1 	.word	0x080049c1
 80049b4:	080049d1 	.word	0x080049d1
 80049b8:	2301      	movs	r3, #1
 80049ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049be:	e116      	b.n	8004bee <UART_SetConfig+0x2fe>
 80049c0:	2302      	movs	r3, #2
 80049c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049c6:	e112      	b.n	8004bee <UART_SetConfig+0x2fe>
 80049c8:	2304      	movs	r3, #4
 80049ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ce:	e10e      	b.n	8004bee <UART_SetConfig+0x2fe>
 80049d0:	2308      	movs	r3, #8
 80049d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049d6:	e10a      	b.n	8004bee <UART_SetConfig+0x2fe>
 80049d8:	2310      	movs	r3, #16
 80049da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049de:	e106      	b.n	8004bee <UART_SetConfig+0x2fe>
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a7c      	ldr	r2, [pc, #496]	; (8004bd8 <UART_SetConfig+0x2e8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d138      	bne.n	8004a5c <UART_SetConfig+0x16c>
 80049ea:	4b7a      	ldr	r3, [pc, #488]	; (8004bd4 <UART_SetConfig+0x2e4>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f0:	f003 030c 	and.w	r3, r3, #12
 80049f4:	2b0c      	cmp	r3, #12
 80049f6:	d82d      	bhi.n	8004a54 <UART_SetConfig+0x164>
 80049f8:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <UART_SetConfig+0x110>)
 80049fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004a35 	.word	0x08004a35
 8004a04:	08004a55 	.word	0x08004a55
 8004a08:	08004a55 	.word	0x08004a55
 8004a0c:	08004a55 	.word	0x08004a55
 8004a10:	08004a45 	.word	0x08004a45
 8004a14:	08004a55 	.word	0x08004a55
 8004a18:	08004a55 	.word	0x08004a55
 8004a1c:	08004a55 	.word	0x08004a55
 8004a20:	08004a3d 	.word	0x08004a3d
 8004a24:	08004a55 	.word	0x08004a55
 8004a28:	08004a55 	.word	0x08004a55
 8004a2c:	08004a55 	.word	0x08004a55
 8004a30:	08004a4d 	.word	0x08004a4d
 8004a34:	2300      	movs	r3, #0
 8004a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a3a:	e0d8      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a42:	e0d4      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004a44:	2304      	movs	r3, #4
 8004a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a4a:	e0d0      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004a4c:	2308      	movs	r3, #8
 8004a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a52:	e0cc      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004a54:	2310      	movs	r3, #16
 8004a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a5a:	e0c8      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a5e      	ldr	r2, [pc, #376]	; (8004bdc <UART_SetConfig+0x2ec>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d125      	bne.n	8004ab2 <UART_SetConfig+0x1c2>
 8004a66:	4b5b      	ldr	r3, [pc, #364]	; (8004bd4 <UART_SetConfig+0x2e4>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a70:	2b30      	cmp	r3, #48	; 0x30
 8004a72:	d016      	beq.n	8004aa2 <UART_SetConfig+0x1b2>
 8004a74:	2b30      	cmp	r3, #48	; 0x30
 8004a76:	d818      	bhi.n	8004aaa <UART_SetConfig+0x1ba>
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	d00a      	beq.n	8004a92 <UART_SetConfig+0x1a2>
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d814      	bhi.n	8004aaa <UART_SetConfig+0x1ba>
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <UART_SetConfig+0x19a>
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d008      	beq.n	8004a9a <UART_SetConfig+0x1aa>
 8004a88:	e00f      	b.n	8004aaa <UART_SetConfig+0x1ba>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a90:	e0ad      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004a92:	2302      	movs	r3, #2
 8004a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a98:	e0a9      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004a9a:	2304      	movs	r3, #4
 8004a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa0:	e0a5      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004aa2:	2308      	movs	r3, #8
 8004aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa8:	e0a1      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004aaa:	2310      	movs	r3, #16
 8004aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ab0:	e09d      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a4a      	ldr	r2, [pc, #296]	; (8004be0 <UART_SetConfig+0x2f0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d125      	bne.n	8004b08 <UART_SetConfig+0x218>
 8004abc:	4b45      	ldr	r3, [pc, #276]	; (8004bd4 <UART_SetConfig+0x2e4>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ac6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ac8:	d016      	beq.n	8004af8 <UART_SetConfig+0x208>
 8004aca:	2bc0      	cmp	r3, #192	; 0xc0
 8004acc:	d818      	bhi.n	8004b00 <UART_SetConfig+0x210>
 8004ace:	2b80      	cmp	r3, #128	; 0x80
 8004ad0:	d00a      	beq.n	8004ae8 <UART_SetConfig+0x1f8>
 8004ad2:	2b80      	cmp	r3, #128	; 0x80
 8004ad4:	d814      	bhi.n	8004b00 <UART_SetConfig+0x210>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <UART_SetConfig+0x1f0>
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	d008      	beq.n	8004af0 <UART_SetConfig+0x200>
 8004ade:	e00f      	b.n	8004b00 <UART_SetConfig+0x210>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ae6:	e082      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aee:	e07e      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004af0:	2304      	movs	r3, #4
 8004af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004af6:	e07a      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004af8:	2308      	movs	r3, #8
 8004afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004afe:	e076      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004b00:	2310      	movs	r3, #16
 8004b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b06:	e072      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a35      	ldr	r2, [pc, #212]	; (8004be4 <UART_SetConfig+0x2f4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d12a      	bne.n	8004b68 <UART_SetConfig+0x278>
 8004b12:	4b30      	ldr	r3, [pc, #192]	; (8004bd4 <UART_SetConfig+0x2e4>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b20:	d01a      	beq.n	8004b58 <UART_SetConfig+0x268>
 8004b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b26:	d81b      	bhi.n	8004b60 <UART_SetConfig+0x270>
 8004b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2c:	d00c      	beq.n	8004b48 <UART_SetConfig+0x258>
 8004b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b32:	d815      	bhi.n	8004b60 <UART_SetConfig+0x270>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <UART_SetConfig+0x250>
 8004b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3c:	d008      	beq.n	8004b50 <UART_SetConfig+0x260>
 8004b3e:	e00f      	b.n	8004b60 <UART_SetConfig+0x270>
 8004b40:	2300      	movs	r3, #0
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b46:	e052      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4e:	e04e      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004b50:	2304      	movs	r3, #4
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b56:	e04a      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004b58:	2308      	movs	r3, #8
 8004b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b5e:	e046      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004b60:	2310      	movs	r3, #16
 8004b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b66:	e042      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a17      	ldr	r2, [pc, #92]	; (8004bcc <UART_SetConfig+0x2dc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d13a      	bne.n	8004be8 <UART_SetConfig+0x2f8>
 8004b72:	4b18      	ldr	r3, [pc, #96]	; (8004bd4 <UART_SetConfig+0x2e4>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b80:	d01a      	beq.n	8004bb8 <UART_SetConfig+0x2c8>
 8004b82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b86:	d81b      	bhi.n	8004bc0 <UART_SetConfig+0x2d0>
 8004b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8c:	d00c      	beq.n	8004ba8 <UART_SetConfig+0x2b8>
 8004b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b92:	d815      	bhi.n	8004bc0 <UART_SetConfig+0x2d0>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <UART_SetConfig+0x2b0>
 8004b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9c:	d008      	beq.n	8004bb0 <UART_SetConfig+0x2c0>
 8004b9e:	e00f      	b.n	8004bc0 <UART_SetConfig+0x2d0>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba6:	e022      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bae:	e01e      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb6:	e01a      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004bb8:	2308      	movs	r3, #8
 8004bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bbe:	e016      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bc6:	e012      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004bc8:	cfff69f3 	.word	0xcfff69f3
 8004bcc:	40008000 	.word	0x40008000
 8004bd0:	40013800 	.word	0x40013800
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	40004400 	.word	0x40004400
 8004bdc:	40004800 	.word	0x40004800
 8004be0:	40004c00 	.word	0x40004c00
 8004be4:	40005000 	.word	0x40005000
 8004be8:	2310      	movs	r3, #16
 8004bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4aae      	ldr	r2, [pc, #696]	; (8004eac <UART_SetConfig+0x5bc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	f040 8097 	bne.w	8004d28 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d823      	bhi.n	8004c4a <UART_SetConfig+0x35a>
 8004c02:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <UART_SetConfig+0x318>)
 8004c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c08:	08004c2d 	.word	0x08004c2d
 8004c0c:	08004c4b 	.word	0x08004c4b
 8004c10:	08004c35 	.word	0x08004c35
 8004c14:	08004c4b 	.word	0x08004c4b
 8004c18:	08004c3b 	.word	0x08004c3b
 8004c1c:	08004c4b 	.word	0x08004c4b
 8004c20:	08004c4b 	.word	0x08004c4b
 8004c24:	08004c4b 	.word	0x08004c4b
 8004c28:	08004c43 	.word	0x08004c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c2c:	f7fe feea 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 8004c30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c32:	e010      	b.n	8004c56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c34:	4b9e      	ldr	r3, [pc, #632]	; (8004eb0 <UART_SetConfig+0x5c0>)
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c38:	e00d      	b.n	8004c56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c3a:	f7fe fe75 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 8004c3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c40:	e009      	b.n	8004c56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c48:	e005      	b.n	8004c56 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8130 	beq.w	8004ebe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	4a94      	ldr	r2, [pc, #592]	; (8004eb4 <UART_SetConfig+0x5c4>)
 8004c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	4413      	add	r3, r2
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d305      	bcc.n	8004c8e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d903      	bls.n	8004c96 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c94:	e113      	b.n	8004ebe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	2200      	movs	r2, #0
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	60fa      	str	r2, [r7, #12]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	4a84      	ldr	r2, [pc, #528]	; (8004eb4 <UART_SetConfig+0x5c4>)
 8004ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2200      	movs	r2, #0
 8004cac:	603b      	str	r3, [r7, #0]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cb8:	f7fb fb02 	bl	80002c0 <__aeabi_uldivmod>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	020b      	lsls	r3, r1, #8
 8004cce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cd2:	0202      	lsls	r2, r0, #8
 8004cd4:	6979      	ldr	r1, [r7, #20]
 8004cd6:	6849      	ldr	r1, [r1, #4]
 8004cd8:	0849      	lsrs	r1, r1, #1
 8004cda:	2000      	movs	r0, #0
 8004cdc:	460c      	mov	r4, r1
 8004cde:	4605      	mov	r5, r0
 8004ce0:	eb12 0804 	adds.w	r8, r2, r4
 8004ce4:	eb43 0905 	adc.w	r9, r3, r5
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	469a      	mov	sl, r3
 8004cf0:	4693      	mov	fp, r2
 8004cf2:	4652      	mov	r2, sl
 8004cf4:	465b      	mov	r3, fp
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	4649      	mov	r1, r9
 8004cfa:	f7fb fae1 	bl	80002c0 <__aeabi_uldivmod>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4613      	mov	r3, r2
 8004d04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d0c:	d308      	bcc.n	8004d20 <UART_SetConfig+0x430>
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d14:	d204      	bcs.n	8004d20 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6a3a      	ldr	r2, [r7, #32]
 8004d1c:	60da      	str	r2, [r3, #12]
 8004d1e:	e0ce      	b.n	8004ebe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d26:	e0ca      	b.n	8004ebe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d30:	d166      	bne.n	8004e00 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004d32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d827      	bhi.n	8004d8a <UART_SetConfig+0x49a>
 8004d3a:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <UART_SetConfig+0x450>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d65 	.word	0x08004d65
 8004d44:	08004d6d 	.word	0x08004d6d
 8004d48:	08004d75 	.word	0x08004d75
 8004d4c:	08004d8b 	.word	0x08004d8b
 8004d50:	08004d7b 	.word	0x08004d7b
 8004d54:	08004d8b 	.word	0x08004d8b
 8004d58:	08004d8b 	.word	0x08004d8b
 8004d5c:	08004d8b 	.word	0x08004d8b
 8004d60:	08004d83 	.word	0x08004d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d64:	f7fe fe4e 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 8004d68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d6a:	e014      	b.n	8004d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d6c:	f7fe fe60 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 8004d70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d72:	e010      	b.n	8004d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d74:	4b4e      	ldr	r3, [pc, #312]	; (8004eb0 <UART_SetConfig+0x5c0>)
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d78:	e00d      	b.n	8004d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7a:	f7fe fdd5 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 8004d7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d80:	e009      	b.n	8004d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d88:	e005      	b.n	8004d96 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8090 	beq.w	8004ebe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	4a44      	ldr	r2, [pc, #272]	; (8004eb4 <UART_SetConfig+0x5c4>)
 8004da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004da8:	461a      	mov	r2, r3
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8004db0:	005a      	lsls	r2, r3, #1
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	085b      	lsrs	r3, r3, #1
 8004db8:	441a      	add	r2, r3
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	2b0f      	cmp	r3, #15
 8004dc8:	d916      	bls.n	8004df8 <UART_SetConfig+0x508>
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd0:	d212      	bcs.n	8004df8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f023 030f 	bic.w	r3, r3, #15
 8004dda:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	8bfb      	ldrh	r3, [r7, #30]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	8bfa      	ldrh	r2, [r7, #30]
 8004df4:	60da      	str	r2, [r3, #12]
 8004df6:	e062      	b.n	8004ebe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004dfe:	e05e      	b.n	8004ebe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d828      	bhi.n	8004e5a <UART_SetConfig+0x56a>
 8004e08:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <UART_SetConfig+0x520>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004e35 	.word	0x08004e35
 8004e14:	08004e3d 	.word	0x08004e3d
 8004e18:	08004e45 	.word	0x08004e45
 8004e1c:	08004e5b 	.word	0x08004e5b
 8004e20:	08004e4b 	.word	0x08004e4b
 8004e24:	08004e5b 	.word	0x08004e5b
 8004e28:	08004e5b 	.word	0x08004e5b
 8004e2c:	08004e5b 	.word	0x08004e5b
 8004e30:	08004e53 	.word	0x08004e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e34:	f7fe fde6 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 8004e38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e3a:	e014      	b.n	8004e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e3c:	f7fe fdf8 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 8004e40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e42:	e010      	b.n	8004e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e44:	4b1a      	ldr	r3, [pc, #104]	; (8004eb0 <UART_SetConfig+0x5c0>)
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e48:	e00d      	b.n	8004e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e4a:	f7fe fd6d 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 8004e4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e50:	e009      	b.n	8004e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e58:	e005      	b.n	8004e66 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e64:	bf00      	nop
    }

    if (pclk != 0U)
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d028      	beq.n	8004ebe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	4a10      	ldr	r2, [pc, #64]	; (8004eb4 <UART_SetConfig+0x5c4>)
 8004e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e76:	461a      	mov	r2, r3
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	085b      	lsrs	r3, r3, #1
 8004e84:	441a      	add	r2, r3
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	2b0f      	cmp	r3, #15
 8004e94:	d910      	bls.n	8004eb8 <UART_SetConfig+0x5c8>
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9c:	d20c      	bcs.n	8004eb8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60da      	str	r2, [r3, #12]
 8004ea8:	e009      	b.n	8004ebe <UART_SetConfig+0x5ce>
 8004eaa:	bf00      	nop
 8004eac:	40008000 	.word	0x40008000
 8004eb0:	00f42400 	.word	0x00f42400
 8004eb4:	08006490 	.word	0x08006490
      }
      else
      {
        ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004eda:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3730      	adds	r7, #48	; 0x30
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004ee8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	f003 0304 	and.w	r3, r3, #4
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01a      	beq.n	8004ffe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fe6:	d10a      	bne.n	8004ffe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	605a      	str	r2, [r3, #4]
  }
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b098      	sub	sp, #96	; 0x60
 8005030:	af02      	add	r7, sp, #8
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800503c:	f7fb fed4 	bl	8000de8 <HAL_GetTick>
 8005040:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b08      	cmp	r3, #8
 800504e:	d12f      	bne.n	80050b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005050:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005058:	2200      	movs	r2, #0
 800505a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f88e 	bl	8005180 <UART_WaitOnFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d022      	beq.n	80050b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800507e:	653b      	str	r3, [r7, #80]	; 0x50
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005088:	647b      	str	r3, [r7, #68]	; 0x44
 800508a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800508e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e6      	bne.n	800506a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e063      	b.n	8005178 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d149      	bne.n	8005152 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050c6:	2200      	movs	r2, #0
 80050c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f857 	bl	8005180 <UART_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d03c      	beq.n	8005152 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	623b      	str	r3, [r7, #32]
   return(result);
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f6:	633b      	str	r3, [r7, #48]	; 0x30
 80050f8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e6      	bne.n	80050d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	60fb      	str	r3, [r7, #12]
   return(result);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	64bb      	str	r3, [r7, #72]	; 0x48
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3308      	adds	r3, #8
 8005128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800512a:	61fa      	str	r2, [r7, #28]
 800512c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	69b9      	ldr	r1, [r7, #24]
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	617b      	str	r3, [r7, #20]
   return(result);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e5      	bne.n	800510a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e012      	b.n	8005178 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2220      	movs	r2, #32
 8005156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2220      	movs	r2, #32
 800515e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3758      	adds	r7, #88	; 0x58
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005190:	e04f      	b.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005198:	d04b      	beq.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519a:	f7fb fe25 	bl	8000de8 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d302      	bcc.n	80051b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e04e      	b.n	8005252 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d037      	beq.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b80      	cmp	r3, #128	; 0x80
 80051c6:	d034      	beq.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b40      	cmp	r3, #64	; 0x40
 80051cc:	d031      	beq.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d110      	bne.n	80051fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2208      	movs	r2, #8
 80051e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f838 	bl	800525a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2208      	movs	r2, #8
 80051ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e029      	b.n	8005252 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800520c:	d111      	bne.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005216:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f81e 	bl	800525a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e00f      	b.n	8005252 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69da      	ldr	r2, [r3, #28]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4013      	ands	r3, r2
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	429a      	cmp	r2, r3
 8005240:	bf0c      	ite	eq
 8005242:	2301      	moveq	r3, #1
 8005244:	2300      	movne	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	461a      	mov	r2, r3
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	429a      	cmp	r2, r3
 800524e:	d0a0      	beq.n	8005192 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800525a:	b480      	push	{r7}
 800525c:	b095      	sub	sp, #84	; 0x54
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005272:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005280:	643b      	str	r3, [r7, #64]	; 0x40
 8005282:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005286:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e6      	bne.n	8005262 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3308      	adds	r3, #8
 800529a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052aa:	f023 0301 	bic.w	r3, r3, #1
 80052ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3308      	adds	r3, #8
 80052b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e3      	bne.n	8005294 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d118      	bne.n	8005306 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f023 0310 	bic.w	r3, r3, #16
 80052e8:	647b      	str	r3, [r7, #68]	; 0x44
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	6979      	ldr	r1, [r7, #20]
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e6      	bne.n	80052d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	675a      	str	r2, [r3, #116]	; 0x74
}
 800531a:	bf00      	nop
 800531c:	3754      	adds	r7, #84	; 0x54
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005326:	b480      	push	{r7}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_UARTEx_DisableFifoMode+0x16>
 8005338:	2302      	movs	r3, #2
 800533a:	e027      	b.n	800538c <HAL_UARTEx_DisableFifoMode+0x66>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2224      	movs	r2, #36	; 0x24
 8005348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0201 	bic.w	r2, r2, #1
 8005362:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800536a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e02d      	b.n	800540c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2224      	movs	r2, #36	; 0x24
 80053bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0201 	bic.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f84f 	bl	8005490 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2220      	movs	r2, #32
 80053fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005428:	2302      	movs	r3, #2
 800542a:	e02d      	b.n	8005488 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2224      	movs	r2, #36	; 0x24
 8005438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0201 	bic.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f811 	bl	8005490 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800549c:	2b00      	cmp	r3, #0
 800549e:	d108      	bne.n	80054b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80054b0:	e031      	b.n	8005516 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80054b2:	2308      	movs	r3, #8
 80054b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054b6:	2308      	movs	r3, #8
 80054b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	0e5b      	lsrs	r3, r3, #25
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	0f5b      	lsrs	r3, r3, #29
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054da:	7bbb      	ldrb	r3, [r7, #14]
 80054dc:	7b3a      	ldrb	r2, [r7, #12]
 80054de:	4911      	ldr	r1, [pc, #68]	; (8005524 <UARTEx_SetNbDataToProcess+0x94>)
 80054e0:	5c8a      	ldrb	r2, [r1, r2]
 80054e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054e6:	7b3a      	ldrb	r2, [r7, #12]
 80054e8:	490f      	ldr	r1, [pc, #60]	; (8005528 <UARTEx_SetNbDataToProcess+0x98>)
 80054ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	7b7a      	ldrb	r2, [r7, #13]
 80054fc:	4909      	ldr	r1, [pc, #36]	; (8005524 <UARTEx_SetNbDataToProcess+0x94>)
 80054fe:	5c8a      	ldrb	r2, [r1, r2]
 8005500:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005504:	7b7a      	ldrb	r2, [r7, #13]
 8005506:	4908      	ldr	r1, [pc, #32]	; (8005528 <UARTEx_SetNbDataToProcess+0x98>)
 8005508:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800550a:	fb93 f3f2 	sdiv	r3, r3, r2
 800550e:	b29a      	uxth	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005516:	bf00      	nop
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	080064a8 	.word	0x080064a8
 8005528:	080064b0 	.word	0x080064b0

0800552c <sbrk_aligned>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	4e0e      	ldr	r6, [pc, #56]	; (8005568 <sbrk_aligned+0x3c>)
 8005530:	460c      	mov	r4, r1
 8005532:	6831      	ldr	r1, [r6, #0]
 8005534:	4605      	mov	r5, r0
 8005536:	b911      	cbnz	r1, 800553e <sbrk_aligned+0x12>
 8005538:	f000 f9dc 	bl	80058f4 <_sbrk_r>
 800553c:	6030      	str	r0, [r6, #0]
 800553e:	4621      	mov	r1, r4
 8005540:	4628      	mov	r0, r5
 8005542:	f000 f9d7 	bl	80058f4 <_sbrk_r>
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	d00a      	beq.n	8005560 <sbrk_aligned+0x34>
 800554a:	1cc4      	adds	r4, r0, #3
 800554c:	f024 0403 	bic.w	r4, r4, #3
 8005550:	42a0      	cmp	r0, r4
 8005552:	d007      	beq.n	8005564 <sbrk_aligned+0x38>
 8005554:	1a21      	subs	r1, r4, r0
 8005556:	4628      	mov	r0, r5
 8005558:	f000 f9cc 	bl	80058f4 <_sbrk_r>
 800555c:	3001      	adds	r0, #1
 800555e:	d101      	bne.n	8005564 <sbrk_aligned+0x38>
 8005560:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005564:	4620      	mov	r0, r4
 8005566:	bd70      	pop	{r4, r5, r6, pc}
 8005568:	200001dc 	.word	0x200001dc

0800556c <_malloc_r>:
 800556c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005570:	1ccd      	adds	r5, r1, #3
 8005572:	f025 0503 	bic.w	r5, r5, #3
 8005576:	3508      	adds	r5, #8
 8005578:	2d0c      	cmp	r5, #12
 800557a:	bf38      	it	cc
 800557c:	250c      	movcc	r5, #12
 800557e:	2d00      	cmp	r5, #0
 8005580:	4607      	mov	r7, r0
 8005582:	db01      	blt.n	8005588 <_malloc_r+0x1c>
 8005584:	42a9      	cmp	r1, r5
 8005586:	d905      	bls.n	8005594 <_malloc_r+0x28>
 8005588:	230c      	movs	r3, #12
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	2600      	movs	r6, #0
 800558e:	4630      	mov	r0, r6
 8005590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005594:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005668 <_malloc_r+0xfc>
 8005598:	f000 f868 	bl	800566c <__malloc_lock>
 800559c:	f8d8 3000 	ldr.w	r3, [r8]
 80055a0:	461c      	mov	r4, r3
 80055a2:	bb5c      	cbnz	r4, 80055fc <_malloc_r+0x90>
 80055a4:	4629      	mov	r1, r5
 80055a6:	4638      	mov	r0, r7
 80055a8:	f7ff ffc0 	bl	800552c <sbrk_aligned>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	4604      	mov	r4, r0
 80055b0:	d155      	bne.n	800565e <_malloc_r+0xf2>
 80055b2:	f8d8 4000 	ldr.w	r4, [r8]
 80055b6:	4626      	mov	r6, r4
 80055b8:	2e00      	cmp	r6, #0
 80055ba:	d145      	bne.n	8005648 <_malloc_r+0xdc>
 80055bc:	2c00      	cmp	r4, #0
 80055be:	d048      	beq.n	8005652 <_malloc_r+0xe6>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	4631      	mov	r1, r6
 80055c4:	4638      	mov	r0, r7
 80055c6:	eb04 0903 	add.w	r9, r4, r3
 80055ca:	f000 f993 	bl	80058f4 <_sbrk_r>
 80055ce:	4581      	cmp	r9, r0
 80055d0:	d13f      	bne.n	8005652 <_malloc_r+0xe6>
 80055d2:	6821      	ldr	r1, [r4, #0]
 80055d4:	1a6d      	subs	r5, r5, r1
 80055d6:	4629      	mov	r1, r5
 80055d8:	4638      	mov	r0, r7
 80055da:	f7ff ffa7 	bl	800552c <sbrk_aligned>
 80055de:	3001      	adds	r0, #1
 80055e0:	d037      	beq.n	8005652 <_malloc_r+0xe6>
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	442b      	add	r3, r5
 80055e6:	6023      	str	r3, [r4, #0]
 80055e8:	f8d8 3000 	ldr.w	r3, [r8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d038      	beq.n	8005662 <_malloc_r+0xf6>
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	42a2      	cmp	r2, r4
 80055f4:	d12b      	bne.n	800564e <_malloc_r+0xe2>
 80055f6:	2200      	movs	r2, #0
 80055f8:	605a      	str	r2, [r3, #4]
 80055fa:	e00f      	b.n	800561c <_malloc_r+0xb0>
 80055fc:	6822      	ldr	r2, [r4, #0]
 80055fe:	1b52      	subs	r2, r2, r5
 8005600:	d41f      	bmi.n	8005642 <_malloc_r+0xd6>
 8005602:	2a0b      	cmp	r2, #11
 8005604:	d917      	bls.n	8005636 <_malloc_r+0xca>
 8005606:	1961      	adds	r1, r4, r5
 8005608:	42a3      	cmp	r3, r4
 800560a:	6025      	str	r5, [r4, #0]
 800560c:	bf18      	it	ne
 800560e:	6059      	strne	r1, [r3, #4]
 8005610:	6863      	ldr	r3, [r4, #4]
 8005612:	bf08      	it	eq
 8005614:	f8c8 1000 	streq.w	r1, [r8]
 8005618:	5162      	str	r2, [r4, r5]
 800561a:	604b      	str	r3, [r1, #4]
 800561c:	4638      	mov	r0, r7
 800561e:	f104 060b 	add.w	r6, r4, #11
 8005622:	f000 f829 	bl	8005678 <__malloc_unlock>
 8005626:	f026 0607 	bic.w	r6, r6, #7
 800562a:	1d23      	adds	r3, r4, #4
 800562c:	1af2      	subs	r2, r6, r3
 800562e:	d0ae      	beq.n	800558e <_malloc_r+0x22>
 8005630:	1b9b      	subs	r3, r3, r6
 8005632:	50a3      	str	r3, [r4, r2]
 8005634:	e7ab      	b.n	800558e <_malloc_r+0x22>
 8005636:	42a3      	cmp	r3, r4
 8005638:	6862      	ldr	r2, [r4, #4]
 800563a:	d1dd      	bne.n	80055f8 <_malloc_r+0x8c>
 800563c:	f8c8 2000 	str.w	r2, [r8]
 8005640:	e7ec      	b.n	800561c <_malloc_r+0xb0>
 8005642:	4623      	mov	r3, r4
 8005644:	6864      	ldr	r4, [r4, #4]
 8005646:	e7ac      	b.n	80055a2 <_malloc_r+0x36>
 8005648:	4634      	mov	r4, r6
 800564a:	6876      	ldr	r6, [r6, #4]
 800564c:	e7b4      	b.n	80055b8 <_malloc_r+0x4c>
 800564e:	4613      	mov	r3, r2
 8005650:	e7cc      	b.n	80055ec <_malloc_r+0x80>
 8005652:	230c      	movs	r3, #12
 8005654:	603b      	str	r3, [r7, #0]
 8005656:	4638      	mov	r0, r7
 8005658:	f000 f80e 	bl	8005678 <__malloc_unlock>
 800565c:	e797      	b.n	800558e <_malloc_r+0x22>
 800565e:	6025      	str	r5, [r4, #0]
 8005660:	e7dc      	b.n	800561c <_malloc_r+0xb0>
 8005662:	605b      	str	r3, [r3, #4]
 8005664:	deff      	udf	#255	; 0xff
 8005666:	bf00      	nop
 8005668:	200001d8 	.word	0x200001d8

0800566c <__malloc_lock>:
 800566c:	4801      	ldr	r0, [pc, #4]	; (8005674 <__malloc_lock+0x8>)
 800566e:	f000 b97c 	b.w	800596a <__retarget_lock_acquire_recursive>
 8005672:	bf00      	nop
 8005674:	2000031c 	.word	0x2000031c

08005678 <__malloc_unlock>:
 8005678:	4801      	ldr	r0, [pc, #4]	; (8005680 <__malloc_unlock+0x8>)
 800567a:	f000 b977 	b.w	800596c <__retarget_lock_release_recursive>
 800567e:	bf00      	nop
 8005680:	2000031c 	.word	0x2000031c

08005684 <std>:
 8005684:	2300      	movs	r3, #0
 8005686:	b510      	push	{r4, lr}
 8005688:	4604      	mov	r4, r0
 800568a:	e9c0 3300 	strd	r3, r3, [r0]
 800568e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005692:	6083      	str	r3, [r0, #8]
 8005694:	8181      	strh	r1, [r0, #12]
 8005696:	6643      	str	r3, [r0, #100]	; 0x64
 8005698:	81c2      	strh	r2, [r0, #14]
 800569a:	6183      	str	r3, [r0, #24]
 800569c:	4619      	mov	r1, r3
 800569e:	2208      	movs	r2, #8
 80056a0:	305c      	adds	r0, #92	; 0x5c
 80056a2:	f000 f91f 	bl	80058e4 <memset>
 80056a6:	4b0d      	ldr	r3, [pc, #52]	; (80056dc <std+0x58>)
 80056a8:	6263      	str	r3, [r4, #36]	; 0x24
 80056aa:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <std+0x5c>)
 80056ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <std+0x60>)
 80056b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056b2:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <std+0x64>)
 80056b4:	6323      	str	r3, [r4, #48]	; 0x30
 80056b6:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <std+0x68>)
 80056b8:	6224      	str	r4, [r4, #32]
 80056ba:	429c      	cmp	r4, r3
 80056bc:	d006      	beq.n	80056cc <std+0x48>
 80056be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80056c2:	4294      	cmp	r4, r2
 80056c4:	d002      	beq.n	80056cc <std+0x48>
 80056c6:	33d0      	adds	r3, #208	; 0xd0
 80056c8:	429c      	cmp	r4, r3
 80056ca:	d105      	bne.n	80056d8 <std+0x54>
 80056cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d4:	f000 b948 	b.w	8005968 <__retarget_lock_init_recursive>
 80056d8:	bd10      	pop	{r4, pc}
 80056da:	bf00      	nop
 80056dc:	0800610d 	.word	0x0800610d
 80056e0:	0800612f 	.word	0x0800612f
 80056e4:	08006167 	.word	0x08006167
 80056e8:	0800618b 	.word	0x0800618b
 80056ec:	200001e0 	.word	0x200001e0

080056f0 <stdio_exit_handler>:
 80056f0:	4a02      	ldr	r2, [pc, #8]	; (80056fc <stdio_exit_handler+0xc>)
 80056f2:	4903      	ldr	r1, [pc, #12]	; (8005700 <stdio_exit_handler+0x10>)
 80056f4:	4803      	ldr	r0, [pc, #12]	; (8005704 <stdio_exit_handler+0x14>)
 80056f6:	f000 b869 	b.w	80057cc <_fwalk_sglue>
 80056fa:	bf00      	nop
 80056fc:	2000000c 	.word	0x2000000c
 8005700:	080060bd 	.word	0x080060bd
 8005704:	20000018 	.word	0x20000018

08005708 <cleanup_stdio>:
 8005708:	6841      	ldr	r1, [r0, #4]
 800570a:	4b0c      	ldr	r3, [pc, #48]	; (800573c <cleanup_stdio+0x34>)
 800570c:	4299      	cmp	r1, r3
 800570e:	b510      	push	{r4, lr}
 8005710:	4604      	mov	r4, r0
 8005712:	d001      	beq.n	8005718 <cleanup_stdio+0x10>
 8005714:	f000 fcd2 	bl	80060bc <_fflush_r>
 8005718:	68a1      	ldr	r1, [r4, #8]
 800571a:	4b09      	ldr	r3, [pc, #36]	; (8005740 <cleanup_stdio+0x38>)
 800571c:	4299      	cmp	r1, r3
 800571e:	d002      	beq.n	8005726 <cleanup_stdio+0x1e>
 8005720:	4620      	mov	r0, r4
 8005722:	f000 fccb 	bl	80060bc <_fflush_r>
 8005726:	68e1      	ldr	r1, [r4, #12]
 8005728:	4b06      	ldr	r3, [pc, #24]	; (8005744 <cleanup_stdio+0x3c>)
 800572a:	4299      	cmp	r1, r3
 800572c:	d004      	beq.n	8005738 <cleanup_stdio+0x30>
 800572e:	4620      	mov	r0, r4
 8005730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005734:	f000 bcc2 	b.w	80060bc <_fflush_r>
 8005738:	bd10      	pop	{r4, pc}
 800573a:	bf00      	nop
 800573c:	200001e0 	.word	0x200001e0
 8005740:	20000248 	.word	0x20000248
 8005744:	200002b0 	.word	0x200002b0

08005748 <global_stdio_init.part.0>:
 8005748:	b510      	push	{r4, lr}
 800574a:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <global_stdio_init.part.0+0x30>)
 800574c:	4c0b      	ldr	r4, [pc, #44]	; (800577c <global_stdio_init.part.0+0x34>)
 800574e:	4a0c      	ldr	r2, [pc, #48]	; (8005780 <global_stdio_init.part.0+0x38>)
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	4620      	mov	r0, r4
 8005754:	2200      	movs	r2, #0
 8005756:	2104      	movs	r1, #4
 8005758:	f7ff ff94 	bl	8005684 <std>
 800575c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005760:	2201      	movs	r2, #1
 8005762:	2109      	movs	r1, #9
 8005764:	f7ff ff8e 	bl	8005684 <std>
 8005768:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800576c:	2202      	movs	r2, #2
 800576e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005772:	2112      	movs	r1, #18
 8005774:	f7ff bf86 	b.w	8005684 <std>
 8005778:	20000318 	.word	0x20000318
 800577c:	200001e0 	.word	0x200001e0
 8005780:	080056f1 	.word	0x080056f1

08005784 <__sfp_lock_acquire>:
 8005784:	4801      	ldr	r0, [pc, #4]	; (800578c <__sfp_lock_acquire+0x8>)
 8005786:	f000 b8f0 	b.w	800596a <__retarget_lock_acquire_recursive>
 800578a:	bf00      	nop
 800578c:	2000031d 	.word	0x2000031d

08005790 <__sfp_lock_release>:
 8005790:	4801      	ldr	r0, [pc, #4]	; (8005798 <__sfp_lock_release+0x8>)
 8005792:	f000 b8eb 	b.w	800596c <__retarget_lock_release_recursive>
 8005796:	bf00      	nop
 8005798:	2000031d 	.word	0x2000031d

0800579c <__sinit>:
 800579c:	b510      	push	{r4, lr}
 800579e:	4604      	mov	r4, r0
 80057a0:	f7ff fff0 	bl	8005784 <__sfp_lock_acquire>
 80057a4:	6a23      	ldr	r3, [r4, #32]
 80057a6:	b11b      	cbz	r3, 80057b0 <__sinit+0x14>
 80057a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057ac:	f7ff bff0 	b.w	8005790 <__sfp_lock_release>
 80057b0:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <__sinit+0x28>)
 80057b2:	6223      	str	r3, [r4, #32]
 80057b4:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <__sinit+0x2c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1f5      	bne.n	80057a8 <__sinit+0xc>
 80057bc:	f7ff ffc4 	bl	8005748 <global_stdio_init.part.0>
 80057c0:	e7f2      	b.n	80057a8 <__sinit+0xc>
 80057c2:	bf00      	nop
 80057c4:	08005709 	.word	0x08005709
 80057c8:	20000318 	.word	0x20000318

080057cc <_fwalk_sglue>:
 80057cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057d0:	4607      	mov	r7, r0
 80057d2:	4688      	mov	r8, r1
 80057d4:	4614      	mov	r4, r2
 80057d6:	2600      	movs	r6, #0
 80057d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057dc:	f1b9 0901 	subs.w	r9, r9, #1
 80057e0:	d505      	bpl.n	80057ee <_fwalk_sglue+0x22>
 80057e2:	6824      	ldr	r4, [r4, #0]
 80057e4:	2c00      	cmp	r4, #0
 80057e6:	d1f7      	bne.n	80057d8 <_fwalk_sglue+0xc>
 80057e8:	4630      	mov	r0, r6
 80057ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ee:	89ab      	ldrh	r3, [r5, #12]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d907      	bls.n	8005804 <_fwalk_sglue+0x38>
 80057f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057f8:	3301      	adds	r3, #1
 80057fa:	d003      	beq.n	8005804 <_fwalk_sglue+0x38>
 80057fc:	4629      	mov	r1, r5
 80057fe:	4638      	mov	r0, r7
 8005800:	47c0      	blx	r8
 8005802:	4306      	orrs	r6, r0
 8005804:	3568      	adds	r5, #104	; 0x68
 8005806:	e7e9      	b.n	80057dc <_fwalk_sglue+0x10>

08005808 <iprintf>:
 8005808:	b40f      	push	{r0, r1, r2, r3}
 800580a:	b507      	push	{r0, r1, r2, lr}
 800580c:	4906      	ldr	r1, [pc, #24]	; (8005828 <iprintf+0x20>)
 800580e:	ab04      	add	r3, sp, #16
 8005810:	6808      	ldr	r0, [r1, #0]
 8005812:	f853 2b04 	ldr.w	r2, [r3], #4
 8005816:	6881      	ldr	r1, [r0, #8]
 8005818:	9301      	str	r3, [sp, #4]
 800581a:	f000 f91f 	bl	8005a5c <_vfiprintf_r>
 800581e:	b003      	add	sp, #12
 8005820:	f85d eb04 	ldr.w	lr, [sp], #4
 8005824:	b004      	add	sp, #16
 8005826:	4770      	bx	lr
 8005828:	20000064 	.word	0x20000064

0800582c <_puts_r>:
 800582c:	6a03      	ldr	r3, [r0, #32]
 800582e:	b570      	push	{r4, r5, r6, lr}
 8005830:	6884      	ldr	r4, [r0, #8]
 8005832:	4605      	mov	r5, r0
 8005834:	460e      	mov	r6, r1
 8005836:	b90b      	cbnz	r3, 800583c <_puts_r+0x10>
 8005838:	f7ff ffb0 	bl	800579c <__sinit>
 800583c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800583e:	07db      	lsls	r3, r3, #31
 8005840:	d405      	bmi.n	800584e <_puts_r+0x22>
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	0598      	lsls	r0, r3, #22
 8005846:	d402      	bmi.n	800584e <_puts_r+0x22>
 8005848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800584a:	f000 f88e 	bl	800596a <__retarget_lock_acquire_recursive>
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	0719      	lsls	r1, r3, #28
 8005852:	d513      	bpl.n	800587c <_puts_r+0x50>
 8005854:	6923      	ldr	r3, [r4, #16]
 8005856:	b18b      	cbz	r3, 800587c <_puts_r+0x50>
 8005858:	3e01      	subs	r6, #1
 800585a:	68a3      	ldr	r3, [r4, #8]
 800585c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005860:	3b01      	subs	r3, #1
 8005862:	60a3      	str	r3, [r4, #8]
 8005864:	b9e9      	cbnz	r1, 80058a2 <_puts_r+0x76>
 8005866:	2b00      	cmp	r3, #0
 8005868:	da2e      	bge.n	80058c8 <_puts_r+0x9c>
 800586a:	4622      	mov	r2, r4
 800586c:	210a      	movs	r1, #10
 800586e:	4628      	mov	r0, r5
 8005870:	f000 fc8f 	bl	8006192 <__swbuf_r>
 8005874:	3001      	adds	r0, #1
 8005876:	d007      	beq.n	8005888 <_puts_r+0x5c>
 8005878:	250a      	movs	r5, #10
 800587a:	e007      	b.n	800588c <_puts_r+0x60>
 800587c:	4621      	mov	r1, r4
 800587e:	4628      	mov	r0, r5
 8005880:	f000 fcc4 	bl	800620c <__swsetup_r>
 8005884:	2800      	cmp	r0, #0
 8005886:	d0e7      	beq.n	8005858 <_puts_r+0x2c>
 8005888:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800588c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800588e:	07da      	lsls	r2, r3, #31
 8005890:	d405      	bmi.n	800589e <_puts_r+0x72>
 8005892:	89a3      	ldrh	r3, [r4, #12]
 8005894:	059b      	lsls	r3, r3, #22
 8005896:	d402      	bmi.n	800589e <_puts_r+0x72>
 8005898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800589a:	f000 f867 	bl	800596c <__retarget_lock_release_recursive>
 800589e:	4628      	mov	r0, r5
 80058a0:	bd70      	pop	{r4, r5, r6, pc}
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	da04      	bge.n	80058b0 <_puts_r+0x84>
 80058a6:	69a2      	ldr	r2, [r4, #24]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	dc06      	bgt.n	80058ba <_puts_r+0x8e>
 80058ac:	290a      	cmp	r1, #10
 80058ae:	d004      	beq.n	80058ba <_puts_r+0x8e>
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	6022      	str	r2, [r4, #0]
 80058b6:	7019      	strb	r1, [r3, #0]
 80058b8:	e7cf      	b.n	800585a <_puts_r+0x2e>
 80058ba:	4622      	mov	r2, r4
 80058bc:	4628      	mov	r0, r5
 80058be:	f000 fc68 	bl	8006192 <__swbuf_r>
 80058c2:	3001      	adds	r0, #1
 80058c4:	d1c9      	bne.n	800585a <_puts_r+0x2e>
 80058c6:	e7df      	b.n	8005888 <_puts_r+0x5c>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	250a      	movs	r5, #10
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	6022      	str	r2, [r4, #0]
 80058d0:	701d      	strb	r5, [r3, #0]
 80058d2:	e7db      	b.n	800588c <_puts_r+0x60>

080058d4 <puts>:
 80058d4:	4b02      	ldr	r3, [pc, #8]	; (80058e0 <puts+0xc>)
 80058d6:	4601      	mov	r1, r0
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	f7ff bfa7 	b.w	800582c <_puts_r>
 80058de:	bf00      	nop
 80058e0:	20000064 	.word	0x20000064

080058e4 <memset>:
 80058e4:	4402      	add	r2, r0
 80058e6:	4603      	mov	r3, r0
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d100      	bne.n	80058ee <memset+0xa>
 80058ec:	4770      	bx	lr
 80058ee:	f803 1b01 	strb.w	r1, [r3], #1
 80058f2:	e7f9      	b.n	80058e8 <memset+0x4>

080058f4 <_sbrk_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	4d06      	ldr	r5, [pc, #24]	; (8005910 <_sbrk_r+0x1c>)
 80058f8:	2300      	movs	r3, #0
 80058fa:	4604      	mov	r4, r0
 80058fc:	4608      	mov	r0, r1
 80058fe:	602b      	str	r3, [r5, #0]
 8005900:	f7fb f99c 	bl	8000c3c <_sbrk>
 8005904:	1c43      	adds	r3, r0, #1
 8005906:	d102      	bne.n	800590e <_sbrk_r+0x1a>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	b103      	cbz	r3, 800590e <_sbrk_r+0x1a>
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	bd38      	pop	{r3, r4, r5, pc}
 8005910:	20000320 	.word	0x20000320

08005914 <__errno>:
 8005914:	4b01      	ldr	r3, [pc, #4]	; (800591c <__errno+0x8>)
 8005916:	6818      	ldr	r0, [r3, #0]
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	20000064 	.word	0x20000064

08005920 <__libc_init_array>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	4d0d      	ldr	r5, [pc, #52]	; (8005958 <__libc_init_array+0x38>)
 8005924:	4c0d      	ldr	r4, [pc, #52]	; (800595c <__libc_init_array+0x3c>)
 8005926:	1b64      	subs	r4, r4, r5
 8005928:	10a4      	asrs	r4, r4, #2
 800592a:	2600      	movs	r6, #0
 800592c:	42a6      	cmp	r6, r4
 800592e:	d109      	bne.n	8005944 <__libc_init_array+0x24>
 8005930:	4d0b      	ldr	r5, [pc, #44]	; (8005960 <__libc_init_array+0x40>)
 8005932:	4c0c      	ldr	r4, [pc, #48]	; (8005964 <__libc_init_array+0x44>)
 8005934:	f000 fd8c 	bl	8006450 <_init>
 8005938:	1b64      	subs	r4, r4, r5
 800593a:	10a4      	asrs	r4, r4, #2
 800593c:	2600      	movs	r6, #0
 800593e:	42a6      	cmp	r6, r4
 8005940:	d105      	bne.n	800594e <__libc_init_array+0x2e>
 8005942:	bd70      	pop	{r4, r5, r6, pc}
 8005944:	f855 3b04 	ldr.w	r3, [r5], #4
 8005948:	4798      	blx	r3
 800594a:	3601      	adds	r6, #1
 800594c:	e7ee      	b.n	800592c <__libc_init_array+0xc>
 800594e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005952:	4798      	blx	r3
 8005954:	3601      	adds	r6, #1
 8005956:	e7f2      	b.n	800593e <__libc_init_array+0x1e>
 8005958:	080064f4 	.word	0x080064f4
 800595c:	080064f4 	.word	0x080064f4
 8005960:	080064f4 	.word	0x080064f4
 8005964:	080064f8 	.word	0x080064f8

08005968 <__retarget_lock_init_recursive>:
 8005968:	4770      	bx	lr

0800596a <__retarget_lock_acquire_recursive>:
 800596a:	4770      	bx	lr

0800596c <__retarget_lock_release_recursive>:
 800596c:	4770      	bx	lr
	...

08005970 <_free_r>:
 8005970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005972:	2900      	cmp	r1, #0
 8005974:	d044      	beq.n	8005a00 <_free_r+0x90>
 8005976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800597a:	9001      	str	r0, [sp, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f1a1 0404 	sub.w	r4, r1, #4
 8005982:	bfb8      	it	lt
 8005984:	18e4      	addlt	r4, r4, r3
 8005986:	f7ff fe71 	bl	800566c <__malloc_lock>
 800598a:	4a1e      	ldr	r2, [pc, #120]	; (8005a04 <_free_r+0x94>)
 800598c:	9801      	ldr	r0, [sp, #4]
 800598e:	6813      	ldr	r3, [r2, #0]
 8005990:	b933      	cbnz	r3, 80059a0 <_free_r+0x30>
 8005992:	6063      	str	r3, [r4, #4]
 8005994:	6014      	str	r4, [r2, #0]
 8005996:	b003      	add	sp, #12
 8005998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800599c:	f7ff be6c 	b.w	8005678 <__malloc_unlock>
 80059a0:	42a3      	cmp	r3, r4
 80059a2:	d908      	bls.n	80059b6 <_free_r+0x46>
 80059a4:	6825      	ldr	r5, [r4, #0]
 80059a6:	1961      	adds	r1, r4, r5
 80059a8:	428b      	cmp	r3, r1
 80059aa:	bf01      	itttt	eq
 80059ac:	6819      	ldreq	r1, [r3, #0]
 80059ae:	685b      	ldreq	r3, [r3, #4]
 80059b0:	1949      	addeq	r1, r1, r5
 80059b2:	6021      	streq	r1, [r4, #0]
 80059b4:	e7ed      	b.n	8005992 <_free_r+0x22>
 80059b6:	461a      	mov	r2, r3
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	b10b      	cbz	r3, 80059c0 <_free_r+0x50>
 80059bc:	42a3      	cmp	r3, r4
 80059be:	d9fa      	bls.n	80059b6 <_free_r+0x46>
 80059c0:	6811      	ldr	r1, [r2, #0]
 80059c2:	1855      	adds	r5, r2, r1
 80059c4:	42a5      	cmp	r5, r4
 80059c6:	d10b      	bne.n	80059e0 <_free_r+0x70>
 80059c8:	6824      	ldr	r4, [r4, #0]
 80059ca:	4421      	add	r1, r4
 80059cc:	1854      	adds	r4, r2, r1
 80059ce:	42a3      	cmp	r3, r4
 80059d0:	6011      	str	r1, [r2, #0]
 80059d2:	d1e0      	bne.n	8005996 <_free_r+0x26>
 80059d4:	681c      	ldr	r4, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	6053      	str	r3, [r2, #4]
 80059da:	440c      	add	r4, r1
 80059dc:	6014      	str	r4, [r2, #0]
 80059de:	e7da      	b.n	8005996 <_free_r+0x26>
 80059e0:	d902      	bls.n	80059e8 <_free_r+0x78>
 80059e2:	230c      	movs	r3, #12
 80059e4:	6003      	str	r3, [r0, #0]
 80059e6:	e7d6      	b.n	8005996 <_free_r+0x26>
 80059e8:	6825      	ldr	r5, [r4, #0]
 80059ea:	1961      	adds	r1, r4, r5
 80059ec:	428b      	cmp	r3, r1
 80059ee:	bf04      	itt	eq
 80059f0:	6819      	ldreq	r1, [r3, #0]
 80059f2:	685b      	ldreq	r3, [r3, #4]
 80059f4:	6063      	str	r3, [r4, #4]
 80059f6:	bf04      	itt	eq
 80059f8:	1949      	addeq	r1, r1, r5
 80059fa:	6021      	streq	r1, [r4, #0]
 80059fc:	6054      	str	r4, [r2, #4]
 80059fe:	e7ca      	b.n	8005996 <_free_r+0x26>
 8005a00:	b003      	add	sp, #12
 8005a02:	bd30      	pop	{r4, r5, pc}
 8005a04:	200001d8 	.word	0x200001d8

08005a08 <__sfputc_r>:
 8005a08:	6893      	ldr	r3, [r2, #8]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	b410      	push	{r4}
 8005a10:	6093      	str	r3, [r2, #8]
 8005a12:	da08      	bge.n	8005a26 <__sfputc_r+0x1e>
 8005a14:	6994      	ldr	r4, [r2, #24]
 8005a16:	42a3      	cmp	r3, r4
 8005a18:	db01      	blt.n	8005a1e <__sfputc_r+0x16>
 8005a1a:	290a      	cmp	r1, #10
 8005a1c:	d103      	bne.n	8005a26 <__sfputc_r+0x1e>
 8005a1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a22:	f000 bbb6 	b.w	8006192 <__swbuf_r>
 8005a26:	6813      	ldr	r3, [r2, #0]
 8005a28:	1c58      	adds	r0, r3, #1
 8005a2a:	6010      	str	r0, [r2, #0]
 8005a2c:	7019      	strb	r1, [r3, #0]
 8005a2e:	4608      	mov	r0, r1
 8005a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <__sfputs_r>:
 8005a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a38:	4606      	mov	r6, r0
 8005a3a:	460f      	mov	r7, r1
 8005a3c:	4614      	mov	r4, r2
 8005a3e:	18d5      	adds	r5, r2, r3
 8005a40:	42ac      	cmp	r4, r5
 8005a42:	d101      	bne.n	8005a48 <__sfputs_r+0x12>
 8005a44:	2000      	movs	r0, #0
 8005a46:	e007      	b.n	8005a58 <__sfputs_r+0x22>
 8005a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a4c:	463a      	mov	r2, r7
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f7ff ffda 	bl	8005a08 <__sfputc_r>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d1f3      	bne.n	8005a40 <__sfputs_r+0xa>
 8005a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a5c <_vfiprintf_r>:
 8005a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a60:	460d      	mov	r5, r1
 8005a62:	b09d      	sub	sp, #116	; 0x74
 8005a64:	4614      	mov	r4, r2
 8005a66:	4698      	mov	r8, r3
 8005a68:	4606      	mov	r6, r0
 8005a6a:	b118      	cbz	r0, 8005a74 <_vfiprintf_r+0x18>
 8005a6c:	6a03      	ldr	r3, [r0, #32]
 8005a6e:	b90b      	cbnz	r3, 8005a74 <_vfiprintf_r+0x18>
 8005a70:	f7ff fe94 	bl	800579c <__sinit>
 8005a74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a76:	07d9      	lsls	r1, r3, #31
 8005a78:	d405      	bmi.n	8005a86 <_vfiprintf_r+0x2a>
 8005a7a:	89ab      	ldrh	r3, [r5, #12]
 8005a7c:	059a      	lsls	r2, r3, #22
 8005a7e:	d402      	bmi.n	8005a86 <_vfiprintf_r+0x2a>
 8005a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a82:	f7ff ff72 	bl	800596a <__retarget_lock_acquire_recursive>
 8005a86:	89ab      	ldrh	r3, [r5, #12]
 8005a88:	071b      	lsls	r3, r3, #28
 8005a8a:	d501      	bpl.n	8005a90 <_vfiprintf_r+0x34>
 8005a8c:	692b      	ldr	r3, [r5, #16]
 8005a8e:	b99b      	cbnz	r3, 8005ab8 <_vfiprintf_r+0x5c>
 8005a90:	4629      	mov	r1, r5
 8005a92:	4630      	mov	r0, r6
 8005a94:	f000 fbba 	bl	800620c <__swsetup_r>
 8005a98:	b170      	cbz	r0, 8005ab8 <_vfiprintf_r+0x5c>
 8005a9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a9c:	07dc      	lsls	r4, r3, #31
 8005a9e:	d504      	bpl.n	8005aaa <_vfiprintf_r+0x4e>
 8005aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005aa4:	b01d      	add	sp, #116	; 0x74
 8005aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aaa:	89ab      	ldrh	r3, [r5, #12]
 8005aac:	0598      	lsls	r0, r3, #22
 8005aae:	d4f7      	bmi.n	8005aa0 <_vfiprintf_r+0x44>
 8005ab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ab2:	f7ff ff5b 	bl	800596c <__retarget_lock_release_recursive>
 8005ab6:	e7f3      	b.n	8005aa0 <_vfiprintf_r+0x44>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9309      	str	r3, [sp, #36]	; 0x24
 8005abc:	2320      	movs	r3, #32
 8005abe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ac6:	2330      	movs	r3, #48	; 0x30
 8005ac8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005c7c <_vfiprintf_r+0x220>
 8005acc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ad0:	f04f 0901 	mov.w	r9, #1
 8005ad4:	4623      	mov	r3, r4
 8005ad6:	469a      	mov	sl, r3
 8005ad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005adc:	b10a      	cbz	r2, 8005ae2 <_vfiprintf_r+0x86>
 8005ade:	2a25      	cmp	r2, #37	; 0x25
 8005ae0:	d1f9      	bne.n	8005ad6 <_vfiprintf_r+0x7a>
 8005ae2:	ebba 0b04 	subs.w	fp, sl, r4
 8005ae6:	d00b      	beq.n	8005b00 <_vfiprintf_r+0xa4>
 8005ae8:	465b      	mov	r3, fp
 8005aea:	4622      	mov	r2, r4
 8005aec:	4629      	mov	r1, r5
 8005aee:	4630      	mov	r0, r6
 8005af0:	f7ff ffa1 	bl	8005a36 <__sfputs_r>
 8005af4:	3001      	adds	r0, #1
 8005af6:	f000 80a9 	beq.w	8005c4c <_vfiprintf_r+0x1f0>
 8005afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005afc:	445a      	add	r2, fp
 8005afe:	9209      	str	r2, [sp, #36]	; 0x24
 8005b00:	f89a 3000 	ldrb.w	r3, [sl]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 80a1 	beq.w	8005c4c <_vfiprintf_r+0x1f0>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b14:	f10a 0a01 	add.w	sl, sl, #1
 8005b18:	9304      	str	r3, [sp, #16]
 8005b1a:	9307      	str	r3, [sp, #28]
 8005b1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b20:	931a      	str	r3, [sp, #104]	; 0x68
 8005b22:	4654      	mov	r4, sl
 8005b24:	2205      	movs	r2, #5
 8005b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b2a:	4854      	ldr	r0, [pc, #336]	; (8005c7c <_vfiprintf_r+0x220>)
 8005b2c:	f7fa fb78 	bl	8000220 <memchr>
 8005b30:	9a04      	ldr	r2, [sp, #16]
 8005b32:	b9d8      	cbnz	r0, 8005b6c <_vfiprintf_r+0x110>
 8005b34:	06d1      	lsls	r1, r2, #27
 8005b36:	bf44      	itt	mi
 8005b38:	2320      	movmi	r3, #32
 8005b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b3e:	0713      	lsls	r3, r2, #28
 8005b40:	bf44      	itt	mi
 8005b42:	232b      	movmi	r3, #43	; 0x2b
 8005b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b48:	f89a 3000 	ldrb.w	r3, [sl]
 8005b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b4e:	d015      	beq.n	8005b7c <_vfiprintf_r+0x120>
 8005b50:	9a07      	ldr	r2, [sp, #28]
 8005b52:	4654      	mov	r4, sl
 8005b54:	2000      	movs	r0, #0
 8005b56:	f04f 0c0a 	mov.w	ip, #10
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b60:	3b30      	subs	r3, #48	; 0x30
 8005b62:	2b09      	cmp	r3, #9
 8005b64:	d94d      	bls.n	8005c02 <_vfiprintf_r+0x1a6>
 8005b66:	b1b0      	cbz	r0, 8005b96 <_vfiprintf_r+0x13a>
 8005b68:	9207      	str	r2, [sp, #28]
 8005b6a:	e014      	b.n	8005b96 <_vfiprintf_r+0x13a>
 8005b6c:	eba0 0308 	sub.w	r3, r0, r8
 8005b70:	fa09 f303 	lsl.w	r3, r9, r3
 8005b74:	4313      	orrs	r3, r2
 8005b76:	9304      	str	r3, [sp, #16]
 8005b78:	46a2      	mov	sl, r4
 8005b7a:	e7d2      	b.n	8005b22 <_vfiprintf_r+0xc6>
 8005b7c:	9b03      	ldr	r3, [sp, #12]
 8005b7e:	1d19      	adds	r1, r3, #4
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	9103      	str	r1, [sp, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	bfbb      	ittet	lt
 8005b88:	425b      	neglt	r3, r3
 8005b8a:	f042 0202 	orrlt.w	r2, r2, #2
 8005b8e:	9307      	strge	r3, [sp, #28]
 8005b90:	9307      	strlt	r3, [sp, #28]
 8005b92:	bfb8      	it	lt
 8005b94:	9204      	strlt	r2, [sp, #16]
 8005b96:	7823      	ldrb	r3, [r4, #0]
 8005b98:	2b2e      	cmp	r3, #46	; 0x2e
 8005b9a:	d10c      	bne.n	8005bb6 <_vfiprintf_r+0x15a>
 8005b9c:	7863      	ldrb	r3, [r4, #1]
 8005b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8005ba0:	d134      	bne.n	8005c0c <_vfiprintf_r+0x1b0>
 8005ba2:	9b03      	ldr	r3, [sp, #12]
 8005ba4:	1d1a      	adds	r2, r3, #4
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	9203      	str	r2, [sp, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	bfb8      	it	lt
 8005bae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005bb2:	3402      	adds	r4, #2
 8005bb4:	9305      	str	r3, [sp, #20]
 8005bb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c8c <_vfiprintf_r+0x230>
 8005bba:	7821      	ldrb	r1, [r4, #0]
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	4650      	mov	r0, sl
 8005bc0:	f7fa fb2e 	bl	8000220 <memchr>
 8005bc4:	b138      	cbz	r0, 8005bd6 <_vfiprintf_r+0x17a>
 8005bc6:	9b04      	ldr	r3, [sp, #16]
 8005bc8:	eba0 000a 	sub.w	r0, r0, sl
 8005bcc:	2240      	movs	r2, #64	; 0x40
 8005bce:	4082      	lsls	r2, r0
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	3401      	adds	r4, #1
 8005bd4:	9304      	str	r3, [sp, #16]
 8005bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bda:	4829      	ldr	r0, [pc, #164]	; (8005c80 <_vfiprintf_r+0x224>)
 8005bdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005be0:	2206      	movs	r2, #6
 8005be2:	f7fa fb1d 	bl	8000220 <memchr>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d03f      	beq.n	8005c6a <_vfiprintf_r+0x20e>
 8005bea:	4b26      	ldr	r3, [pc, #152]	; (8005c84 <_vfiprintf_r+0x228>)
 8005bec:	bb1b      	cbnz	r3, 8005c36 <_vfiprintf_r+0x1da>
 8005bee:	9b03      	ldr	r3, [sp, #12]
 8005bf0:	3307      	adds	r3, #7
 8005bf2:	f023 0307 	bic.w	r3, r3, #7
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	9303      	str	r3, [sp, #12]
 8005bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bfc:	443b      	add	r3, r7
 8005bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8005c00:	e768      	b.n	8005ad4 <_vfiprintf_r+0x78>
 8005c02:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c06:	460c      	mov	r4, r1
 8005c08:	2001      	movs	r0, #1
 8005c0a:	e7a6      	b.n	8005b5a <_vfiprintf_r+0xfe>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	3401      	adds	r4, #1
 8005c10:	9305      	str	r3, [sp, #20]
 8005c12:	4619      	mov	r1, r3
 8005c14:	f04f 0c0a 	mov.w	ip, #10
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c1e:	3a30      	subs	r2, #48	; 0x30
 8005c20:	2a09      	cmp	r2, #9
 8005c22:	d903      	bls.n	8005c2c <_vfiprintf_r+0x1d0>
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0c6      	beq.n	8005bb6 <_vfiprintf_r+0x15a>
 8005c28:	9105      	str	r1, [sp, #20]
 8005c2a:	e7c4      	b.n	8005bb6 <_vfiprintf_r+0x15a>
 8005c2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c30:	4604      	mov	r4, r0
 8005c32:	2301      	movs	r3, #1
 8005c34:	e7f0      	b.n	8005c18 <_vfiprintf_r+0x1bc>
 8005c36:	ab03      	add	r3, sp, #12
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	462a      	mov	r2, r5
 8005c3c:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <_vfiprintf_r+0x22c>)
 8005c3e:	a904      	add	r1, sp, #16
 8005c40:	4630      	mov	r0, r6
 8005c42:	f3af 8000 	nop.w
 8005c46:	4607      	mov	r7, r0
 8005c48:	1c78      	adds	r0, r7, #1
 8005c4a:	d1d6      	bne.n	8005bfa <_vfiprintf_r+0x19e>
 8005c4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c4e:	07d9      	lsls	r1, r3, #31
 8005c50:	d405      	bmi.n	8005c5e <_vfiprintf_r+0x202>
 8005c52:	89ab      	ldrh	r3, [r5, #12]
 8005c54:	059a      	lsls	r2, r3, #22
 8005c56:	d402      	bmi.n	8005c5e <_vfiprintf_r+0x202>
 8005c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c5a:	f7ff fe87 	bl	800596c <__retarget_lock_release_recursive>
 8005c5e:	89ab      	ldrh	r3, [r5, #12]
 8005c60:	065b      	lsls	r3, r3, #25
 8005c62:	f53f af1d 	bmi.w	8005aa0 <_vfiprintf_r+0x44>
 8005c66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c68:	e71c      	b.n	8005aa4 <_vfiprintf_r+0x48>
 8005c6a:	ab03      	add	r3, sp, #12
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	462a      	mov	r2, r5
 8005c70:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <_vfiprintf_r+0x22c>)
 8005c72:	a904      	add	r1, sp, #16
 8005c74:	4630      	mov	r0, r6
 8005c76:	f000 f879 	bl	8005d6c <_printf_i>
 8005c7a:	e7e4      	b.n	8005c46 <_vfiprintf_r+0x1ea>
 8005c7c:	080064b8 	.word	0x080064b8
 8005c80:	080064c2 	.word	0x080064c2
 8005c84:	00000000 	.word	0x00000000
 8005c88:	08005a37 	.word	0x08005a37
 8005c8c:	080064be 	.word	0x080064be

08005c90 <_printf_common>:
 8005c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c94:	4616      	mov	r6, r2
 8005c96:	4699      	mov	r9, r3
 8005c98:	688a      	ldr	r2, [r1, #8]
 8005c9a:	690b      	ldr	r3, [r1, #16]
 8005c9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	bfb8      	it	lt
 8005ca4:	4613      	movlt	r3, r2
 8005ca6:	6033      	str	r3, [r6, #0]
 8005ca8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cac:	4607      	mov	r7, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	b10a      	cbz	r2, 8005cb6 <_printf_common+0x26>
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	6033      	str	r3, [r6, #0]
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	0699      	lsls	r1, r3, #26
 8005cba:	bf42      	ittt	mi
 8005cbc:	6833      	ldrmi	r3, [r6, #0]
 8005cbe:	3302      	addmi	r3, #2
 8005cc0:	6033      	strmi	r3, [r6, #0]
 8005cc2:	6825      	ldr	r5, [r4, #0]
 8005cc4:	f015 0506 	ands.w	r5, r5, #6
 8005cc8:	d106      	bne.n	8005cd8 <_printf_common+0x48>
 8005cca:	f104 0a19 	add.w	sl, r4, #25
 8005cce:	68e3      	ldr	r3, [r4, #12]
 8005cd0:	6832      	ldr	r2, [r6, #0]
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	42ab      	cmp	r3, r5
 8005cd6:	dc26      	bgt.n	8005d26 <_printf_common+0x96>
 8005cd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cdc:	1e13      	subs	r3, r2, #0
 8005cde:	6822      	ldr	r2, [r4, #0]
 8005ce0:	bf18      	it	ne
 8005ce2:	2301      	movne	r3, #1
 8005ce4:	0692      	lsls	r2, r2, #26
 8005ce6:	d42b      	bmi.n	8005d40 <_printf_common+0xb0>
 8005ce8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cec:	4649      	mov	r1, r9
 8005cee:	4638      	mov	r0, r7
 8005cf0:	47c0      	blx	r8
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d01e      	beq.n	8005d34 <_printf_common+0xa4>
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	6922      	ldr	r2, [r4, #16]
 8005cfa:	f003 0306 	and.w	r3, r3, #6
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	bf02      	ittt	eq
 8005d02:	68e5      	ldreq	r5, [r4, #12]
 8005d04:	6833      	ldreq	r3, [r6, #0]
 8005d06:	1aed      	subeq	r5, r5, r3
 8005d08:	68a3      	ldr	r3, [r4, #8]
 8005d0a:	bf0c      	ite	eq
 8005d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d10:	2500      	movne	r5, #0
 8005d12:	4293      	cmp	r3, r2
 8005d14:	bfc4      	itt	gt
 8005d16:	1a9b      	subgt	r3, r3, r2
 8005d18:	18ed      	addgt	r5, r5, r3
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	341a      	adds	r4, #26
 8005d1e:	42b5      	cmp	r5, r6
 8005d20:	d11a      	bne.n	8005d58 <_printf_common+0xc8>
 8005d22:	2000      	movs	r0, #0
 8005d24:	e008      	b.n	8005d38 <_printf_common+0xa8>
 8005d26:	2301      	movs	r3, #1
 8005d28:	4652      	mov	r2, sl
 8005d2a:	4649      	mov	r1, r9
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	47c0      	blx	r8
 8005d30:	3001      	adds	r0, #1
 8005d32:	d103      	bne.n	8005d3c <_printf_common+0xac>
 8005d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3c:	3501      	adds	r5, #1
 8005d3e:	e7c6      	b.n	8005cce <_printf_common+0x3e>
 8005d40:	18e1      	adds	r1, r4, r3
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	2030      	movs	r0, #48	; 0x30
 8005d46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d4a:	4422      	add	r2, r4
 8005d4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d54:	3302      	adds	r3, #2
 8005d56:	e7c7      	b.n	8005ce8 <_printf_common+0x58>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	4649      	mov	r1, r9
 8005d5e:	4638      	mov	r0, r7
 8005d60:	47c0      	blx	r8
 8005d62:	3001      	adds	r0, #1
 8005d64:	d0e6      	beq.n	8005d34 <_printf_common+0xa4>
 8005d66:	3601      	adds	r6, #1
 8005d68:	e7d9      	b.n	8005d1e <_printf_common+0x8e>
	...

08005d6c <_printf_i>:
 8005d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d70:	7e0f      	ldrb	r7, [r1, #24]
 8005d72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d74:	2f78      	cmp	r7, #120	; 0x78
 8005d76:	4691      	mov	r9, r2
 8005d78:	4680      	mov	r8, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	469a      	mov	sl, r3
 8005d7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d82:	d807      	bhi.n	8005d94 <_printf_i+0x28>
 8005d84:	2f62      	cmp	r7, #98	; 0x62
 8005d86:	d80a      	bhi.n	8005d9e <_printf_i+0x32>
 8005d88:	2f00      	cmp	r7, #0
 8005d8a:	f000 80d4 	beq.w	8005f36 <_printf_i+0x1ca>
 8005d8e:	2f58      	cmp	r7, #88	; 0x58
 8005d90:	f000 80c0 	beq.w	8005f14 <_printf_i+0x1a8>
 8005d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d9c:	e03a      	b.n	8005e14 <_printf_i+0xa8>
 8005d9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005da2:	2b15      	cmp	r3, #21
 8005da4:	d8f6      	bhi.n	8005d94 <_printf_i+0x28>
 8005da6:	a101      	add	r1, pc, #4	; (adr r1, 8005dac <_printf_i+0x40>)
 8005da8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dac:	08005e05 	.word	0x08005e05
 8005db0:	08005e19 	.word	0x08005e19
 8005db4:	08005d95 	.word	0x08005d95
 8005db8:	08005d95 	.word	0x08005d95
 8005dbc:	08005d95 	.word	0x08005d95
 8005dc0:	08005d95 	.word	0x08005d95
 8005dc4:	08005e19 	.word	0x08005e19
 8005dc8:	08005d95 	.word	0x08005d95
 8005dcc:	08005d95 	.word	0x08005d95
 8005dd0:	08005d95 	.word	0x08005d95
 8005dd4:	08005d95 	.word	0x08005d95
 8005dd8:	08005f1d 	.word	0x08005f1d
 8005ddc:	08005e45 	.word	0x08005e45
 8005de0:	08005ed7 	.word	0x08005ed7
 8005de4:	08005d95 	.word	0x08005d95
 8005de8:	08005d95 	.word	0x08005d95
 8005dec:	08005f3f 	.word	0x08005f3f
 8005df0:	08005d95 	.word	0x08005d95
 8005df4:	08005e45 	.word	0x08005e45
 8005df8:	08005d95 	.word	0x08005d95
 8005dfc:	08005d95 	.word	0x08005d95
 8005e00:	08005edf 	.word	0x08005edf
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	1d1a      	adds	r2, r3, #4
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	602a      	str	r2, [r5, #0]
 8005e0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e14:	2301      	movs	r3, #1
 8005e16:	e09f      	b.n	8005f58 <_printf_i+0x1ec>
 8005e18:	6820      	ldr	r0, [r4, #0]
 8005e1a:	682b      	ldr	r3, [r5, #0]
 8005e1c:	0607      	lsls	r7, r0, #24
 8005e1e:	f103 0104 	add.w	r1, r3, #4
 8005e22:	6029      	str	r1, [r5, #0]
 8005e24:	d501      	bpl.n	8005e2a <_printf_i+0xbe>
 8005e26:	681e      	ldr	r6, [r3, #0]
 8005e28:	e003      	b.n	8005e32 <_printf_i+0xc6>
 8005e2a:	0646      	lsls	r6, r0, #25
 8005e2c:	d5fb      	bpl.n	8005e26 <_printf_i+0xba>
 8005e2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e32:	2e00      	cmp	r6, #0
 8005e34:	da03      	bge.n	8005e3e <_printf_i+0xd2>
 8005e36:	232d      	movs	r3, #45	; 0x2d
 8005e38:	4276      	negs	r6, r6
 8005e3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e3e:	485a      	ldr	r0, [pc, #360]	; (8005fa8 <_printf_i+0x23c>)
 8005e40:	230a      	movs	r3, #10
 8005e42:	e012      	b.n	8005e6a <_printf_i+0xfe>
 8005e44:	682b      	ldr	r3, [r5, #0]
 8005e46:	6820      	ldr	r0, [r4, #0]
 8005e48:	1d19      	adds	r1, r3, #4
 8005e4a:	6029      	str	r1, [r5, #0]
 8005e4c:	0605      	lsls	r5, r0, #24
 8005e4e:	d501      	bpl.n	8005e54 <_printf_i+0xe8>
 8005e50:	681e      	ldr	r6, [r3, #0]
 8005e52:	e002      	b.n	8005e5a <_printf_i+0xee>
 8005e54:	0641      	lsls	r1, r0, #25
 8005e56:	d5fb      	bpl.n	8005e50 <_printf_i+0xe4>
 8005e58:	881e      	ldrh	r6, [r3, #0]
 8005e5a:	4853      	ldr	r0, [pc, #332]	; (8005fa8 <_printf_i+0x23c>)
 8005e5c:	2f6f      	cmp	r7, #111	; 0x6f
 8005e5e:	bf0c      	ite	eq
 8005e60:	2308      	moveq	r3, #8
 8005e62:	230a      	movne	r3, #10
 8005e64:	2100      	movs	r1, #0
 8005e66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e6a:	6865      	ldr	r5, [r4, #4]
 8005e6c:	60a5      	str	r5, [r4, #8]
 8005e6e:	2d00      	cmp	r5, #0
 8005e70:	bfa2      	ittt	ge
 8005e72:	6821      	ldrge	r1, [r4, #0]
 8005e74:	f021 0104 	bicge.w	r1, r1, #4
 8005e78:	6021      	strge	r1, [r4, #0]
 8005e7a:	b90e      	cbnz	r6, 8005e80 <_printf_i+0x114>
 8005e7c:	2d00      	cmp	r5, #0
 8005e7e:	d04b      	beq.n	8005f18 <_printf_i+0x1ac>
 8005e80:	4615      	mov	r5, r2
 8005e82:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e86:	fb03 6711 	mls	r7, r3, r1, r6
 8005e8a:	5dc7      	ldrb	r7, [r0, r7]
 8005e8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e90:	4637      	mov	r7, r6
 8005e92:	42bb      	cmp	r3, r7
 8005e94:	460e      	mov	r6, r1
 8005e96:	d9f4      	bls.n	8005e82 <_printf_i+0x116>
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d10b      	bne.n	8005eb4 <_printf_i+0x148>
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	07de      	lsls	r6, r3, #31
 8005ea0:	d508      	bpl.n	8005eb4 <_printf_i+0x148>
 8005ea2:	6923      	ldr	r3, [r4, #16]
 8005ea4:	6861      	ldr	r1, [r4, #4]
 8005ea6:	4299      	cmp	r1, r3
 8005ea8:	bfde      	ittt	le
 8005eaa:	2330      	movle	r3, #48	; 0x30
 8005eac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005eb0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005eb4:	1b52      	subs	r2, r2, r5
 8005eb6:	6122      	str	r2, [r4, #16]
 8005eb8:	f8cd a000 	str.w	sl, [sp]
 8005ebc:	464b      	mov	r3, r9
 8005ebe:	aa03      	add	r2, sp, #12
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	f7ff fee4 	bl	8005c90 <_printf_common>
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d14a      	bne.n	8005f62 <_printf_i+0x1f6>
 8005ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ed0:	b004      	add	sp, #16
 8005ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	f043 0320 	orr.w	r3, r3, #32
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	4833      	ldr	r0, [pc, #204]	; (8005fac <_printf_i+0x240>)
 8005ee0:	2778      	movs	r7, #120	; 0x78
 8005ee2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	6829      	ldr	r1, [r5, #0]
 8005eea:	061f      	lsls	r7, r3, #24
 8005eec:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ef0:	d402      	bmi.n	8005ef8 <_printf_i+0x18c>
 8005ef2:	065f      	lsls	r7, r3, #25
 8005ef4:	bf48      	it	mi
 8005ef6:	b2b6      	uxthmi	r6, r6
 8005ef8:	07df      	lsls	r7, r3, #31
 8005efa:	bf48      	it	mi
 8005efc:	f043 0320 	orrmi.w	r3, r3, #32
 8005f00:	6029      	str	r1, [r5, #0]
 8005f02:	bf48      	it	mi
 8005f04:	6023      	strmi	r3, [r4, #0]
 8005f06:	b91e      	cbnz	r6, 8005f10 <_printf_i+0x1a4>
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	f023 0320 	bic.w	r3, r3, #32
 8005f0e:	6023      	str	r3, [r4, #0]
 8005f10:	2310      	movs	r3, #16
 8005f12:	e7a7      	b.n	8005e64 <_printf_i+0xf8>
 8005f14:	4824      	ldr	r0, [pc, #144]	; (8005fa8 <_printf_i+0x23c>)
 8005f16:	e7e4      	b.n	8005ee2 <_printf_i+0x176>
 8005f18:	4615      	mov	r5, r2
 8005f1a:	e7bd      	b.n	8005e98 <_printf_i+0x12c>
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	6826      	ldr	r6, [r4, #0]
 8005f20:	6961      	ldr	r1, [r4, #20]
 8005f22:	1d18      	adds	r0, r3, #4
 8005f24:	6028      	str	r0, [r5, #0]
 8005f26:	0635      	lsls	r5, r6, #24
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	d501      	bpl.n	8005f30 <_printf_i+0x1c4>
 8005f2c:	6019      	str	r1, [r3, #0]
 8005f2e:	e002      	b.n	8005f36 <_printf_i+0x1ca>
 8005f30:	0670      	lsls	r0, r6, #25
 8005f32:	d5fb      	bpl.n	8005f2c <_printf_i+0x1c0>
 8005f34:	8019      	strh	r1, [r3, #0]
 8005f36:	2300      	movs	r3, #0
 8005f38:	6123      	str	r3, [r4, #16]
 8005f3a:	4615      	mov	r5, r2
 8005f3c:	e7bc      	b.n	8005eb8 <_printf_i+0x14c>
 8005f3e:	682b      	ldr	r3, [r5, #0]
 8005f40:	1d1a      	adds	r2, r3, #4
 8005f42:	602a      	str	r2, [r5, #0]
 8005f44:	681d      	ldr	r5, [r3, #0]
 8005f46:	6862      	ldr	r2, [r4, #4]
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f7fa f968 	bl	8000220 <memchr>
 8005f50:	b108      	cbz	r0, 8005f56 <_printf_i+0x1ea>
 8005f52:	1b40      	subs	r0, r0, r5
 8005f54:	6060      	str	r0, [r4, #4]
 8005f56:	6863      	ldr	r3, [r4, #4]
 8005f58:	6123      	str	r3, [r4, #16]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f60:	e7aa      	b.n	8005eb8 <_printf_i+0x14c>
 8005f62:	6923      	ldr	r3, [r4, #16]
 8005f64:	462a      	mov	r2, r5
 8005f66:	4649      	mov	r1, r9
 8005f68:	4640      	mov	r0, r8
 8005f6a:	47d0      	blx	sl
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d0ad      	beq.n	8005ecc <_printf_i+0x160>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	079b      	lsls	r3, r3, #30
 8005f74:	d413      	bmi.n	8005f9e <_printf_i+0x232>
 8005f76:	68e0      	ldr	r0, [r4, #12]
 8005f78:	9b03      	ldr	r3, [sp, #12]
 8005f7a:	4298      	cmp	r0, r3
 8005f7c:	bfb8      	it	lt
 8005f7e:	4618      	movlt	r0, r3
 8005f80:	e7a6      	b.n	8005ed0 <_printf_i+0x164>
 8005f82:	2301      	movs	r3, #1
 8005f84:	4632      	mov	r2, r6
 8005f86:	4649      	mov	r1, r9
 8005f88:	4640      	mov	r0, r8
 8005f8a:	47d0      	blx	sl
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d09d      	beq.n	8005ecc <_printf_i+0x160>
 8005f90:	3501      	adds	r5, #1
 8005f92:	68e3      	ldr	r3, [r4, #12]
 8005f94:	9903      	ldr	r1, [sp, #12]
 8005f96:	1a5b      	subs	r3, r3, r1
 8005f98:	42ab      	cmp	r3, r5
 8005f9a:	dcf2      	bgt.n	8005f82 <_printf_i+0x216>
 8005f9c:	e7eb      	b.n	8005f76 <_printf_i+0x20a>
 8005f9e:	2500      	movs	r5, #0
 8005fa0:	f104 0619 	add.w	r6, r4, #25
 8005fa4:	e7f5      	b.n	8005f92 <_printf_i+0x226>
 8005fa6:	bf00      	nop
 8005fa8:	080064c9 	.word	0x080064c9
 8005fac:	080064da 	.word	0x080064da

08005fb0 <__sflush_r>:
 8005fb0:	898a      	ldrh	r2, [r1, #12]
 8005fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	0710      	lsls	r0, r2, #28
 8005fba:	460c      	mov	r4, r1
 8005fbc:	d458      	bmi.n	8006070 <__sflush_r+0xc0>
 8005fbe:	684b      	ldr	r3, [r1, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	dc05      	bgt.n	8005fd0 <__sflush_r+0x20>
 8005fc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	dc02      	bgt.n	8005fd0 <__sflush_r+0x20>
 8005fca:	2000      	movs	r0, #0
 8005fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fd2:	2e00      	cmp	r6, #0
 8005fd4:	d0f9      	beq.n	8005fca <__sflush_r+0x1a>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fdc:	682f      	ldr	r7, [r5, #0]
 8005fde:	6a21      	ldr	r1, [r4, #32]
 8005fe0:	602b      	str	r3, [r5, #0]
 8005fe2:	d032      	beq.n	800604a <__sflush_r+0x9a>
 8005fe4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	075a      	lsls	r2, r3, #29
 8005fea:	d505      	bpl.n	8005ff8 <__sflush_r+0x48>
 8005fec:	6863      	ldr	r3, [r4, #4]
 8005fee:	1ac0      	subs	r0, r0, r3
 8005ff0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ff2:	b10b      	cbz	r3, 8005ff8 <__sflush_r+0x48>
 8005ff4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ff6:	1ac0      	subs	r0, r0, r3
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ffe:	6a21      	ldr	r1, [r4, #32]
 8006000:	4628      	mov	r0, r5
 8006002:	47b0      	blx	r6
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	89a3      	ldrh	r3, [r4, #12]
 8006008:	d106      	bne.n	8006018 <__sflush_r+0x68>
 800600a:	6829      	ldr	r1, [r5, #0]
 800600c:	291d      	cmp	r1, #29
 800600e:	d82b      	bhi.n	8006068 <__sflush_r+0xb8>
 8006010:	4a29      	ldr	r2, [pc, #164]	; (80060b8 <__sflush_r+0x108>)
 8006012:	410a      	asrs	r2, r1
 8006014:	07d6      	lsls	r6, r2, #31
 8006016:	d427      	bmi.n	8006068 <__sflush_r+0xb8>
 8006018:	2200      	movs	r2, #0
 800601a:	6062      	str	r2, [r4, #4]
 800601c:	04d9      	lsls	r1, r3, #19
 800601e:	6922      	ldr	r2, [r4, #16]
 8006020:	6022      	str	r2, [r4, #0]
 8006022:	d504      	bpl.n	800602e <__sflush_r+0x7e>
 8006024:	1c42      	adds	r2, r0, #1
 8006026:	d101      	bne.n	800602c <__sflush_r+0x7c>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	b903      	cbnz	r3, 800602e <__sflush_r+0x7e>
 800602c:	6560      	str	r0, [r4, #84]	; 0x54
 800602e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006030:	602f      	str	r7, [r5, #0]
 8006032:	2900      	cmp	r1, #0
 8006034:	d0c9      	beq.n	8005fca <__sflush_r+0x1a>
 8006036:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800603a:	4299      	cmp	r1, r3
 800603c:	d002      	beq.n	8006044 <__sflush_r+0x94>
 800603e:	4628      	mov	r0, r5
 8006040:	f7ff fc96 	bl	8005970 <_free_r>
 8006044:	2000      	movs	r0, #0
 8006046:	6360      	str	r0, [r4, #52]	; 0x34
 8006048:	e7c0      	b.n	8005fcc <__sflush_r+0x1c>
 800604a:	2301      	movs	r3, #1
 800604c:	4628      	mov	r0, r5
 800604e:	47b0      	blx	r6
 8006050:	1c41      	adds	r1, r0, #1
 8006052:	d1c8      	bne.n	8005fe6 <__sflush_r+0x36>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0c5      	beq.n	8005fe6 <__sflush_r+0x36>
 800605a:	2b1d      	cmp	r3, #29
 800605c:	d001      	beq.n	8006062 <__sflush_r+0xb2>
 800605e:	2b16      	cmp	r3, #22
 8006060:	d101      	bne.n	8006066 <__sflush_r+0xb6>
 8006062:	602f      	str	r7, [r5, #0]
 8006064:	e7b1      	b.n	8005fca <__sflush_r+0x1a>
 8006066:	89a3      	ldrh	r3, [r4, #12]
 8006068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800606c:	81a3      	strh	r3, [r4, #12]
 800606e:	e7ad      	b.n	8005fcc <__sflush_r+0x1c>
 8006070:	690f      	ldr	r7, [r1, #16]
 8006072:	2f00      	cmp	r7, #0
 8006074:	d0a9      	beq.n	8005fca <__sflush_r+0x1a>
 8006076:	0793      	lsls	r3, r2, #30
 8006078:	680e      	ldr	r6, [r1, #0]
 800607a:	bf08      	it	eq
 800607c:	694b      	ldreq	r3, [r1, #20]
 800607e:	600f      	str	r7, [r1, #0]
 8006080:	bf18      	it	ne
 8006082:	2300      	movne	r3, #0
 8006084:	eba6 0807 	sub.w	r8, r6, r7
 8006088:	608b      	str	r3, [r1, #8]
 800608a:	f1b8 0f00 	cmp.w	r8, #0
 800608e:	dd9c      	ble.n	8005fca <__sflush_r+0x1a>
 8006090:	6a21      	ldr	r1, [r4, #32]
 8006092:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006094:	4643      	mov	r3, r8
 8006096:	463a      	mov	r2, r7
 8006098:	4628      	mov	r0, r5
 800609a:	47b0      	blx	r6
 800609c:	2800      	cmp	r0, #0
 800609e:	dc06      	bgt.n	80060ae <__sflush_r+0xfe>
 80060a0:	89a3      	ldrh	r3, [r4, #12]
 80060a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060a6:	81a3      	strh	r3, [r4, #12]
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060ac:	e78e      	b.n	8005fcc <__sflush_r+0x1c>
 80060ae:	4407      	add	r7, r0
 80060b0:	eba8 0800 	sub.w	r8, r8, r0
 80060b4:	e7e9      	b.n	800608a <__sflush_r+0xda>
 80060b6:	bf00      	nop
 80060b8:	dfbffffe 	.word	0xdfbffffe

080060bc <_fflush_r>:
 80060bc:	b538      	push	{r3, r4, r5, lr}
 80060be:	690b      	ldr	r3, [r1, #16]
 80060c0:	4605      	mov	r5, r0
 80060c2:	460c      	mov	r4, r1
 80060c4:	b913      	cbnz	r3, 80060cc <_fflush_r+0x10>
 80060c6:	2500      	movs	r5, #0
 80060c8:	4628      	mov	r0, r5
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	b118      	cbz	r0, 80060d6 <_fflush_r+0x1a>
 80060ce:	6a03      	ldr	r3, [r0, #32]
 80060d0:	b90b      	cbnz	r3, 80060d6 <_fflush_r+0x1a>
 80060d2:	f7ff fb63 	bl	800579c <__sinit>
 80060d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0f3      	beq.n	80060c6 <_fflush_r+0xa>
 80060de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060e0:	07d0      	lsls	r0, r2, #31
 80060e2:	d404      	bmi.n	80060ee <_fflush_r+0x32>
 80060e4:	0599      	lsls	r1, r3, #22
 80060e6:	d402      	bmi.n	80060ee <_fflush_r+0x32>
 80060e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ea:	f7ff fc3e 	bl	800596a <__retarget_lock_acquire_recursive>
 80060ee:	4628      	mov	r0, r5
 80060f0:	4621      	mov	r1, r4
 80060f2:	f7ff ff5d 	bl	8005fb0 <__sflush_r>
 80060f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060f8:	07da      	lsls	r2, r3, #31
 80060fa:	4605      	mov	r5, r0
 80060fc:	d4e4      	bmi.n	80060c8 <_fflush_r+0xc>
 80060fe:	89a3      	ldrh	r3, [r4, #12]
 8006100:	059b      	lsls	r3, r3, #22
 8006102:	d4e1      	bmi.n	80060c8 <_fflush_r+0xc>
 8006104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006106:	f7ff fc31 	bl	800596c <__retarget_lock_release_recursive>
 800610a:	e7dd      	b.n	80060c8 <_fflush_r+0xc>

0800610c <__sread>:
 800610c:	b510      	push	{r4, lr}
 800610e:	460c      	mov	r4, r1
 8006110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006114:	f000 f978 	bl	8006408 <_read_r>
 8006118:	2800      	cmp	r0, #0
 800611a:	bfab      	itete	ge
 800611c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800611e:	89a3      	ldrhlt	r3, [r4, #12]
 8006120:	181b      	addge	r3, r3, r0
 8006122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006126:	bfac      	ite	ge
 8006128:	6563      	strge	r3, [r4, #84]	; 0x54
 800612a:	81a3      	strhlt	r3, [r4, #12]
 800612c:	bd10      	pop	{r4, pc}

0800612e <__swrite>:
 800612e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006132:	461f      	mov	r7, r3
 8006134:	898b      	ldrh	r3, [r1, #12]
 8006136:	05db      	lsls	r3, r3, #23
 8006138:	4605      	mov	r5, r0
 800613a:	460c      	mov	r4, r1
 800613c:	4616      	mov	r6, r2
 800613e:	d505      	bpl.n	800614c <__swrite+0x1e>
 8006140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006144:	2302      	movs	r3, #2
 8006146:	2200      	movs	r2, #0
 8006148:	f000 f94c 	bl	80063e4 <_lseek_r>
 800614c:	89a3      	ldrh	r3, [r4, #12]
 800614e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006156:	81a3      	strh	r3, [r4, #12]
 8006158:	4632      	mov	r2, r6
 800615a:	463b      	mov	r3, r7
 800615c:	4628      	mov	r0, r5
 800615e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006162:	f000 b963 	b.w	800642c <_write_r>

08006166 <__sseek>:
 8006166:	b510      	push	{r4, lr}
 8006168:	460c      	mov	r4, r1
 800616a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800616e:	f000 f939 	bl	80063e4 <_lseek_r>
 8006172:	1c43      	adds	r3, r0, #1
 8006174:	89a3      	ldrh	r3, [r4, #12]
 8006176:	bf15      	itete	ne
 8006178:	6560      	strne	r0, [r4, #84]	; 0x54
 800617a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800617e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006182:	81a3      	strheq	r3, [r4, #12]
 8006184:	bf18      	it	ne
 8006186:	81a3      	strhne	r3, [r4, #12]
 8006188:	bd10      	pop	{r4, pc}

0800618a <__sclose>:
 800618a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800618e:	f000 b8f7 	b.w	8006380 <_close_r>

08006192 <__swbuf_r>:
 8006192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006194:	460e      	mov	r6, r1
 8006196:	4614      	mov	r4, r2
 8006198:	4605      	mov	r5, r0
 800619a:	b118      	cbz	r0, 80061a4 <__swbuf_r+0x12>
 800619c:	6a03      	ldr	r3, [r0, #32]
 800619e:	b90b      	cbnz	r3, 80061a4 <__swbuf_r+0x12>
 80061a0:	f7ff fafc 	bl	800579c <__sinit>
 80061a4:	69a3      	ldr	r3, [r4, #24]
 80061a6:	60a3      	str	r3, [r4, #8]
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	071a      	lsls	r2, r3, #28
 80061ac:	d525      	bpl.n	80061fa <__swbuf_r+0x68>
 80061ae:	6923      	ldr	r3, [r4, #16]
 80061b0:	b31b      	cbz	r3, 80061fa <__swbuf_r+0x68>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	6922      	ldr	r2, [r4, #16]
 80061b6:	1a98      	subs	r0, r3, r2
 80061b8:	6963      	ldr	r3, [r4, #20]
 80061ba:	b2f6      	uxtb	r6, r6
 80061bc:	4283      	cmp	r3, r0
 80061be:	4637      	mov	r7, r6
 80061c0:	dc04      	bgt.n	80061cc <__swbuf_r+0x3a>
 80061c2:	4621      	mov	r1, r4
 80061c4:	4628      	mov	r0, r5
 80061c6:	f7ff ff79 	bl	80060bc <_fflush_r>
 80061ca:	b9e0      	cbnz	r0, 8006206 <__swbuf_r+0x74>
 80061cc:	68a3      	ldr	r3, [r4, #8]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	60a3      	str	r3, [r4, #8]
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	6022      	str	r2, [r4, #0]
 80061d8:	701e      	strb	r6, [r3, #0]
 80061da:	6962      	ldr	r2, [r4, #20]
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	429a      	cmp	r2, r3
 80061e0:	d004      	beq.n	80061ec <__swbuf_r+0x5a>
 80061e2:	89a3      	ldrh	r3, [r4, #12]
 80061e4:	07db      	lsls	r3, r3, #31
 80061e6:	d506      	bpl.n	80061f6 <__swbuf_r+0x64>
 80061e8:	2e0a      	cmp	r6, #10
 80061ea:	d104      	bne.n	80061f6 <__swbuf_r+0x64>
 80061ec:	4621      	mov	r1, r4
 80061ee:	4628      	mov	r0, r5
 80061f0:	f7ff ff64 	bl	80060bc <_fflush_r>
 80061f4:	b938      	cbnz	r0, 8006206 <__swbuf_r+0x74>
 80061f6:	4638      	mov	r0, r7
 80061f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061fa:	4621      	mov	r1, r4
 80061fc:	4628      	mov	r0, r5
 80061fe:	f000 f805 	bl	800620c <__swsetup_r>
 8006202:	2800      	cmp	r0, #0
 8006204:	d0d5      	beq.n	80061b2 <__swbuf_r+0x20>
 8006206:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800620a:	e7f4      	b.n	80061f6 <__swbuf_r+0x64>

0800620c <__swsetup_r>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	4b2a      	ldr	r3, [pc, #168]	; (80062b8 <__swsetup_r+0xac>)
 8006210:	4605      	mov	r5, r0
 8006212:	6818      	ldr	r0, [r3, #0]
 8006214:	460c      	mov	r4, r1
 8006216:	b118      	cbz	r0, 8006220 <__swsetup_r+0x14>
 8006218:	6a03      	ldr	r3, [r0, #32]
 800621a:	b90b      	cbnz	r3, 8006220 <__swsetup_r+0x14>
 800621c:	f7ff fabe 	bl	800579c <__sinit>
 8006220:	89a3      	ldrh	r3, [r4, #12]
 8006222:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006226:	0718      	lsls	r0, r3, #28
 8006228:	d422      	bmi.n	8006270 <__swsetup_r+0x64>
 800622a:	06d9      	lsls	r1, r3, #27
 800622c:	d407      	bmi.n	800623e <__swsetup_r+0x32>
 800622e:	2309      	movs	r3, #9
 8006230:	602b      	str	r3, [r5, #0]
 8006232:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006236:	81a3      	strh	r3, [r4, #12]
 8006238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800623c:	e034      	b.n	80062a8 <__swsetup_r+0x9c>
 800623e:	0758      	lsls	r0, r3, #29
 8006240:	d512      	bpl.n	8006268 <__swsetup_r+0x5c>
 8006242:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006244:	b141      	cbz	r1, 8006258 <__swsetup_r+0x4c>
 8006246:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800624a:	4299      	cmp	r1, r3
 800624c:	d002      	beq.n	8006254 <__swsetup_r+0x48>
 800624e:	4628      	mov	r0, r5
 8006250:	f7ff fb8e 	bl	8005970 <_free_r>
 8006254:	2300      	movs	r3, #0
 8006256:	6363      	str	r3, [r4, #52]	; 0x34
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800625e:	81a3      	strh	r3, [r4, #12]
 8006260:	2300      	movs	r3, #0
 8006262:	6063      	str	r3, [r4, #4]
 8006264:	6923      	ldr	r3, [r4, #16]
 8006266:	6023      	str	r3, [r4, #0]
 8006268:	89a3      	ldrh	r3, [r4, #12]
 800626a:	f043 0308 	orr.w	r3, r3, #8
 800626e:	81a3      	strh	r3, [r4, #12]
 8006270:	6923      	ldr	r3, [r4, #16]
 8006272:	b94b      	cbnz	r3, 8006288 <__swsetup_r+0x7c>
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800627a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800627e:	d003      	beq.n	8006288 <__swsetup_r+0x7c>
 8006280:	4621      	mov	r1, r4
 8006282:	4628      	mov	r0, r5
 8006284:	f000 f840 	bl	8006308 <__smakebuf_r>
 8006288:	89a0      	ldrh	r0, [r4, #12]
 800628a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800628e:	f010 0301 	ands.w	r3, r0, #1
 8006292:	d00a      	beq.n	80062aa <__swsetup_r+0x9e>
 8006294:	2300      	movs	r3, #0
 8006296:	60a3      	str	r3, [r4, #8]
 8006298:	6963      	ldr	r3, [r4, #20]
 800629a:	425b      	negs	r3, r3
 800629c:	61a3      	str	r3, [r4, #24]
 800629e:	6923      	ldr	r3, [r4, #16]
 80062a0:	b943      	cbnz	r3, 80062b4 <__swsetup_r+0xa8>
 80062a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062a6:	d1c4      	bne.n	8006232 <__swsetup_r+0x26>
 80062a8:	bd38      	pop	{r3, r4, r5, pc}
 80062aa:	0781      	lsls	r1, r0, #30
 80062ac:	bf58      	it	pl
 80062ae:	6963      	ldrpl	r3, [r4, #20]
 80062b0:	60a3      	str	r3, [r4, #8]
 80062b2:	e7f4      	b.n	800629e <__swsetup_r+0x92>
 80062b4:	2000      	movs	r0, #0
 80062b6:	e7f7      	b.n	80062a8 <__swsetup_r+0x9c>
 80062b8:	20000064 	.word	0x20000064

080062bc <__swhatbuf_r>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	460c      	mov	r4, r1
 80062c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c4:	2900      	cmp	r1, #0
 80062c6:	b096      	sub	sp, #88	; 0x58
 80062c8:	4615      	mov	r5, r2
 80062ca:	461e      	mov	r6, r3
 80062cc:	da0d      	bge.n	80062ea <__swhatbuf_r+0x2e>
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80062d4:	f04f 0100 	mov.w	r1, #0
 80062d8:	bf0c      	ite	eq
 80062da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80062de:	2340      	movne	r3, #64	; 0x40
 80062e0:	2000      	movs	r0, #0
 80062e2:	6031      	str	r1, [r6, #0]
 80062e4:	602b      	str	r3, [r5, #0]
 80062e6:	b016      	add	sp, #88	; 0x58
 80062e8:	bd70      	pop	{r4, r5, r6, pc}
 80062ea:	466a      	mov	r2, sp
 80062ec:	f000 f858 	bl	80063a0 <_fstat_r>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	dbec      	blt.n	80062ce <__swhatbuf_r+0x12>
 80062f4:	9901      	ldr	r1, [sp, #4]
 80062f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80062fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80062fe:	4259      	negs	r1, r3
 8006300:	4159      	adcs	r1, r3
 8006302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006306:	e7eb      	b.n	80062e0 <__swhatbuf_r+0x24>

08006308 <__smakebuf_r>:
 8006308:	898b      	ldrh	r3, [r1, #12]
 800630a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800630c:	079d      	lsls	r5, r3, #30
 800630e:	4606      	mov	r6, r0
 8006310:	460c      	mov	r4, r1
 8006312:	d507      	bpl.n	8006324 <__smakebuf_r+0x1c>
 8006314:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	6123      	str	r3, [r4, #16]
 800631c:	2301      	movs	r3, #1
 800631e:	6163      	str	r3, [r4, #20]
 8006320:	b002      	add	sp, #8
 8006322:	bd70      	pop	{r4, r5, r6, pc}
 8006324:	ab01      	add	r3, sp, #4
 8006326:	466a      	mov	r2, sp
 8006328:	f7ff ffc8 	bl	80062bc <__swhatbuf_r>
 800632c:	9900      	ldr	r1, [sp, #0]
 800632e:	4605      	mov	r5, r0
 8006330:	4630      	mov	r0, r6
 8006332:	f7ff f91b 	bl	800556c <_malloc_r>
 8006336:	b948      	cbnz	r0, 800634c <__smakebuf_r+0x44>
 8006338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800633c:	059a      	lsls	r2, r3, #22
 800633e:	d4ef      	bmi.n	8006320 <__smakebuf_r+0x18>
 8006340:	f023 0303 	bic.w	r3, r3, #3
 8006344:	f043 0302 	orr.w	r3, r3, #2
 8006348:	81a3      	strh	r3, [r4, #12]
 800634a:	e7e3      	b.n	8006314 <__smakebuf_r+0xc>
 800634c:	89a3      	ldrh	r3, [r4, #12]
 800634e:	6020      	str	r0, [r4, #0]
 8006350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006354:	81a3      	strh	r3, [r4, #12]
 8006356:	9b00      	ldr	r3, [sp, #0]
 8006358:	6163      	str	r3, [r4, #20]
 800635a:	9b01      	ldr	r3, [sp, #4]
 800635c:	6120      	str	r0, [r4, #16]
 800635e:	b15b      	cbz	r3, 8006378 <__smakebuf_r+0x70>
 8006360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006364:	4630      	mov	r0, r6
 8006366:	f000 f82d 	bl	80063c4 <_isatty_r>
 800636a:	b128      	cbz	r0, 8006378 <__smakebuf_r+0x70>
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	f023 0303 	bic.w	r3, r3, #3
 8006372:	f043 0301 	orr.w	r3, r3, #1
 8006376:	81a3      	strh	r3, [r4, #12]
 8006378:	89a3      	ldrh	r3, [r4, #12]
 800637a:	431d      	orrs	r5, r3
 800637c:	81a5      	strh	r5, [r4, #12]
 800637e:	e7cf      	b.n	8006320 <__smakebuf_r+0x18>

08006380 <_close_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4d06      	ldr	r5, [pc, #24]	; (800639c <_close_r+0x1c>)
 8006384:	2300      	movs	r3, #0
 8006386:	4604      	mov	r4, r0
 8006388:	4608      	mov	r0, r1
 800638a:	602b      	str	r3, [r5, #0]
 800638c:	f7fa fc21 	bl	8000bd2 <_close>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d102      	bne.n	800639a <_close_r+0x1a>
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	b103      	cbz	r3, 800639a <_close_r+0x1a>
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	bd38      	pop	{r3, r4, r5, pc}
 800639c:	20000320 	.word	0x20000320

080063a0 <_fstat_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4d07      	ldr	r5, [pc, #28]	; (80063c0 <_fstat_r+0x20>)
 80063a4:	2300      	movs	r3, #0
 80063a6:	4604      	mov	r4, r0
 80063a8:	4608      	mov	r0, r1
 80063aa:	4611      	mov	r1, r2
 80063ac:	602b      	str	r3, [r5, #0]
 80063ae:	f7fa fc1c 	bl	8000bea <_fstat>
 80063b2:	1c43      	adds	r3, r0, #1
 80063b4:	d102      	bne.n	80063bc <_fstat_r+0x1c>
 80063b6:	682b      	ldr	r3, [r5, #0]
 80063b8:	b103      	cbz	r3, 80063bc <_fstat_r+0x1c>
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	bd38      	pop	{r3, r4, r5, pc}
 80063be:	bf00      	nop
 80063c0:	20000320 	.word	0x20000320

080063c4 <_isatty_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	4d06      	ldr	r5, [pc, #24]	; (80063e0 <_isatty_r+0x1c>)
 80063c8:	2300      	movs	r3, #0
 80063ca:	4604      	mov	r4, r0
 80063cc:	4608      	mov	r0, r1
 80063ce:	602b      	str	r3, [r5, #0]
 80063d0:	f7fa fc1b 	bl	8000c0a <_isatty>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d102      	bne.n	80063de <_isatty_r+0x1a>
 80063d8:	682b      	ldr	r3, [r5, #0]
 80063da:	b103      	cbz	r3, 80063de <_isatty_r+0x1a>
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	20000320 	.word	0x20000320

080063e4 <_lseek_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4d07      	ldr	r5, [pc, #28]	; (8006404 <_lseek_r+0x20>)
 80063e8:	4604      	mov	r4, r0
 80063ea:	4608      	mov	r0, r1
 80063ec:	4611      	mov	r1, r2
 80063ee:	2200      	movs	r2, #0
 80063f0:	602a      	str	r2, [r5, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	f7fa fc14 	bl	8000c20 <_lseek>
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d102      	bne.n	8006402 <_lseek_r+0x1e>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	b103      	cbz	r3, 8006402 <_lseek_r+0x1e>
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	bd38      	pop	{r3, r4, r5, pc}
 8006404:	20000320 	.word	0x20000320

08006408 <_read_r>:
 8006408:	b538      	push	{r3, r4, r5, lr}
 800640a:	4d07      	ldr	r5, [pc, #28]	; (8006428 <_read_r+0x20>)
 800640c:	4604      	mov	r4, r0
 800640e:	4608      	mov	r0, r1
 8006410:	4611      	mov	r1, r2
 8006412:	2200      	movs	r2, #0
 8006414:	602a      	str	r2, [r5, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	f7fa fbbe 	bl	8000b98 <_read>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d102      	bne.n	8006426 <_read_r+0x1e>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	b103      	cbz	r3, 8006426 <_read_r+0x1e>
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	20000320 	.word	0x20000320

0800642c <_write_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d07      	ldr	r5, [pc, #28]	; (800644c <_write_r+0x20>)
 8006430:	4604      	mov	r4, r0
 8006432:	4608      	mov	r0, r1
 8006434:	4611      	mov	r1, r2
 8006436:	2200      	movs	r2, #0
 8006438:	602a      	str	r2, [r5, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	f7fa f8f2 	bl	8000624 <_write>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d102      	bne.n	800644a <_write_r+0x1e>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	b103      	cbz	r3, 800644a <_write_r+0x1e>
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	bd38      	pop	{r3, r4, r5, pc}
 800644c:	20000320 	.word	0x20000320

08006450 <_init>:
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	bf00      	nop
 8006454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006456:	bc08      	pop	{r3}
 8006458:	469e      	mov	lr, r3
 800645a:	4770      	bx	lr

0800645c <_fini>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	bf00      	nop
 8006460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006462:	bc08      	pop	{r3}
 8006464:	469e      	mov	lr, r3
 8006466:	4770      	bx	lr
